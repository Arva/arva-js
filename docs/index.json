[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/components/DataBoundScrollView.js",
    "content": "/**\n This Source Code is licensed under the MIT license. If a copy of the\n MIT-license was not distributed with this file, You can obtain one at:\n http://opensource.org/licenses/mit-license.html.\n\n @author: Hans van den Akker (mysim1)\n @license MIT\n @copyright Bizboard, 2015\n\n */\n\nimport sortBy                       from 'lodash/sortBy.js';\nimport findIndex                    from 'lodash/findIndex.js';\nimport ListLayout                   from 'famous-flex/layouts/ListLayout.js';\n\nimport {Throttler}                  from '../utils/Throttler.js';\nimport {Utils}                      from '../utils/view/Utils.js';\nimport {ReflowingScrollView}        from './ReflowingScrollView.js';\nimport {combineOptions}             from '../utils/CombineOptions.js';\n\n/**\n * A component for displaying multiple elements based on a two-way connection with a PrioritisedArray,\n * with support for grouping, sorting and header.\n */\n//TODO Fix so that the background is scrollable (full size)\nexport class DataBoundScrollView extends ReflowingScrollView {\n\n\n    /**\n     * Be sure to specify either a getSize function in the class of the itemTemplate, or to specify the size in the\n     * layoutOptions.\n     *\n     * @param {Object} options The options passed inherit from previous classes. Avoid using the dataSource option since\n     * the DataBoundScrollView creates its own dataSource from options.dataStore.\n     * @param {PrioritisedArray} [options.dataStore] The data that should be read to create entries.\n     * @param {PrioritisedArray} [options.dataStores] Instead of passing one dataStore, this option can be used to pass multiple\n     * @param {Function} [options.itemTemplate] A function that returns a renderable representing each data item.\n     * @param {Function} [options.placeholderTemplate] A function that returns a renderable to display when there are\n     * no items present.\n     * @param {Function} [options.headerTemplate] A function that returns a renderable to display as a header.\n     * @param {Function} [options.orderBy] An ordering function that takes two data models (model1, model2).\n     * If it returns true, then model1 should go before model2.\n     * @param {Function} [options.groupBy] A function that takes a model and returns a value to group by. If set, then\n     * the groupTemplate option also needs to be set.\n     * @param {Function} [options.groupTemplate] A function that takes as a single argument, the groupBy value, and returns\n     * a renderable to insert before a group belonging to that value.\n     * @param {function} [options.dataFilter] Filter what data is relevant to the view. Should be a function taking as\n     * an argument a model and from there returning a boolean.\n     * @param {Boolean} [options.stickHeaders] If set to true, then the group headers will stick to the top when scrolling.\n     * Beware that this is slightly buggy as of now and might require some fine tuning to provide a better UX.\n     * @param {Function} [options.customInsertSpec] A function that takes as a single argument a model and returns a spec\n     * that is used when inserting a new item.\n     * @param {Boolean} [options.chatScrolling] If set to true, the scroll will remain at the bottom if at bottom already\n     * when new messages are added.\n     *\n     * If this function returns true, then model1 will be placed before model2.\n     *\n     */\n    constructor(options = {}) {\n        super(combineOptions({\n            scrollFriction: {\n                strength: 0.0015\n            },\n            autoPipeEvents: true,\n            throttleDelay: 0, /* If set to 0, no delay is added in between adding items to the DataBoundScrollView. */\n            dataSource: [],\n            sortingDirection: 'ascending',\n            flow: true,\n            flowOptions: {\n                spring: {               // spring-options used when transitioning between states\n                    dampingRatio: 0.8,  // spring damping ratio\n                    period: 1000        // duration of the animation\n                },\n                insertSpec: {           // render-spec used when inserting renderables\n                    opacity: 0          // start opacity is 0, causing a fade-in effect,\n                }\n            },\n            dataFilter: () => true,\n            ensureVisible: null,\n            layoutOptions: {\n                isSectionCallback: options.stickyHeaders ? function (renderNode) {\n                    return renderNode.groupId !== undefined;\n                } : undefined\n            },\n            chatScrolling: false\n        }, options));\n\n        this._internalDataSource = {};\n        this._internalGroups = {};\n        this._eventCallbacks = {};\n\n        /* In order to keep track of what's being removed, we store this which maps an id to a boolean */\n        this._removedEntries = {};\n        this._isGrouped = this.options.groupBy != null;\n        this._isDescending = this.options.sortingDirection === 'descending';\n        this._throttler = new Throttler(this.options.throttleDelay, true, this);\n        this._useCustomOrdering = !!this.options.orderBy;\n        /* If no orderBy method is set, or it is a string field name, we set our own ordering method. */\n        if (!this.options.orderBy || typeof this.options.orderBy === 'string') {\n            let fieldName = this.options.orderBy || 'id';\n            this.options.orderBy = function (firstModel, secondModel) {\n                if (this._isDescending) {\n                    return firstModel[fieldName] > secondModel[fieldName];\n                } else {\n                    return firstModel[fieldName] < secondModel[fieldName];\n                }\n            }.bind(this);\n        }\n\n\n        /* If present in options.headerTemplate or options.placeholderTemplate, we build the header and placeholder elements. */\n        this._addHeader();\n        this._addPlaceholder();\n\n\n        if (!this.options.itemTemplate) {\n            console.log('DataBoundScrollView.options.itemTemplate must be set!');\n            return this;\n        }\n\n\n        if (this.options.dataStore && this.options.dataStores) {\n            throw new Error('Both the single dataStore and the multiple dataStores is set, please decide for one or the other');\n        }\n        if (this.options.dataStores) {\n            this._bindMultipleDataSources(this.options.dataStores);\n        } else if (this.options.dataStore) {\n            this._bindDataSource(this.options.dataStore);\n        }\n    }\n\n    /**\n     * Gets a renderable from a specific ID\n     *\n     * @param {String} id The id of data\n     * @param {Number} [dataStoreIndex] the index of the dataStore that is used, if several of them are specified\n     */\n    getRenderableFromID(id, dataStoreIndex = 0) {\n        let data = this._findData(id, dataStoreIndex);\n        if (data) {\n            return data.renderable;\n        }\n    }\n\n    /**\n     * Set a template function, optionally re-renders all the dataSource' renderables\n     * @param templateFunction\n     */\n    setItemTemplate(templateFunction = {}, reRender = false) {\n        this.options.itemTemplate = templateFunction;\n\n        if (reRender) {\n            this.clearDataStore();\n            this.reloadFilter(this.options.dataFilter);\n        }\n    }\n\n    /**\n     * Sets a group template function, optionally re-renders all the dataSource' renderables.\n     * @param templateFunction\n     * @param reRender\n     */\n    setGroupTemplate(templateFunction = {}, reRender = false) {\n        this.options.groupTemplate = templateFunction;\n\n        if (reRender) {\n            this.clearDataStore();\n            this.reloadFilter(this.options.dataFilter);\n        }\n    }\n\n    /**\n     * Sets the dataStore to use. This will repopulate the view and remove any (if present) old items.\n     * We decorate it with debounce in order to (naively) avoid race conditions when setting the dataStore frequently after each other\n     * @param dataStore\n     */\n    setDataStore(dataStore) {\n        this.clearDataStore();\n        this.options.dataStore = dataStore;\n        this._bindDataSource(dataStore);\n    }\n\n    /**\n     * Sets the multiple dataStores to use. The \"multiple\" version of setDataStore(dataStore).\n     * @param {Array} dataStores\n     */\n    setDataStores(dataStores) {\n        let { dataStore, dataStores: previousDataStores } = this.options;\n        if (dataStore) {\n            this.clearDataStore();\n        } else if (previousDataStores) {\n            for (let index in previousDataStores) {\n                this.clearDataStore(index);\n            }\n        }\n\n        this.options.dataStores = dataStores;\n        this._bindMultipleDataSources(dataStores);\n\n    }\n\n\n    /**\n     * Gets the currently set dataStore.\n     * @returns {*}\n     */\n    getDataStore() {\n        return this.options.dataStore;\n    }\n\n    /**\n     * Gets the currently set dataStore.\n     * @returns {*}\n     */\n    getDataStores() {\n        return this.options.dataStores;\n    }\n\n    /**\n     * Reloads the dataFilter option of the DataBoundScrollView, and verifies whether the items in the dataStore are allowed by the new filter.\n     * It removes any currently visible items that aren't allowed anymore, and adds any non-visible ones that are allowed now.\n     * @param {Function} [newFilter] New filter function to verify item visibility with.\n     * @returns {Promise} Resolves when filter has been applied\n     */\n    reloadFilter(newFilter) {\n\n        if (newFilter) {\n            this.options.dataFilter = newFilter;\n        }\n\n        let filterPromises = [];\n        if (this.options.dataStores) {\n            for (let [dataStoreIndex, dataStore] of this.options.dataStores.entries() || []) {\n                for (let entry of dataStore) {\n                    filterPromises.push(this._reloadEntryFromFilter(entry, this.options.dataFilter, dataStoreIndex));\n                }\n\n            }\n            return Promise.all(filterPromises);\n        } else if (this.options.dataStore) {\n            for (let entry of this.options.dataStore || []) {\n                filterPromises.push(this._reloadEntryFromFilter(entry, this.options.dataFilter, 0));\n            }\n            return Promise.all(filterPromises);\n        }\n    }\n\n    /**\n     *\n     * @param entry\n     * @param newFilter\n     * @param dataStoreIndex\n     * @private\n     */\n    async _reloadEntryFromFilter(entry, newFilter, dataStoreIndex) {\n        let alreadyExists = this._internalDataSource[`${entry.id}${dataStoreIndex}`] !== undefined;\n        let result = await newFilter(entry);\n\n        this._handleNewFilterResult(result, alreadyExists, entry, dataStoreIndex);\n    }\n\n    /**\n     * Clears the dataSource by removing all entries\n     */\n    clearDataStore(index = 0) {\n        /* Determine if there are multiple or single dataStore */\n        let { dataStore, dataStores } = this.options;\n        if (dataStores && !dataStore) {\n            dataStore = dataStores[index];\n        }\n        for (let entry of dataStore || []) {\n            this._removeItem(entry, index);\n        }\n    }\n\n    /**\n     * Determines whether the last element showing is the actual last element\n     * @returns {boolean} True if the last element showing is the actual last element\n     */\n    isAtBottom() {\n        let lastVisibleItem = this.getLastVisibleItem();\n        return (lastVisibleItem && lastVisibleItem.renderNode === this._dataSource._.tail._value);\n    }\n\n    /**\n     * Returns the currently active group elements, or an empty object of none are present.\n     * @returns {Object}\n     */\n    getGroups() {\n        return this._internalGroups || {};\n    }\n\n    /**\n     *\n     * @private\n     */\n    _addHeader() {\n        if (this.options.headerTemplate) {\n            this._header = this.options.headerTemplate();\n            this._header.isHeader = true;\n            this._insertId(0, 0, this._header, null, { isHeader: true }, 0);\n            this.insert(0, this._header);\n        }\n    }\n\n    /**\n     * @private\n     * Patch because Hein forgot to auto pipe events when replacing\n     * @param indexOrId\n     * @param renderable\n     * @param noAnimation\n     */\n    _replace(indexOrId, renderable, noAnimation) {\n        super.replace(indexOrId, renderable, noAnimation);\n        // Auto pipe events\n        if (this.options.autoPipeEvents && renderable && renderable.pipe) {\n            renderable.pipe(this);\n            renderable.pipe(this._eventOutput);\n        }\n    }\n\n    /**\n     *\n     * @param shouldShow\n     * @param alreadyExists\n     * @param entry\n     * @param dataStoreIndex\n     * @private\n     */\n    _handleNewFilterResult(shouldShow, alreadyExists, entry, dataStoreIndex) {\n        if (shouldShow) {\n            /* This entry should be in the view, add it if it doesn't exist yet. */\n            if (!alreadyExists) {\n                this._addItem(entry, undefined, dataStoreIndex);\n            }\n        } else {\n            /* This entry should not be in the view, remove if present. */\n            if (alreadyExists) {\n                this._removeItem(entry, dataStoreIndex);\n            }\n        }\n    }\n\n    /**\n     *\n     * @param groupId\n     * @returns {*|number}\n     * @private\n     */\n    _findGroup(groupId) {\n        return this._internalGroups[groupId] || -1;\n    }\n\n    /**\n     *\n     * @param child\n     * @returns {string}\n     * @private\n     */\n    _getGroupByValue(child) {\n        let groupByValue = '';\n        if (typeof this.options.groupBy === 'function') {\n            groupByValue = this.options.groupBy(child);\n        } else if (typeof this.options.groupBy === 'string') {\n            groupByValue = this.options.groupBy;\n        }\n        return groupByValue;\n    }\n\n    /**\n     *\n     * @param groupByValue\n     * @param insertIndex\n     * @returns {*|{}}\n     * @private\n     */\n    _addGroupItem(groupByValue, insertIndex) {\n        let newSurface = this.options.groupTemplate(groupByValue);\n        newSurface.groupId = groupByValue;\n        this._internalGroups[groupByValue] = { position: insertIndex, itemsCount: 0 };\n        this.insert(insertIndex, newSurface);\n\n        return newSurface;\n    }\n\n    /**\n     *\n     * @param child\n     * @param previousSiblingID\n     * @param dataStoreIndex\n     * @returns {*|Number}\n     * @private\n     */\n    _getInsertIndex(child, previousSiblingID, dataStoreIndex) {\n        /* By default, add item at the end if the orderBy function does not specify otherwise. */\n        let firstIndex = this._getZeroIndex();\n        let insertIndex = this._dataSource.getLength();\n        let placedWithinGroup = false;\n\n        if (this._isGrouped) {\n            let groupIndex;\n            let groupId = this._getGroupByValue(child);\n            let groupData = this._findGroup(groupId);\n            if (groupData) groupIndex = groupData.position;\n            if (groupIndex != undefined && groupIndex !== -1) {\n                for (insertIndex = groupIndex + 1; insertIndex <= (groupIndex + groupData.itemsCount); insertIndex++) {\n                    if (this.options.orderBy) {\n                        let sequence = this._viewSequence.findByIndex(insertIndex);\n                        if (!sequence) {\n                            /* Internal error, this should never happen. Reduce the number of items in the group */\n                            console.log('Internal error in DataBoundScrollView. Inconsistent groupData');\n                            groupData.itemsCount = insertIndex - 1;\n                            break;\n                        }\n\n                        let { dataId, dataStoreIndex } = sequence._value;\n                        if (dataId && this.options.orderBy(child, this._internalDataSource[`${dataId}${dataStoreIndex}`].model)) {\n                            break;\n                        }\n                    } else {\n                        insertIndex += this._internalGroups[groupId].itemsCount;\n                        break;\n                    }\n                }\n                placedWithinGroup = true;\n            }\n        }\n\n        if (!placedWithinGroup) {\n            /* If we have an orderBy function, find the index we should be inserting at. */\n            if ((this._useCustomOrdering && this.options.orderBy && typeof this.options.orderBy === 'function') || this._isGrouped) {\n                let foundOrderedIndex = -1;\n                if (this._isGrouped) {\n\n                    for (let group of sortBy(this._internalGroups, 'position')) {\n                        /* Check the first and last item of every group (they're sorted) */\n                        for (let position of group.itemsCount > 1 ? [group.position + 1, group.position + group.itemsCount - 1] : [group.position + 1]) {\n\n                            let { dataId, dataStoreIndex } = this._viewSequence.findByIndex(position)._value;\n\n                            if (this.options.orderBy(child, this._internalDataSource[`${dataId}${dataStoreIndex}`].model)) {\n                                foundOrderedIndex = group.position;\n                                break;\n                            }\n                        }\n                        if (foundOrderedIndex > -1) {\n                            break;\n                        }\n                    }\n                } else {\n                    foundOrderedIndex = this._orderBy(child, this.options.orderBy);\n                }\n\n                if (foundOrderedIndex !== -1) {\n                    insertIndex = foundOrderedIndex;\n                }\n                /*\n                 There is no guarantee of order when grouping objects unless orderBy is explicitly defined\n                 */\n            } else if (previousSiblingID !== undefined && previousSiblingID != null) {\n                /* We don't have an orderBy method, but do have a previousSiblingID we can use to find the correct insertion index. */\n                let childData = this._findData(previousSiblingID) || {};\n\n                let siblingIndex = childData.position || -1;\n                if (siblingIndex !== -1) {\n                    insertIndex = siblingIndex + 1;\n                }\n            }\n        }\n\n        return insertIndex;\n    }\n\n    /**\n     *\n     * @param insertIndex\n     * @param groupByValue\n     * @returns {*}\n     * @private\n     */\n    _insertGroup(insertIndex, groupByValue) {\n        let groupIndex = this._findGroup(groupByValue);\n        if (groupByValue) {\n            let groupExists = groupIndex !== -1;\n            if (!groupExists) {\n                /* No group of this value exists yet, so we'll need to create one. */\n                this._updatePosition(insertIndex, 1);\n                let newSurface = this._addGroupItem(groupByValue, insertIndex);\n                this._insertId(`group_${groupByValue}`, insertIndex, newSurface, {}, { groupId: groupByValue }, 0);\n                /*insertIndex++;*/\n            }\n            return !groupExists;\n        }\n        return null;\n    }\n\n\n    /**\n     *\n     * @param child\n     * @param previousSiblingID\n     * @param dataStoreIndex\n     * @private\n     */\n    async _addItem(child, previousSiblingID = undefined, dataStoreIndex) {\n\n        if (this._findData(child.id, dataStoreIndex)) {\n            console.log('Child already exists ', child.id);\n            return;\n        }\n        /* Temporarily insert a promise to the internal datastore, so that other subsequent functions detect that we are about\n        *  to insert something. Because itemTemplates and dataFilter are (potentially) asynchronous, we must take care. */\n        let onInsertIndexKnown;\n        let insertIndexPromise = new Promise((resolve) => onInsertIndexKnown = resolve);\n        this._insertId(child.id, insertIndexPromise, null, child, {}, dataStoreIndex, null);\n\n        this._removePlaceholder();\n\n        let newSurface = await this.options.itemTemplate(child);\n\n        /* If the entry was removed while trying to add it, we should abort here */\n        if(this._removedEntries[`${child.id}${dataStoreIndex}`]){\n            onInsertIndexKnown(-1);\n            delete this._internalDataSource[`${child.id}${dataStoreIndex}`];\n        }\n\n        let insertIndex = this._getInsertIndex(child, previousSiblingID, dataStoreIndex);\n\n\n        /* If we're using groups, check if we need to insert a group item before this child. */\n        let groupByValue;\n        if (this._isGrouped) {\n            groupByValue = this._getGroupByValue(child);\n\n            if (this._insertGroup(insertIndex, groupByValue)) {\n                /* If a new group is inserted, then increase the insert index */\n                insertIndex++;\n            }\n            /* Increase the count of the number of items in the group */\n            this._internalGroups[groupByValue].itemsCount++;\n        }\n        newSurface.dataId = child.id;\n        onInsertIndexKnown(insertIndex);\n\n        newSurface.dataStoreIndex = dataStoreIndex;\n        this._subscribeToClicks(newSurface, child);\n        /* If we're scrolling as with a chat window, then scroll to last child if we're at the bottom */\n\n        if (this.options.chatScrolling && insertIndex === this._dataSource.getLength()) {\n            if (this.isAtBottom() || !this._allChildrenAdded) {\n                this._lastChild = child;\n            }\n        }\n        let insertSpec;\n        if (this.options.customInsertSpec) {\n            insertSpec = this.options.customInsertSpec(child);\n        }\n        this.insert(insertIndex, newSurface, insertSpec);\n\n\n        this._updatePosition(insertIndex);\n        this._insertId(child.id, insertIndex, newSurface, child, {}, dataStoreIndex, groupByValue);\n\n\n        if (this.options.ensureVisible != null || this.options.chatScrolling) {\n            let shouldEnsureVisibleUndefined = this.options.ensureVisible == null;\n            let shouldEnsureVisible = !shouldEnsureVisibleUndefined ? this.options.ensureVisible(child, newSurface, insertIndex) : false;\n            if (this.options.chatScrolling) {\n                if (child === this._lastChild && (shouldEnsureVisible || shouldEnsureVisibleUndefined)) {\n                    this.ensureVisible(newSurface);\n                }\n            } else if (shouldEnsureVisible) {\n                this.ensureVisible(newSurface);\n            }\n        }\n\n        super._addItem(child, previousSiblingID);\n    }\n\n    /**\n     *\n     * @param child\n     * @param dataStoreIndex\n     * @private\n     */\n    async _replaceItem(child, dataStoreIndex) {\n\n        let data = this._findData(child.id, dataStoreIndex);\n\n        if (!data) {\n            Utils.warn(`Child with ID ${child.id} is not present (anymore) in dataStore with index ${dataStoreIndex}`);\n            return false;\n        }\n\n        let { position, groupValue } = data;\n        let newGroupValue = null;\n\n        if (this._isGrouped) {\n            newGroupValue = this._getGroupByValue(child);\n        }\n\n        if (newGroupValue !== groupValue) {\n            this._removeItem(child, dataStoreIndex, groupValue);\n            this._addItem(child, undefined, dataStoreIndex);\n        } else {\n            let newSurface = await this.options.itemTemplate(child);\n            newSurface.dataId = child.id;\n            newSurface.dataStoreIndex = dataStoreIndex;\n            this._subscribeToClicks(newSurface, child);\n            this._insertId(child.id, position, newSurface, child, {}, dataStoreIndex);\n            this._replace(position, newSurface, true);\n        }\n\n    }\n\n    /**\n     *\n     * @param groupByValue\n     * @private\n     */\n    _removeGroupIfNecessary(groupByValue) {\n        /* Check if the group corresponding to the child is now empty */\n        let group = this._internalGroups[groupByValue];\n        if (group && group.itemsCount === 0) {\n            /* TODO: Maybe remove internalGroups[groupByValue]? (Or not?) */\n            let { position } = group;\n            this._updatePosition(position, -1);\n            this.remove(position);\n            delete this._internalGroups[groupByValue];\n            delete this._internalDataSource[groupByValue];\n        }\n\n    }\n\n    /**\n     *\n     * @param child\n     * @param dataStoreIndex\n     * @private\n     */\n    _removeItem(child, dataStoreIndex, groupValue = null) {\n        let internalChild = this._internalDataSource[`${child.id}${dataStoreIndex}`] || {};\n        let index = internalChild.position;\n        if (index > -1) {\n            this._updatePosition(index, -1);\n            this.remove(index);\n            delete this._internalDataSource[`${child.id}${dataStoreIndex}`];\n        }\n\n        /* If we're using groups, check if we need to remove the group that this child belonged to. */\n        if (this._isGrouped) {\n            let groupByValue = groupValue || this._getGroupByValue(child);\n            let group = this._internalGroups[groupByValue];\n            if (group) {\n                group.itemsCount--;\n            }\n\n\n            this._removeGroupIfNecessary(groupByValue, dataStoreIndex);\n\n        }\n\n        /* The amount of items in the dataSource is subtracted with a header if present, to get the total amount of actual items in the scrollView. */\n        let itemCount = this._dataSource.getLength() - (this._getZeroIndex());\n        if (itemCount === 0) {\n            this._addPlaceholder();\n        }\n        super._removeItem(child, dataStoreIndex);\n    }\n\n    /**\n     *\n     * @param child\n     * @param prevChildId\n     * @param dataStoreIndex\n     * @private\n     */\n    _moveItem(child, prevChildId = null, dataStoreIndex) {\n        let oldData = this._findData(child.id, dataStoreIndex);\n        let oldIndex = oldData && oldData.position;\n        let previousSiblingIndex = this._getNextVisibleIndex(prevChildId, dataStoreIndex);\n        if (oldIndex !== undefined && oldIndex !== previousSiblingIndex) {\n            this.move(oldIndex, previousSiblingIndex);\n            this._internalDataSource[`${previousSiblingIndex}${dataStoreIndex}`] = oldData;\n            this._internalDataSource[`${previousSiblingIndex}${dataStoreIndex}`].position = oldIndex;\n        }\n    }\n\n    /**\n     *\n     * @private\n     */\n    _removeHeader() {\n        if (this._header) {\n            this.remove(0);\n            delete this._internalDataSource[0];\n            this._header = null;\n        }\n    }\n\n    /**\n     *\n     * @private\n     */\n    _addPlaceholder() {\n        if (this.options.placeholderTemplate && !this._placeholder) {\n            let insertIndex = this._getZeroIndex();\n            this._placeholder = this.options.placeholderTemplate();\n            this._placeholder.isPlaceholder = true;\n            this.insert(insertIndex, this._placeholder);\n        }\n    }\n\n    /**\n     *\n     * @returns {number}\n     * @private\n     */\n    _getZeroIndex() {\n        return this._header ? 1 : 0;\n    }\n\n    /**\n     *\n     * @private\n     */\n    _removePlaceholder() {\n        if (this._placeholder) {\n            if (this._placeholder)\n                this.remove(this._getZeroIndex());\n            this._placeholder = null;\n        }\n    }\n\n    /**\n     *\n     * @param dataStores\n     * @private\n     */\n    _bindMultipleDataSources(dataStores) {\n        for (let [index, dataStore] of dataStores.entries()) {\n            this._bindDataSource(dataStore, index);\n        }\n    }\n\n    /**\n     *\n     * @param dataStore\n     * @param index\n     * @private\n     */\n    _bindDataSource(dataStore, index = 0) {\n\n        if (this.options.chatScrolling) {\n            //TODO: This won't work with multiple dataStores\n            dataStore.on('ready', () => this._allChildrenAdded = true);\n            this._initialLoad = true;\n            dataStore.on('ready', () => this._initialLoad = false);\n        }\n        this._setupDataStoreListeners(dataStore, index, true);\n    }\n\n    /**\n     *\n     * @param dataStoreIndex\n     * @param child\n     * @param previousSiblingID\n     * @private\n     */\n    _onChildAdded(dataStoreIndex, child, previousSiblingID) {\n        if(!child){\n            console.log('Warning: Child added received with undefined child, in DataBoundScrollView');\n        }\n        /* Mark the entry as undeleted */\n        this._removedEntries[`${child.id}${dataStoreIndex}`] = false;\n        this._throttler.add(async () => {\n            if (this.options.dataFilter &&\n                (typeof this.options.dataFilter === 'function')) {\n\n                let result = await this.options.dataFilter(child);\n\n                if (result) {\n                    await this._addItem(child, previousSiblingID, dataStoreIndex);\n                }\n            } else {\n                /* There is no dataFilter method, so we can add this child. */\n                await this._addItem(child, previousSiblingID, dataStoreIndex);\n            }\n        });\n    }\n\n    /**\n     *\n     * @param dataStoreIndex\n     * @param child\n     * @param previousSiblingID\n     * @private\n     */\n    //TODO: This won't reorder children, which is a problem\n    async _onChildChanged(dataStoreIndex, child, previousSiblingID) {\n\n        this._throttler.add(async () => {\n            let changedItemIndex = await this._findIndexFromID(dataStoreIndex, child.id);\n\n            if (this._dataSource && changedItemIndex < this._dataSource.getLength()) {\n\n                let result = this.options.dataFilter ? await this.options.dataFilter(child) : true;\n                changedItemIndex = await this._findIndexFromID(dataStoreIndex, child.id);\n\n                if (this.options.dataFilter &&\n                    typeof this.options.dataFilter === 'function' && !result) {\n                    this._removeItem(child, dataStoreIndex);\n                } else {\n                    /* If the entry was removed in the meantime, return */\n                    if(this._removedEntries[`${child.id}${dataStoreIndex}`]){\n                        return;\n                    }\n\n                    if (changedItemIndex === -1) {\n                        await this._addItem(child, previousSiblingID, dataStoreIndex);\n                    } else {\n                        await this._replaceItem(child, dataStoreIndex);\n                    }\n                }\n            }\n        });\n    }\n\n    /**\n     *\n     * @param {Number} dataStoreIndex The index of the data store that is being modified\n     * @param child\n     * @param previousSiblingID\n     * @private\n     */\n    _onChildMoved(dataStoreIndex, child, previousSiblingID) {\n        let current = this._findData(child.id, dataStoreIndex);\n        this._throttler.add(() => {\n            this._moveItem(current, previousSiblingID, dataStoreIndex);\n        });\n    }\n\n\n    /**\n     *\n     * @param dataStoreIndex\n     * @param child\n     * @private\n     */\n    _onChildRemoved(dataStoreIndex, child) {\n\n        /* Mark the entry as removed */\n        this._removedEntries[`${child.id}${dataStoreIndex}`] = true;\n        this._throttler.add(() => {\n            this._removeItem(child, dataStoreIndex);\n        });\n    }\n    ;\n\n\n    /**\n     *\n     * @param id\n     * @param dataStoreIndex\n     * @returns {*}\n     * @private\n     */\n    _getNextVisibleIndex(id, dataStoreIndex) {\n        let viewIndex = -1;\n        let viewData = this._findData(dataStoreIndex, id);\n\n        if (viewData) {\n            viewIndex = viewData.position;\n        }\n\n        if (viewIndex === -1) {\n\n            let modelIndex = findIndex(this.options.dataStore, function (model) {\n                return model.id === id;\n            });\n\n            if (modelIndex === 0 || modelIndex === -1) {\n                return this._isDescending ? this._dataSource ? this._dataSource.getLength() - 1 : 0 : 0;\n            } else {\n                let nextModel = this.options.dataStore[this._isDescending ? modelIndex + 1 : modelIndex - 1];\n                let nextIndex = this._findData(nextModel.id, nextModel.dataStoreIndex).position;\n                if (nextIndex > -1) {\n                    return this._isDescending ? nextIndex === 0 ? 0 : nextIndex - 1 :\n                        this._dataSource.getLength() === nextIndex + 1 ? nextIndex : nextIndex + 1;\n                } else {\n                    return this._getNextVisibleIndex(nextModel.id, dataStoreIndex);\n                }\n            }\n        } else {\n            return this._isDescending ? viewIndex === 0 ? 0 : viewIndex - 1 :\n                this._dataSource.getLength() === viewIndex + 1 ? viewIndex : viewIndex + 1;\n        }\n    }\n\n    /**\n     *\n     * @param child\n     * @param orderByFunction\n     * @returns {number}\n     * @private\n     */\n    _orderBy(child, orderByFunction) {\n        let item = this._dataSource._.head;\n        let index = 0;\n\n        while (item) {\n            let { dataId, dataStoreIndex } = item._value;\n            if (item._value.dataId && this._internalDataSource[`${dataId}${dataStoreIndex}`] && orderByFunction(child, this._internalDataSource[`${dataId}${dataStoreIndex}`].model)) {\n                return index;\n            }\n\n            index++;\n            item = item._next;\n        }\n        return -1;\n    }\n\n\n    /**\n     *\n     * @param position\n     * @param change\n     * @private\n     */\n    _updatePosition(position, change = 1) {\n        if (position === undefined || position === this._dataSource.getLength() - 1) return;\n        for (let element of Object.keys(this._internalDataSource)) {\n            let dataObject = this._internalDataSource[element];\n            if (dataObject.position >= position) {\n                dataObject.position += change;\n            }\n        }\n        if (this._isGrouped) {\n            this._updateGroupPosition(position, change);\n        }\n    }\n\n    /**\n     *\n     * @param position\n     * @param change\n     * @private\n     */\n    _updateGroupPosition(position, change = 1) {\n        for (let element of Object.keys(this._internalGroups)) {\n            if (this._internalGroups[element].position >= position) {\n                /* Update the position of groups coming after */\n                this._internalGroups[element].position += change;\n            }\n        }\n    }\n\n    /**\n     *\n     * @param id\n     * @param dataStoreIndex\n     * @returns {*|undefined}\n     * @private\n     */\n    _findData(id, dataStoreIndex) {\n        let data = this._internalDataSource[`${id}${dataStoreIndex}`] || undefined;\n        return data;\n    }\n\n    /**\n     *\n     * @param id\n     * @param position\n     * @param renderable\n     * @param model\n     * @param options\n     * @param dataStoreIndex\n     * @private\n     */\n    _insertId(id = null, position, renderable = {}, model = {}, options = {}, dataStoreIndex, groupValue = null) {\n        if (id === undefined || id === null) return;\n\n        this._internalDataSource[`${id}${dataStoreIndex}`] = { position, renderable, model, groupValue };\n        for (let element of Object.keys(options)) {\n            this._internalDataSource[`${id}${dataStoreIndex}`][element] = options[element];\n        }\n    }\n\n    /**\n     *\n     * @param surface\n     * @param model\n     * @private\n     */\n    _subscribeToClicks(surface, model) {\n        surface.on('click', function () {\n            this._eventOutput.emit('child_click', { renderNode: surface, dataObject: model });\n        }.bind(this));\n    }\n\n    /**\n     * Based on the guess that layout is ListLayout, calculates the vertical size\n     * @returns {number}\n     */\n    getSize() {\n        let item = this._dataSource._.head;\n        let { layoutOptions } = this.options;\n        if (this.options.layout !== ListLayout || (this.options.layoutOptions.direction && this.options.layoutOptions.direction !== 1)) {\n            console.log('\\'Trying to calculate the size of a DataBoundScrollView, which can\\'t be done in the current configuration');\n            return [undefined, undefined];\n        }\n        let height = layoutOptions && layoutOptions.margins ? layoutOptions.margins[0] + layoutOptions.margins[2] : 0;\n\n        if (item) {\n            do {\n                let renderable = item._value;\n                let itemSize;\n                if (renderable.getSize && (itemSize = renderable.getSize())) {\n                    height += itemSize[1];\n                } else {\n                    console.log('Trying to calculate the size of a DataBoundScrollView, but all elements cannot be calculated');\n                }\n                if (layoutOptions && layoutOptions.spacing) {\n                    height += layoutOptions.spacing;\n                }\n\n            } while (item = item._next);\n        }\n\n        return [undefined, height];\n    }\n\n\n    /**\n     * Either add or remove the prioritisedArray events to our event handlers.\n     * The event handlers are cached, so they can be removed later on if needed.\n     * @param dataStore\n     * @param index\n     * @param {Boolean} shouldActivate\n     * @private\n     */\n    _setupDataStoreListeners(dataStore, index, shouldActivate) {\n        let methodName = shouldActivate ? 'on' : 'off';\n        let method = dataStore[methodName].bind(dataStore);\n\n        /* We have to cache the event handler functions, otherwise we can't remove them later on if needed */\n        if(shouldActivate){\n            /* To support multiple dataStores with multiple indices */\n            if(!this._eventCallbacks[index]){\n                this._eventCallbacks[index] = {};\n            }\n            /* On the initial load, await all data to arrive and then sort it */\n            let initialDataIsSorted = !this.options.orderBy;\n            if(!initialDataIsSorted){\n                dataStore.once('value').then((data) => {\n                    let prevSiblingID;\n                    let sortedData = data.sort ? data.sort((first, second) => this.options.orderBy(first, second) ? -1 : 1) : data;\n                    for(let item of sortedData){\n                        this._onChildAdded(index, item, prevSiblingID);\n                        prevSiblingID = item.id;\n                    }\n                    initialDataIsSorted = true;\n                });\n            }\n            this._eventCallbacks[index]['child_added'] = (child, prevID) => initialDataIsSorted && this._onChildAdded(index, child, prevID);\n            this._eventCallbacks[index]['child_changed'] = this._onChildChanged.bind(this, index);\n            this._eventCallbacks[index]['child_removed'] = this._onChildRemoved.bind(this, index);\n            this._eventCallbacks[index]['child_moved'] = this._onChildMoved.bind(this, 0);\n        }\n\n        method('child_added',  this._eventCallbacks[index]['child_added']);\n        method('child_changed', this._eventCallbacks[index]['child_changed']);\n        method('child_removed',  this._eventCallbacks[index]['child_removed']);\n\n        /* Only listen for child_moved if there is one single dataStore.\n         * TODO: See if we want to change this behaviour to support moved children within the dataStore */\n        if (!this.options.dataStores) {\n            method('child_moved',  this._eventCallbacks[index]['child_moved']);\n        }\n    }\n\n    _findIndexFromID(dataStoreIndex, id) {\n        let internalDataSourceData = this._findData(id, dataStoreIndex) || { position: -1 };\n        return internalDataSourceData.position;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/components/DataBoundScrollView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "DataBoundScrollView",
    "memberof": "src/components/DataBoundScrollView.js",
    "static": true,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/components/DataBoundScrollView.js",
    "importStyle": "{DataBoundScrollView}",
    "description": "A component for displaying multiple elements based on a two-way connection with a PrioritisedArray,\nwith support for grouping, sorting and header.",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "src/components/ReflowingScrollView.js~ReflowingScrollView"
    ]
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#constructor",
    "access": "public",
    "description": "Be sure to specify either a getSize function in the class of the itemTemplate, or to specify the size in the\nlayoutOptions.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The options passed inherit from previous classes. Avoid using the dataSource option since\nthe DataBoundScrollView creates its own dataSource from options.dataStore."
      },
      {
        "nullable": null,
        "types": [
          "PrioritisedArray"
        ],
        "spread": false,
        "optional": true,
        "name": "options.dataStore",
        "description": "The data that should be read to create entries."
      },
      {
        "nullable": null,
        "types": [
          "PrioritisedArray"
        ],
        "spread": false,
        "optional": true,
        "name": "options.dataStores",
        "description": "Instead of passing one dataStore, this option can be used to pass multiple"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.itemTemplate",
        "description": "A function that returns a renderable representing each data item."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.placeholderTemplate",
        "description": "A function that returns a renderable to display when there are\nno items present."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.headerTemplate",
        "description": "A function that returns a renderable to display as a header."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.orderBy",
        "description": "An ordering function that takes two data models (model1, model2).\nIf it returns true, then model1 should go before model2."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.groupBy",
        "description": "A function that takes a model and returns a value to group by. If set, then\nthe groupTemplate option also needs to be set."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.groupTemplate",
        "description": "A function that takes as a single argument, the groupBy value, and returns\na renderable to insert before a group belonging to that value."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.dataFilter",
        "description": "Filter what data is relevant to the view. Should be a function taking as\nan argument a model and from there returning a boolean."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.stickHeaders",
        "description": "If set to true, then the group headers will stick to the top when scrolling.\nBeware that this is slightly buggy as of now and might require some fine tuning to provide a better UX."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.customInsertSpec",
        "description": "A function that takes as a single argument a model and returns a spec\nthat is used when inserting a new item."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.chatScrolling",
        "description": "If set to true, the scroll will remain at the bottom if at bottom already\nwhen new messages are added.\n\nIf this function returns true, then model1 will be placed before model2."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "_internalDataSource",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_internalDataSource",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "_internalGroups",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_internalGroups",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "_eventCallbacks",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_eventCallbacks",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "_removedEntries",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_removedEntries",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "_isGrouped",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_isGrouped",
    "access": "private",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "_isDescending",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_isDescending",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "_throttler",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_throttler",
    "access": "private",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_useCustomOrdering",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_useCustomOrdering",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "getRenderableFromID",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#getRenderableFromID",
    "access": "public",
    "description": "Gets a renderable from a specific ID",
    "lineNumber": 138,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The id of data"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "dataStoreIndex",
        "description": "the index of the dataStore that is used, if several of them are specified"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "setItemTemplate",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#setItemTemplate",
    "access": "public",
    "description": "Set a template function, optionally re-renders all the dataSource' renderables",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "templateFunction",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "setGroupTemplate",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#setGroupTemplate",
    "access": "public",
    "description": "Sets a group template function, optionally re-renders all the dataSource' renderables.",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "templateFunction",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reRender",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "setDataStore",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#setDataStore",
    "access": "public",
    "description": "Sets the dataStore to use. This will repopulate the view and remove any (if present) old items.\nWe decorate it with debounce in order to (naively) avoid race conditions when setting the dataStore frequently after each other",
    "lineNumber": 177,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStore",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "setDataStores",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#setDataStores",
    "access": "public",
    "description": "Sets the multiple dataStores to use. The \"multiple\" version of setDataStore(dataStore).",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStores",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "getDataStore",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#getDataStore",
    "access": "public",
    "description": "Gets the currently set dataStore.",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "getDataStores",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#getDataStores",
    "access": "public",
    "description": "Gets the currently set dataStore.",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "reloadFilter",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#reloadFilter",
    "access": "public",
    "description": "Reloads the dataFilter option of the DataBoundScrollView, and verifies whether the items in the dataStore are allowed by the new filter.\nIt removes any currently visible items that aren't allowed anymore, and adds any non-visible ones that are allowed now.",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when filter has been applied"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "newFilter",
        "description": "New filter function to verify item visibility with."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when filter has been applied"
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "_reloadEntryFromFilter",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_reloadEntryFromFilter",
    "access": "private",
    "description": "",
    "lineNumber": 255,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newFilter",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "clearDataStore",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#clearDataStore",
    "access": "public",
    "description": "Clears the dataSource by removing all entries",
    "lineNumber": 265,
    "params": [
      {
        "name": "index",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "isAtBottom",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#isAtBottom",
    "access": "public",
    "description": "Determines whether the last element showing is the actual last element",
    "lineNumber": 280,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the last element showing is the actual last element"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the last element showing is the actual last element"
    },
    "params": []
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getGroups",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#getGroups",
    "access": "public",
    "description": "Returns the currently active group elements, or an empty object of none are present.",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "_addHeader",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_addHeader",
    "access": "private",
    "description": "",
    "lineNumber": 297,
    "params": [],
    "return": null
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_header",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_header",
    "access": "private",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "_replace",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_replace",
    "access": "private",
    "description": "",
    "lineNumber": 313,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "indexOrId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "noAnimation",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "_handleNewFilterResult",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_handleNewFilterResult",
    "access": "private",
    "description": "",
    "lineNumber": 330,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldShow",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alreadyExists",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "_findGroup",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_findGroup",
    "access": "private",
    "description": "",
    "lineNumber": 350,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "groupId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "_getGroupByValue",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_getGroupByValue",
    "access": "private",
    "description": "",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "_addGroupItem",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_addGroupItem",
    "access": "private",
    "description": "",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|{}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "groupByValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "insertIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "{}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_getInsertIndex",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_getInsertIndex",
    "access": "private",
    "description": "",
    "lineNumber": 394,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|Number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingID",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "Number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "_insertGroup",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_insertGroup",
    "access": "private",
    "description": "",
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "insertIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "groupByValue",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "_addItem",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_addItem",
    "access": "private",
    "description": "",
    "lineNumber": 505,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingID",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "_lastChild",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_lastChild",
    "access": "private",
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "_replaceItem",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_replaceItem",
    "access": "private",
    "description": "",
    "lineNumber": 586,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "_removeGroupIfNecessary",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_removeGroupIfNecessary",
    "access": "private",
    "description": "",
    "lineNumber": 621,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "groupByValue",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "_removeItem",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_removeItem",
    "access": "private",
    "description": "",
    "lineNumber": 641,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "_moveItem",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_moveItem",
    "access": "private",
    "description": "",
    "lineNumber": 678,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "prevChildId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "_removeHeader",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_removeHeader",
    "access": "private",
    "description": "",
    "lineNumber": 693,
    "params": [],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "_addPlaceholder",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_addPlaceholder",
    "access": "private",
    "description": "",
    "lineNumber": 705,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "_placeholder",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_placeholder",
    "access": "private",
    "description": null,
    "lineNumber": 708,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "_getZeroIndex",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_getZeroIndex",
    "access": "private",
    "description": "",
    "lineNumber": 719,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "_removePlaceholder",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_removePlaceholder",
    "access": "private",
    "description": "",
    "lineNumber": 727,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_bindMultipleDataSources",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_bindMultipleDataSources",
    "access": "private",
    "description": "",
    "lineNumber": 740,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStores",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "_bindDataSource",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_bindDataSource",
    "access": "private",
    "description": "",
    "lineNumber": 752,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStore",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "_initialLoad",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_initialLoad",
    "access": "private",
    "description": null,
    "lineNumber": 757,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "_onChildAdded",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_onChildAdded",
    "access": "private",
    "description": "",
    "lineNumber": 770,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingID",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "_onChildChanged",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_onChildChanged",
    "access": "private",
    "description": "",
    "lineNumber": 800,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingID",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "_onChildMoved",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_onChildMoved",
    "access": "private",
    "description": "",
    "lineNumber": 836,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": "The index of the data store that is being modified"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingID",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_onChildRemoved",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_onChildRemoved",
    "access": "private",
    "description": "",
    "lineNumber": 850,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "_getNextVisibleIndex",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_getNextVisibleIndex",
    "access": "private",
    "description": "",
    "lineNumber": 868,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_orderBy",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_orderBy",
    "access": "private",
    "description": "",
    "lineNumber": 907,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "orderByFunction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "_updatePosition",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_updatePosition",
    "access": "private",
    "description": "",
    "lineNumber": 930,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "change",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_updateGroupPosition",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_updateGroupPosition",
    "access": "private",
    "description": "",
    "lineNumber": 949,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "change",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_findData",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_findData",
    "access": "private",
    "description": "",
    "lineNumber": 965,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "_insertId",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_insertId",
    "access": "private",
    "description": "",
    "lineNumber": 980,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStoreIndex",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_subscribeToClicks",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_subscribeToClicks",
    "access": "private",
    "description": "",
    "lineNumber": 995,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "surface",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "getSize",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#getSize",
    "access": "public",
    "description": "Based on the guess that layout is ListLayout, calculates the vertical size",
    "lineNumber": 1005,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_setupDataStoreListeners",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_setupDataStoreListeners",
    "access": "private",
    "description": "Either add or remove the prioritisedArray events to our event handlers.\nThe event handlers are cached, so they can be removed later on if needed.",
    "lineNumber": 1042,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dataStore",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldActivate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_findIndexFromID",
    "memberof": "src/components/DataBoundScrollView.js~DataBoundScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/DataBoundScrollView.js~DataBoundScrollView#_findIndexFromID",
    "access": "private",
    "description": null,
    "lineNumber": 1082,
    "undocument": true,
    "params": [
      {
        "name": "dataStoreIndex",
        "types": [
          "*"
        ]
      },
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/components/Dialog.js",
    "content": "/**\n * Created by lundfall on 19/01/2017.\n */\n\nimport {View}               from 'arva-js/core/View.js';\n\n/**\n * Abstract class to recognize a dialog in the controller\n */\nexport class Dialog extends View {\n    /**\n     *\n     * @param [goBackInHistory] If set to true, goes back in history\n     */\n    close(goBackInHistory = false) {\n        this._eventOutput.emit('closeDialog', goBackInHistory);\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/components/Dialog.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "class",
    "name": "Dialog",
    "memberof": "src/components/Dialog.js",
    "static": true,
    "longname": "src/components/Dialog.js~Dialog",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/components/Dialog.js",
    "importStyle": "{Dialog}",
    "description": "Abstract class to recognize a dialog in the controller",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "arva-js/core/View.js~View"
    ]
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "close",
    "memberof": "src/components/Dialog.js~Dialog",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/Dialog.js~Dialog#close",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "goBackInHistory",
        "description": "If set to true, goes back in history"
      }
    ],
    "return": null
  },
  {
    "__docId__": 113,
    "kind": "file",
    "name": "src/components/ReflowingScrollView.js",
    "content": "/**\n @author: Karl Lundfall (lundfall)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n */\n\nimport FlexScrollView   from 'famous-flex/FlexScrollView.js';\nimport {ObjectHelper}   from '../utils/ObjectHelper.js';\n\n/**\n * Class extended by the dataBoundScrollView and for wrapping up a View.\n * It automatically listens for reflows and handles them accordingly\n */\nexport class ReflowingScrollView extends FlexScrollView {\n\n    /**\n     * Constructor does not add any new options.\n     *\n     * @param options\n     */\n    constructor(options = {}) {\n        super(options);\n        this._eventInput.on('recursiveReflow', this._reflowWhenPossible.bind(this))\n    }\n\n    _reflowWhenPossible() {\n        if ((!this.isScrolling() && !this._nodes._reevalTrueSize) || !this._didReflowOnce) {\n            this.reLayout();\n            this._didReflowOnce = true;\n        }\n    }\n\n    _addItem() {\n        /* Views that use this ReflowingScrollView should manually subscribe to this event,\n         * since it does not automatically bubble to Arva's View.js.\n         */\n        this._eventOutput.emit('resize');\n    }\n\n    _removeItem() {\n        /* Views that use this ReflowingScrollView should manually subscribe to this event,\n         * since it does not automatically bubble to Arva's View.js.\n         */\n        this._eventOutput.emit('resize');\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/components/ReflowingScrollView.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 114,
    "kind": "class",
    "name": "ReflowingScrollView",
    "memberof": "src/components/ReflowingScrollView.js",
    "static": true,
    "longname": "src/components/ReflowingScrollView.js~ReflowingScrollView",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/components/ReflowingScrollView.js",
    "importStyle": "{ReflowingScrollView}",
    "description": "Class extended by the dataBoundScrollView and for wrapping up a View.\nIt automatically listens for reflows and handles them accordingly",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "famous-flex/FlexScrollView.js~FlexScrollView"
    ]
  },
  {
    "__docId__": 115,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/components/ReflowingScrollView.js~ReflowingScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ReflowingScrollView.js~ReflowingScrollView#constructor",
    "access": "public",
    "description": "Constructor does not add any new options.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_reflowWhenPossible",
    "memberof": "src/components/ReflowingScrollView.js~ReflowingScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ReflowingScrollView.js~ReflowingScrollView#_reflowWhenPossible",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "_didReflowOnce",
    "memberof": "src/components/ReflowingScrollView.js~ReflowingScrollView",
    "static": false,
    "longname": "src/components/ReflowingScrollView.js~ReflowingScrollView#_didReflowOnce",
    "access": "private",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "_addItem",
    "memberof": "src/components/ReflowingScrollView.js~ReflowingScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ReflowingScrollView.js~ReflowingScrollView#_addItem",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 119,
    "kind": "method",
    "name": "_removeItem",
    "memberof": "src/components/ReflowingScrollView.js~ReflowingScrollView",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/components/ReflowingScrollView.js~ReflowingScrollView#_removeItem",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "file",
    "name": "src/core/App.js",
    "content": "/**\n\n\n  @author: Hans van den Akker (mysim1)\n  @license NPOSL-3.0\n  @copyright Bizboard, 2015\n\n */\n\nimport FastClick                from 'fastclick';\nimport Engine                   from 'famous/core/Engine.js';\nimport Context                  from 'famous/core/Context.js';\nimport AnimationController      from 'famous-flex/AnimationController.js';\n\nimport {provide}                from '../utils/di/Decorators.js';\nimport {DialogManager}          from '../utils/DialogManager.js';\nimport {ArvaRouter}             from '../routers/ArvaRouter.js';\nimport {Injection}              from '../utils/Injection.js';\nimport {Router}                 from './Router.js';\n\nimport '../utils/hotfixes/Polyfills.js';\nimport '../utils/hotfixes/FamousKeyboardOffset.js';\nimport '../utils/hotfixes/DisableTextSelection.js';\n\n/**\n * The App class exposes the Router which can be used to configure the Application's routing settings.\n * You can specify which Route should be default by calling `router.setDefault(controller, method);`\n */\nexport class App {\n\n    /**\n     * Have the router check check which route is active and fire the Controller\n     * @param {Router} router The router instance to use in the app.\n     * @param {Context} context The data context instance to use in the app.\n     * @returns {App} App instance\n     */\n    constructor() {\n        /* Options are defined as a static property on the class that extends this App */\n        let options = this.constructor.options || {};\n        let controllers = this.constructor.controllers || [];\n        let defaultRouter = this.constructor.router || ArvaRouter;\n        let defaultDataSource = this.constructor.defaultDataSource;\n\n        if(!this.constructor.disableFastClick){\n            /* Allow user taps to emit immediately as click events,\n             * instead of having the default 300ms delay. */\n            FastClick(document.body);\n        }\n\n        /* Add default class providers to DI engine */\n        Injection.addProviders(defaultRouter, FamousContextSingleton, NewAnimationController);\n\n        if(defaultDataSource){\n            Injection.addProviders(defaultDataSource);\n        }\n        \n        /* Request instances of a Router and a Famous Context. */\n        let [router, context] = Injection.getAll(Router, Context);\n\n        /**\n         * The dialog manager used to show and hide dialogs\n         */\n        this.dialogManager = Injection.get(DialogManager);\n\n        /**\n         * The router of the application\n         */\n        this.router = router;\n        /**\n         * The animationController that controls the animations between screens\n         */\n        this.context = context;\n\n        if(this.constructor.loaded && typeof this.constructor.loaded === 'function') {\n            this.constructor.loaded();\n        }\n\n        /* Load controllers */\n        this.controllers = Injection.getAll(...controllers);\n\n        this.router.run();\n\n        /* Hide splash screen */\n        if(navigator && navigator.splashscreen && !options.keepSplashScreen) { navigator.splashscreen.hide(); }\n\n        let {done} = this.constructor;\n        if(done && typeof done === 'function') {\n            try { done.call(this.constructor); } catch(error) { console.log('Caught exception in App.done():', error); }\n        }\n    }\n\n    /**\n     * Triggers a creation of the app, by using an Injection.get\n     */\n    static start(){\n        /* Instantiate this App, which also instantiates the other components. */\n        this.app = Injection.get(this);\n    }\n}\n\n@provide(Context)\nclass FamousContextSingleton {\n    static famousContext = null;\n\n    constructor() {\n        return FamousContextSingleton.famousContext || (FamousContextSingleton.famousContext = Engine.createContext(null));\n    }\n}\n\n@provide(AnimationController)\nclass NewAnimationController {\n    constructor() {\n        let context = new FamousContextSingleton();\n        var controller = new AnimationController();\n\n        context.add(controller);\n        return controller;\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/core/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 121,
    "kind": "class",
    "name": "App",
    "memberof": "src/core/App.js",
    "static": true,
    "longname": "src/core/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/core/App.js",
    "importStyle": "{App}",
    "description": "The App class exposes the Router which can be used to configure the Application's routing settings.\nYou can specify which Route should be default by calling `router.setDefault(controller, method);`",
    "lineNumber": 29,
    "interface": false
  },
  {
    "__docId__": 122,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/App.js~App#constructor",
    "access": "public",
    "description": "Have the router check check which route is active and fire the Controller",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{App} App instance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Router"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "The router instance to use in the app."
      },
      {
        "nullable": null,
        "types": [
          "Context"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "The data context instance to use in the app."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "App"
      ],
      "spread": false,
      "description": "App instance"
    }
  },
  {
    "__docId__": 123,
    "kind": "member",
    "name": "dialogManager",
    "memberof": "src/core/App.js~App",
    "static": false,
    "longname": "src/core/App.js~App#dialogManager",
    "access": "public",
    "description": "The dialog manager used to show and hide dialogs",
    "lineNumber": 63,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 124,
    "kind": "member",
    "name": "router",
    "memberof": "src/core/App.js~App",
    "static": false,
    "longname": "src/core/App.js~App#router",
    "access": "public",
    "description": "The router of the application",
    "lineNumber": 68,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "context",
    "memberof": "src/core/App.js~App",
    "static": false,
    "longname": "src/core/App.js~App#context",
    "access": "public",
    "description": "The animationController that controls the animations between screens",
    "lineNumber": 72,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 126,
    "kind": "member",
    "name": "controllers",
    "memberof": "src/core/App.js~App",
    "static": false,
    "longname": "src/core/App.js~App#controllers",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "start",
    "memberof": "src/core/App.js~App",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/App.js~App.start",
    "access": "public",
    "description": "Triggers a creation of the app, by using an Injection.get",
    "lineNumber": 95,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "member",
    "name": "app",
    "memberof": "src/core/App.js~App",
    "static": true,
    "longname": "src/core/App.js~App.app",
    "access": "public",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "class",
    "name": "FamousContextSingleton",
    "memberof": "src/core/App.js",
    "static": true,
    "longname": "src/core/App.js~FamousContextSingleton",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/core/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "decorators": [
      {
        "name": "provide",
        "arguments": "(Context)"
      }
    ],
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "famousContext",
    "memberof": "src/core/App.js~FamousContextSingleton",
    "static": true,
    "longname": "src/core/App.js~FamousContextSingleton.famousContext",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/App.js~FamousContextSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/App.js~FamousContextSingleton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "NewAnimationController",
    "memberof": "src/core/App.js",
    "static": true,
    "longname": "src/core/App.js~NewAnimationController",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/core/App.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "decorators": [
      {
        "name": "provide",
        "arguments": "(AnimationController)"
      }
    ],
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/App.js~NewAnimationController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/App.js~NewAnimationController#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/core/Controller.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport EventEmitter             from 'eventemitter3';\nimport AnimationController      from 'famous-flex/AnimationController.js';\n\nimport {Dialog}                 from '../components/Dialog.js';\nimport {DialogManager}          from '../utils/DialogManager.js';\nimport {inject}                 from '../utils/di/Decorators.js';\nimport {ObjectHelper}           from '../utils/ObjectHelper.js';\nimport {Router}                 from './Router.js';\n\n\n/**\n * The Controller class provides the highest level of control regarding the application features. Every controller method\n * corresponds to a subroute (Usually defaulting to Index), and every controller maps to a parent-route (usually called Home)\n * The controller methods should return views or dialogs. These will be displayed by the framework when the route is entered.\n */\n@inject(Router, AnimationController, DialogManager)\nexport class Controller extends EventEmitter {\n\n    /**\n     * Saves the router and context to this.router and this.context, respectively.\n     * @param {Router} router Injected globally used router\n     * @param {AnimationController} context Injected animationController used by the app\n     * @param {DialogManager} dialogManager The dialog manager that shows and hides dialogs\n     */\n    constructor(router, context, dialogManager) {\n        super();\n\n        /**\n         * The router used globally in the app\n         * @type {Router}\n         */\n        this.router = router;\n        /**\n         * The AnimationController used globally in the app to change screens\n         * @type {AnimationController}\n         */\n        this.context = context;\n        /**\n         * The dialogmanager used to show and hide dialogs. If a controller returns a Dialog, this will be used\n         */\n        this.dialogManager = dialogManager;\n\n        /* The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.\n         * This allows Arva code to be minified and mangled without losing automated route creation.\n         * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name.*/\n        let controllerName = this.constructor._name || Object.getPrototypeOf(this).constructor.name;\n\n\n        /* Add the controller route to the router. */\n        let routeName = controllerName.replace('Controller', '');\n        routeName += '/:method';\n\n        /* handle router url changes and execute the appropiate controller method. */\n        this.router.add(routeName, {enter: this.onRouteCalled.bind(this), leave: this.onLeave.bind(this)}, this);\n    }\n\n    /**\n     * Called to notify the Controller that the route is changed\n     * @param newRoute\n     */\n    onLeave(newRoute) {\n        this.isActive = false;\n    }\n\n    /**\n     * Called by the Router when this controller instance is being navigated to. Calls the controller's method in the given route,\n     * and triggers a famous-flex AnimationController show() with the View instance that the method returns. Is also capable of receiving\n     * a Promise from the method, in which case the show() is called after the promise is resolved.\n     * @param {Object} route Route object generated by the Router. Contains a method name to call, and a render spec for passing to the AnimationController.\n     * @returns {Boolean} success Whether the controller method was fully executed, and the Router should emit a routechange event.\n     */\n    onRouteCalled(route) {\n        this.isActive = true;\n        if (typeof this[route.method] === 'function') {\n            let result = this[route.method].apply(this, route.values);\n\n            if (result) {\n                this.emit('renderstart', route.method);\n                if (result instanceof Promise) { /* We can assume the method called was asynchronous from nature, therefore we await the result. */\n                    result.then((delegatedresult) => {\n                        this._showView(delegatedresult, route);\n                    });\n                } else {\n                    this._showView(result, route);\n                }\n                return true;\n            } else {\n                console.log('Method did not return a View or a Promise instance.');\n                return false;\n            }\n        } else {\n            console.log('Route does not exist!');\n            return false;\n        }\n    }\n\n    /**\n     * Shows a view that was returned from a child controller\n     * @param {View} view\n     * @param {Object} route\n     * @private\n     */\n    _showView(view, route) {\n        if(view instanceof Dialog){\n            if(this.dialogManager.getOpenDialog() !== view){\n                this.dialogManager.show({dialog: view, canCancel: false, shouldGoToRoute: view.goToRoute || this.router.getPreviousRoute()});\n                this.dialogManager.once('dialogShown', () => {\n                    this.emit('renderend', route.method);\n                });\n            } else {\n                this.emit('renderend', route.method);\n            }\n        } else {\n            /* Close if there's currently an open dialog */\n            this.dialogManager.hasOpenDialog() && this.dialogManager._close();\n            /* Assemble a callback based on the execution scope and have that called when rendering is completed. */\n            this.context.show(view, route.spec, () => { this.emit('renderend', route.method); });\n        }\n        this.emit('rendering', route.method);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/core/Controller.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "Controller",
    "memberof": "src/core/Controller.js",
    "static": true,
    "longname": "src/core/Controller.js~Controller",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/core/Controller.js",
    "importStyle": "{Controller}",
    "description": "The Controller class provides the highest level of control regarding the application features. Every controller method\ncorresponds to a subroute (Usually defaulting to Index), and every controller maps to a parent-route (usually called Home)\nThe controller methods should return views or dialogs. These will be displayed by the framework when the route is entered.",
    "lineNumber": 26,
    "decorators": [
      {
        "name": "inject",
        "arguments": "(Router, AnimationController, DialogManager)"
      }
    ],
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Controller.js~Controller#constructor",
    "access": "public",
    "description": "Saves the router and context to this.router and this.context, respectively.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Router"
        ],
        "spread": false,
        "optional": false,
        "name": "router",
        "description": "Injected globally used router"
      },
      {
        "nullable": null,
        "types": [
          "AnimationController"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Injected animationController used by the app"
      },
      {
        "nullable": null,
        "types": [
          "DialogManager"
        ],
        "spread": false,
        "optional": false,
        "name": "dialogManager",
        "description": "The dialog manager that shows and hides dialogs"
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "router",
    "memberof": "src/core/Controller.js~Controller",
    "static": false,
    "longname": "src/core/Controller.js~Controller#router",
    "access": "public",
    "description": "The router used globally in the app",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Router"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "context",
    "memberof": "src/core/Controller.js~Controller",
    "static": false,
    "longname": "src/core/Controller.js~Controller#context",
    "access": "public",
    "description": "The AnimationController used globally in the app to change screens",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "AnimationController"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "dialogManager",
    "memberof": "src/core/Controller.js~Controller",
    "static": false,
    "longname": "src/core/Controller.js~Controller#dialogManager",
    "access": "public",
    "description": "The dialogmanager used to show and hide dialogs. If a controller returns a Dialog, this will be used",
    "lineNumber": 50,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "onLeave",
    "memberof": "src/core/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Controller.js~Controller#onLeave",
    "access": "public",
    "description": "Called to notify the Controller that the route is changed",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newRoute",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "isActive",
    "memberof": "src/core/Controller.js~Controller",
    "static": false,
    "longname": "src/core/Controller.js~Controller#isActive",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "onRouteCalled",
    "memberof": "src/core/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Controller.js~Controller#onRouteCalled",
    "access": "public",
    "description": "Called by the Router when this controller instance is being navigated to. Calls the controller's method in the given route,\nand triggers a famous-flex AnimationController show() with the View instance that the method returns. Is also capable of receiving\na Promise from the method, in which case the show() is called after the promise is resolved.",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} success Whether the controller method was fully executed, and the Router should emit a routechange event."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "Route object generated by the Router. Contains a method name to call, and a render spec for passing to the AnimationController."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "success Whether the controller method was fully executed, and the Router should emit a routechange event."
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "_showView",
    "memberof": "src/core/Controller.js~Controller",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Controller.js~Controller#_showView",
    "access": "private",
    "description": "Shows a view that was returned from a child controller",
    "lineNumber": 112,
    "params": [
      {
        "nullable": null,
        "types": [
          "View"
        ],
        "spread": false,
        "optional": false,
        "name": "view",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/core/Model.js",
    "content": "/**\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport difference               from 'lodash/difference.js';\nimport {Injection}              from '../utils/Injection.js';\nimport {ObjectHelper}           from '../utils/ObjectHelper.js';\nimport {PrioritisedObject}      from '../data/PrioritisedObject.js';\nimport {DataSource}             from '../data/DataSource.js';\n\n/**\n * A model that has attributes synced with the database.\n *\n * @example\n * export class Box extends Model {\n *  get label() {}\n *  get articleNumber() {}\n * }\n */\nexport class Model extends PrioritisedObject {\n\n    /**\n     * Creates a new instance of a model.\n     * @param {String} id Optional: The identifier for this model. For a user model this might be a user ID, for example. It\n     *           is used to build the path to the dataSource. This path is <root>/<model name appended with 's'>/<id>.\n     *           If no id is given, a randomly generated one will be pushed to the dataSource. You can use this for\n     *           creating new objects in the dataSource.\n     * @param {Object} data Optional: The initial data to fill the model with. The model will be extended with any\n     *                      properties present in the data parameter.\n     * @param {Object} options Optional: Additional options. Currently used is \"dataSnapshot\", which if present is used\n     *                          to fetch the initial model data. If not present, the model will add a one-time\n     *                          subscription to the dataSource to fetch initial data.\n     * @returns {Model} Model Instance.\n     */\n    constructor(id, data = null, options = {}) {\n\n        /* Retrieve dataSource from the DI context */\n        let dataSource = options.dataSource || Injection.get(DataSource);\n        super();\n        this._id = id;\n        /* Replace all stub data fields of any subclass of Model with databinding accessors.\n         * This causes changes to be synched to and from the dataSource. */\n        this._replaceModelAccessorsWithDatabinding();\n\n        ObjectHelper.addHiddenPropertyToObject(this, 'options', options, false);\n\n        /* Calculate path to model in dataSource, used if no dataSource or path are given.\n         *\n         * The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.\n         * This allows Arva code to be minified and mangled without losing automated model name resolving.\n         * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name. */\n        let modelName = this.constructor._name || Object.getPrototypeOf(this).constructor.name;\n\n        let pathRoot = modelName + 's';\n        if (options.subBranch) { pathRoot += `/${options.subBranch}`; }\n\n        let dataWasPushed = false;\n        let onDataSynced, onDataSyncFailed;\n        let dataIsSynced = new Promise((resolve, reject) => {\n            onDataSynced = resolve;\n            onDataSyncFailed = reject;\n        });\n\n        let dataSourceOptions = { synced: dataIsSynced };\n\n        if (options.dataSource && id) {\n            this._dataSource = options.dataSource;\n        } else if (options.dataSource) {\n            /* No id is present, generate a random one by pushing a new entry to the dataSource. */\n            dataWasPushed = true;\n            this._dataSource = options.dataSource.push(data);\n        } else if (options.path && id) {\n            this._dataSource = dataSource.child(options.path + '/' + id || '', dataSourceOptions);\n        } else if (options.dataSnapshot) {\n            let { ref } = options.dataSnapshot;\n            /* Getting the path from a snapshot requires some string modifications */\n            this._dataSource = dataSource.child(ref.toString().substring(ref.root.toString().length), dataSourceOptions);\n        } else if (id) {\n            /* If an id is present, use it to locate our model. */\n            this._dataSource = dataSource.child(pathRoot + '/' + id, dataSourceOptions);\n        } else {\n            dataWasPushed = true;\n            /* No id is present, generate a random one by pushing a new entry to the dataSource. */\n            if (options.path) {\n                this._dataSource = dataSource.child(options.path).push(data);\n            } else {\n                this._dataSource = dataSource.child(pathRoot).push(data);\n            }\n            /* Get the last part of the path and set to the ID */\n            this._id = dataSource.key();\n        }\n\n        /* Re-construct core PrioritisedObject with new dataSource */\n        if (options.dataSnapshot) {\n            this._buildFromSnapshot(options.dataSnapshot);\n        } else {\n            this._buildFromDataSource(this._dataSource);\n        }\n        if (!options.noInitialSync && !dataWasPushed) {\n            /* Write local data to model, if any data is present. */\n            this._writeLocalDataToModel(data)\n                .then(onDataSynced)\n                .catch(onDataSyncFailed);\n        } else {\n            onDataSynced();\n        }\n        if(this._dataSource){\n            /* Add the promise to the end of the dataSource synced chain.\n             * This enables to catch errors like this:\n             * new Model(null, {...data}).synced().catch((error) => /!* Handle error *!/)\n             */\n            let dataSourceSyncPromise = this._dataSource.synced();\n            if (dataSourceSyncPromise) {\n                this._dataSource._synced = dataSourceSyncPromise.then(() => dataIsSynced);\n            }\n        }\n    }\n\n\n    /**\n     * Check if the model has been synchonized with the database\n     * @returns {Promise} Resolves when the model has been synchonized with the database\n     */\n    synced() {\n        return this._dataSource.synced();\n    }\n\n    /**\n     * Updates properties of this model to the values of those of another model, or a normal JS Object.\n     * @param {Model|Object} newModelOrData Data to replace old data with\n     */\n    replaceProperties(newModelOrData) {\n        this.transaction(() => {\n            for (let fieldName in newModelOrData) {\n                /* Simple shallow clone */\n                this[fieldName] = newModelOrData[fieldName];\n            }\n        });\n    }\n\n    /**\n     * Replaces all getters/setters defined on the model implementation with properties that trigger update events to the dataSource.\n     * @returns {void}\n     * @private\n     */\n    _replaceModelAccessorsWithDatabinding() {\n        let prototype = Object.getPrototypeOf(this);\n\n        if (~Object.getOwnPropertyNames(prototype).indexOf('id')) {\n            console.log(`Don't define an id property to ${prototype.constructor.name}, as this property is internally used by the PrioritisedArray`);\n        }\n\n        /* If the code is minified, then this.constructor._name is defined, in that case that also goes for the inheriting classes */\n        while (prototype && (prototype.constructor._name || (!this.constructor._name && prototype.constructor.name !== 'Model'))) {\n            /* Get all properties except the id and constructor of this model */\n            let propertyNames = difference(Object.getOwnPropertyNames(prototype), ['constructor', 'id']);\n\n            for (let propertyName of propertyNames) {\n                let descriptor = Object.getOwnPropertyDescriptor(prototype, propertyName);\n                if (descriptor && descriptor.get) {\n                    let value = this[propertyName];\n                    delete this[propertyName];\n                    ObjectHelper.addPropertyToObject(this, propertyName, value, true, true, () => this._onSetterTriggered(propertyName), ({newValue}) => this._onGetterTriggered({propertyName, newValue}));\n                }\n            }\n\n            prototype = Object.getPrototypeOf(prototype);\n        }\n    }\n\n    /**\n     * Writes data, if present, to the Model's dataSource. Uses a transaction, meaning that only one update is triggered to the dataSource,\n     * even though multiple fields change.\n     * @param {Object} data Data to write, can be null.\n     * @returns {Promise} Resolves when the transaction is complete and synced\n     * @private\n     */\n    _writeLocalDataToModel(data) {\n        if (data) {\n            this.disableChangeListener();\n            let isDataDifferent = false;\n            for (let name in data) {\n                if (Object.getOwnPropertyDescriptor(this, name) && this[name] !== data[name]) {\n                    isDataDifferent = true;\n                    break;\n                }\n            }\n            this.enableChangeListener();\n\n            if (isDataDifferent) {\n                return this.transaction(function () {\n                    for (let name in data) {\n\n                        // only map properties that exists on our model\n                        if (Object.getOwnPropertyDescriptor(this, name)) {\n                            let value = data[name];\n                            this[name] = value;\n                        }\n                    }\n                }.bind(this));\n            }\n        }\n        return Promise.resolve();\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/core/Model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "class",
    "name": "Model",
    "memberof": "src/core/Model.js",
    "static": true,
    "longname": "src/core/Model.js~Model",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/core/Model.js",
    "importStyle": "{Model}",
    "description": "A model that has attributes synced with the database.",
    "examples": [
      "export class Box extends Model {\n get label() {}\n get articleNumber() {}\n}"
    ],
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "src/data/PrioritisedObject.js~PrioritisedObject"
    ]
  },
  {
    "__docId__": 147,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Model.js~Model#constructor",
    "access": "public",
    "description": "Creates a new instance of a model.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model} Model Instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Optional: The identifier for this model. For a user model this might be a user ID, for example. It\n          is used to build the path to the dataSource. This path is <root>/<model name appended with 's'>/<id>.\n          If no id is given, a randomly generated one will be pushed to the dataSource. You can use this for\n          creating new objects in the dataSource."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Optional: The initial data to fill the model with. The model will be extended with any\n                     properties present in the data parameter."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional: Additional options. Currently used is \"dataSnapshot\", which if present is used\n                         to fetch the initial model data. If not present, the model will add a one-time\n                         subscription to the dataSource to fetch initial data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": "Model Instance."
    }
  },
  {
    "__docId__": 148,
    "kind": "member",
    "name": "_id",
    "memberof": "src/core/Model.js~Model",
    "static": false,
    "longname": "src/core/Model.js~Model#_id",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "_dataSource",
    "memberof": "src/core/Model.js~Model",
    "static": false,
    "longname": "src/core/Model.js~Model#_dataSource",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "synced",
    "memberof": "src/core/Model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Model.js~Model#synced",
    "access": "public",
    "description": "Check if the model has been synchonized with the database",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the model has been synchonized with the database"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the model has been synchonized with the database"
    },
    "params": []
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "replaceProperties",
    "memberof": "src/core/Model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Model.js~Model#replaceProperties",
    "access": "public",
    "description": "Updates properties of this model to the values of those of another model, or a normal JS Object.",
    "lineNumber": 137,
    "params": [
      {
        "nullable": null,
        "types": [
          "Model",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newModelOrData",
        "description": "Data to replace old data with"
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "[fieldName]",
    "memberof": "src/core/Model.js~Model",
    "static": false,
    "longname": "src/core/Model.js~Model#[fieldName]",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "_replaceModelAccessorsWithDatabinding",
    "memberof": "src/core/Model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Model.js~Model#_replaceModelAccessorsWithDatabinding",
    "access": "private",
    "description": "Replaces all getters/setters defined on the model implementation with properties that trigger update events to the dataSource.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "_writeLocalDataToModel",
    "memberof": "src/core/Model.js~Model",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Model.js~Model#_writeLocalDataToModel",
    "access": "private",
    "description": "Writes data, if present, to the Model's dataSource. Uses a transaction, meaning that only one update is triggered to the dataSource,\neven though multiple fields change.",
    "lineNumber": 183,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the transaction is complete and synced"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "Data to write, can be null."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the transaction is complete and synced"
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "[name]",
    "memberof": "src/core/Model.js~Model",
    "static": false,
    "longname": "src/core/Model.js~Model#[name]",
    "access": "public",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "file",
    "name": "src/core/Router.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport EventEmitter                 from 'eventemitter3';\nimport {ObjectHelper}               from '../utils/ObjectHelper.js';\n\n/**\n * Abstract Router class which can be implemented to be used in an MVP setup.\n */\nexport class Router extends EventEmitter {\n\n    constructor() {\n        super();\n        // make classes behave like context bound\n\n        // make the router aware of controllers active in the application\n        // each controller will need to subscribe itself to this container.\n        this.controllers = [];\n\n        // when a default controller is designated. The router will map every route without a\n        // controller reference to the HomeController.\n        this.defaultController = 'Home';\n\n        // when a default method is designated. the router map will every route without a\n        // method reference to the HomeController's method.\n        this.defaultMethod = 'Index';\n    }\n\n    /**\n     * Sets the initial controller and method to be activated whenever the controllers are activated.\n     * @param {Controller|Function|String} controller Default controller instance, controller constructor, or controller name to go to.\n     * @param {String} method Default method to call in given controller.\n     * @returns {void}\n     */\n    setDefault(controller, method = null) {\n    }\n\n    /**\n     * Sets the animation specs object for use by the famous-flex AnimationController.\n     * @param {Object} specs Animation specs, keyed by target controller.\n     * @returns {void}\n     */\n    setControllerSpecs(specs) {\n    }\n\n    /**\n     * Triggers navigation to one of the controllers\n     * @param {Controller|Function|String} controller The controller instance, controller constructor, or controller name to go to.\n     * @param {String} method The method to call in given controller.\n     * @param {Object} params Dictonary of key-value pairs containing named arguments (i.e. {id: 1, test: \"yes\"})\n     * @returns {void}\n     */\n    go(controller, method, params = null) {\n    }\n\n    /**\n     * Returns an object containing the current route.\n     * @returns {{controller: *, method: (*), params: {}}}\n     */\n    getRoute() {\n\n    }\n\n    /**\n     * Registers a single controller.\n     * @param {String} route Route to trigger handler on.\n     * @param {Object} handlers\n     * @param {Function} handler.enter Method to call on entering a route.\n     * @param {Function} handler.leave Method to call on when leaving a route.\n     * @returns {void}\n     */\n    add(route, {enter, leave}, controller) {\n\n    }\n\n    /**\n     * On a route change, calls the corresponding controller method with the given parameter values.\n     * @returns {Boolean} Whether the current route was successfully ran.\n     */\n    run() {\n\n    }\n\n    setInitialSpec(spec) {\n    }\n\n    setBackButtonEnabled(enabled) {\n    }\n\n    isBackButtonEnabled() {\n    }\n\n    /**\n     * Return the previous known route, or default route if no route stack is present\n     * @returns {*}\n     */\n    getPreviousRoute(){\n\n    }\n\n    goBackInHistory() {\n\n    }\n\n    _setupNativeBackButtonListener() {\n\n    }\n\n\n    /**\n     * Executes the controller handler associated with a given route, passing the route as a parameter.\n     * @param {Object} rule Rule handler to execute.\n     * @param {Object} route Route object to pass as parameter.\n     * @returns {void}\n     * @private\n     */\n    _executeRoute(rule, route) {\n\n    }\n\n    /**\n     * Checks if the current route is already present in the history stack, and if so removes all entries after\n     * and including the first occurrence. It will then append the current route to the history stack.\n     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.\n     * @returns {void}\n     * @private\n     */\n    _setHistory(currentRoute) {\n\n    }\n\n    /**\n     * CheckS whether a route is already present in the history stack.\n     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.\n     * @returns {Boolean} Whether the route has been visited previously.\n     * @private\n     */\n    _hasVisited(currentRoute) {\n\n    }\n\n    /**\n     * Returns the Famous-Flex animation spec for two given routes. Takes its spec inputs from the specs set in\n     * router.setControllerSpecs(), which is called from the app constructor.\n     * @param {Object} previousRoute Previous route object containing url, controller, method, keys, and values.\n     * @param {Object} currentRoute Current route object containing url, controller, method, keys, and values.\n     * @returns {Object} A spec object if one is found, or an empty object otherwise.\n     * @private\n     */\n    _getAnimationSpec(previousRoute, currentRoute) {\n\n    }\n\n    /**\n     * Extracts a controller name from a given string, constructor, or controller instance. 'Controller' part is not included in the returned name.\n     * E.g. _getControllerName(HomeController) -> 'Home'.\n     * @param {Function|Object|String} controller String, constructor, or controller instance.\n     * @returns {String} Name of the controller\n     * @private\n     */\n    _getControllerName(controller) {\n\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/core/Router.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 164,
    "kind": "class",
    "name": "Router",
    "memberof": "src/core/Router.js",
    "static": true,
    "longname": "src/core/Router.js~Router",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/core/Router.js",
    "importStyle": "{Router}",
    "description": "Abstract Router class which can be implemented to be used in an MVP setup.",
    "lineNumber": 16,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 165,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "controllers",
    "memberof": "src/core/Router.js~Router",
    "static": false,
    "longname": "src/core/Router.js~Router#controllers",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "defaultController",
    "memberof": "src/core/Router.js~Router",
    "static": false,
    "longname": "src/core/Router.js~Router#defaultController",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "defaultMethod",
    "memberof": "src/core/Router.js~Router",
    "static": false,
    "longname": "src/core/Router.js~Router#defaultMethod",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "setDefault",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#setDefault",
    "access": "public",
    "description": "Sets the initial controller and method to be activated whenever the controllers are activated.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Controller",
          "Function",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "Default controller instance, controller constructor, or controller name to go to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Default method to call in given controller."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "setControllerSpecs",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#setControllerSpecs",
    "access": "public",
    "description": "Sets the animation specs object for use by the famous-flex AnimationController.",
    "lineNumber": 49,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": "Animation specs, keyed by target controller."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 171,
    "kind": "method",
    "name": "go",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#go",
    "access": "public",
    "description": "Triggers navigation to one of the controllers",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Controller",
          "Function",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "The controller instance, controller constructor, or controller name to go to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method to call in given controller."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Dictonary of key-value pairs containing named arguments (i.e. {id: 1, test: \"yes\"})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 172,
    "kind": "method",
    "name": "getRoute",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#getRoute",
    "access": "public",
    "description": "Returns an object containing the current route.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{controller: *, method: (*), params: {}}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{controller: *, method: (*), params: {}}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "add",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#add",
    "access": "public",
    "description": "Registers a single controller.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "Route to trigger handler on."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "handlers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler.enter",
        "description": "Method to call on entering a route."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler.leave",
        "description": "Method to call on when leaving a route."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "run",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#run",
    "access": "public",
    "description": "On a route change, calls the corresponding controller method with the given parameter values.",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the current route was successfully ran."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the current route was successfully ran."
    },
    "params": []
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "setInitialSpec",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#setInitialSpec",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [
      {
        "name": "spec",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "setBackButtonEnabled",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#setBackButtonEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "isBackButtonEnabled",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#isBackButtonEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "getPreviousRoute",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#getPreviousRoute",
    "access": "public",
    "description": "Return the previous known route, or default route if no route stack is present",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "goBackInHistory",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#goBackInHistory",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "_setupNativeBackButtonListener",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#_setupNativeBackButtonListener",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "_executeRoute",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#_executeRoute",
    "access": "private",
    "description": "Executes the controller handler associated with a given route, passing the route as a parameter.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "Rule handler to execute."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "Route object to pass as parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "_setHistory",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#_setHistory",
    "access": "private",
    "description": "Checks if the current route is already present in the history stack, and if so removes all entries after\nand including the first occurrence. It will then append the current route to the history stack.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": "Route object containing url, controller, method, keys, and values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "_hasVisited",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#_hasVisited",
    "access": "private",
    "description": "CheckS whether a route is already present in the history stack.",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the route has been visited previously."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": "Route object containing url, controller, method, keys, and values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the route has been visited previously."
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "_getAnimationSpec",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#_getAnimationSpec",
    "access": "private",
    "description": "Returns the Famous-Flex animation spec for two given routes. Takes its spec inputs from the specs set in\nrouter.setControllerSpecs(), which is called from the app constructor.",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} A spec object if one is found, or an empty object otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "previousRoute",
        "description": "Previous route object containing url, controller, method, keys, and values."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": "Current route object containing url, controller, method, keys, and values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A spec object if one is found, or an empty object otherwise."
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "_getControllerName",
    "memberof": "src/core/Router.js~Router",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/Router.js~Router#_getControllerName",
    "access": "private",
    "description": "Extracts a controller name from a given string, constructor, or controller instance. 'Controller' part is not included in the returned name.\nE.g. _getControllerName(HomeController) -> 'Home'.",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Name of the controller"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function",
          "Object",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "String, constructor, or controller instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Name of the controller"
    }
  },
  {
    "__docId__": 186,
    "kind": "file",
    "name": "src/core/ScrollController.js",
    "content": "/**\n * Created by lundfall on 06/10/16.\n */\n\n\n/* Imports that can be needed. TODO: Remove unused dependencies */\nimport EventEmitter            from 'eventemitter3'\nimport isEqual                 from 'lodash/isEqual.js'\n\n/* Famous-flex */\nimport LinkedListViewSequence  from 'famous-flex/LinkedListViewSequence.js'\nimport LayoutNodeManager       from 'famous-flex/LayoutNodeManager.js'\nimport FlowLayoutNode          from 'famous-flex/FlowLayoutNode.js'\nimport LayoutUtility           from 'famous-flex/LayoutUtility.js'\n\n/* Famous */\nimport Particle                from 'famous/physics/bodies/Particle'\nimport Transitionable          from 'famous/transitions/Transitionable.js'\nimport NativeScrollGroup       from 'famous/core/NativeScrollGroup'\nimport {Surface}               from '../surfaces/Surface.js'\nimport DOMBuffer               from 'famous/core/DOMBuffer.js'\nimport PhysicsEngine           from 'famous/physics/PhysicsEngine'\nimport Engine                  from 'famous/core/Engine.js'\nimport Timer                   from 'famous/utilities/Timer.js'\nimport Spring                  from 'famous/physics/forces/Spring'\nimport Drag                    from 'famous/physics/forces/Drag'\nimport ScrollSync              from 'famous/inputs/ScrollSync'\nimport TouchSync               from 'famous/inputs/TouchSync.js'\nimport EventHandler            from 'famous/core/EventHandler'\nimport Transform               from 'famous/core/Transform'\nimport Entity                  from 'famous/core/Entity'\nimport Vector                  from 'famous/math/Vector'\nimport Group                   from 'famous/core/Group'\nimport FamousUtility           from 'famous/utilities/Utility'\nimport FamousView              from 'famous/core/View.js'\n\n/* Arva */\nimport { Utils }                 from '../utils/view/Utils.js'\nimport { combineOptions }        from '../utils/CombineOptions.js'\nimport { ObjectHelper }          from '../utils/ObjectHelper.js'\nimport { StackLayout }           from '../layout/functions/StackLayout.js'\nimport { PushDownSurface }       from '../surfaces/PushDownSurface.js'\n\n//TODO: There's a bug when having chat scrolling on, and adding a lot of stuff, removing it all, and adding them again back\n\n/**\n * Enables a native scrolling list to be rendered.\n */\nexport class ScrollController extends FamousView {\n\n  _scrollVoidHeight = 0;\n  _scrollTopHeight = 0;\n  _previousValues = {\n    contextSize: [0, 0],\n    scrollOffset: 0\n  };\n  _cachedSpecs = {};\n  _stickingToEnds = {bottom: false, top: false};\n  /* Actions for doing before the layout function */\n  _commitActions = [];\n  _isDirty = true;\n  _scrollToTransitionable = new Transitionable();\n  /* TODO: Implement functionality for ensurevisible */\n  _ensureVisibleNode = null\n\n  constructor (options = {}) {\n    super()\n\n    ObjectHelper.bindAllMethods(this, this)\n    this.options = combineOptions({\n      /* Previously called this._configuredDirection in famous-flex/ScrollController.js */\n      layoutDirection: FamousUtility.Direction.Y,\n      /*The extra bounds space make up for a smooth insertion and deletion of the nodes at the edges */\n      extraBoundsSpace: [0, 0],\n      autoPipeEvents: true,\n      layoutAll: false,\n      showScrollBar: true,\n      alwaysLayout: false,\n      /* Own layout function that isn't compatible with famous-flex. TODO: Make a collectionlayout equivalent */\n      layout: StackLayout,\n      layoutOptions: {\n        /* Margins are specified with css*/\n        margins: LayoutUtility.normalizeMargins(options.layoutOptions ? (options.layoutOptions.margins || [10]) : [10])\n      },\n      /* Currently only flow: true is supported. TODO: Make flow: false work */\n      flow: true,\n      /* Set animation option of the flow */\n      flowOptions: {},\n      /* Set to have some extra estimated scrolling opportunity */\n      initialHeight: 0\n    }, options)\n    this._id = Entity.register(this);\n\n    /* The distance before the first node, e.g. the translate before this._viewSequence.get() */\n    this._initOverScrollPhysics();\n\n    this._maxKnownTranslate = this.options.initialHeight;\n    this._otherNodes = {bottomScroller: new Surface(), topScroller: new PushDownSurface()};\n\n\n    /* The thing that provides us the context for the layout function */\n    this._layoutNodeManager = new LayoutNodeManager(FlowLayoutNode, (node, spec) => {\n      if (!spec && this.options.flowOptions.insertSpec) {\n        node.setSpec(this.options.flowOptions.insertSpec)\n      }\n    }, true)\n    this._layoutNodeManager.setNodeOptions(this.options.flowOptions)\n    this._initNativeScrollGroup()\n\n    /* TODO: Remove duplicates this._viewSequence, this._dataSource. Kept for DBSV compatibility */\n    this._dataSource = this._viewSequence = new LinkedListViewSequence([])\n\n    this.on('recursiveReflow', (forWhichRenderables) => {\n      let renderableIDs = Object.keys(forWhichRenderables)\n      /* Backwards loop because in almost all the time the last renderable in the sequence is the one to look for*/\n      for (let index = renderableIDs.length - 1; index >= 0; index--) {\n        let renderableID = renderableIDs[index]\n        if (renderableID in this._cachedSpecs) {\n          delete this._cachedSpecs[renderableID]\n          break\n        }\n      }\n      //TODO change to w/e function does this\n      this.reflow();\n    })\n  }\n\n  insert (position, renderable, insertSpec) {\n    insertSpec = insertSpec || this.options.flowOptions.insertSpec\n\n    if (this._currentScrollOffset === 0 && !this.options.chatScrolling) {\n      this._enqueueCommitAction(() => this.stickToTopOrBottom(false))\n    } else if(this._currentScrollOffset >= this._group.getMaxScrollOffset()){\n      this.stickToBottom()\n    }\n\n    /* Insert data */\n    this._viewSequence.insert(position, renderable)\n\n    this._pipeRenderableAsNecessary(renderable)\n\n    /* Mark as flowy renderable for the layoutnodemanager */\n    renderable.isFlowy = true\n\n    if (this._isPositionOutsideCurrentView(position)) {\n      return this\n    }\n    this._accountForModificationsHappeningAtStart()\n\n    /* When a custom insert-spec was specified, store that in the layout-node */\n    if (insertSpec) {\n      let newNode = this._layoutNodeManager.createNode(renderable, insertSpec)\n      newNode.executeInsertSpec()\n      newNode.releaseLock(true)\n      this._layoutNodeManager.insertNode(newNode)\n    }\n\n    this.reflow()\n    return this\n  };\n\n  remove (position) {\n\n\n    // Remove the renderable\n    let sequence = this._viewSequence.findByIndex(position)\n\n    if (!sequence) {\n      Utils.warn(`Cannot remove non-existent index: ${position}`)\n      return\n    }\n\n    delete this._cachedSpecs[Utils.getRenderableID(sequence._value)]\n\n    this._viewSequence = this._viewSequence.remove(sequence)\n    let renderNode = sequence.get()\n    /* TODO: Implement logic for remove spec.\n     */\n\n    if (this._isPositionOutsideCurrentView(position)) {\n      return this\n    }\n    this._accountForModificationsHappeningAtStart()\n\n    if (renderNode || !this._viewSequence.getLength()) {\n      this.reflow()\n    }\n    return renderNode\n\n  }\n\n  replace (indexOrId, renderable, noAnimation) {\n    let sequence = this._viewSequence.findByIndex(indexOrId)\n    let oldRenderable = sequence.get()\n    if (!oldRenderable) {\n      Utils.warn(`Cannot replace non-existent index: ${indexOrId}`)\n      return\n    }\n    if (oldRenderable !== renderable && noAnimation && oldRenderable && (this._ensureVisibleNode === oldRenderable)) {\n      this._ensureVisibleNode = renderable\n    }\n    sequence.set(renderable)\n    if (oldRenderable !== renderable) {\n      this._pipeRenderableAsNecessary(renderable)\n      /* Mark as flowy renderable for the layoutnodemanager */\n      renderable.isFlowy = true\n      if (noAnimation && oldRenderable) {\n        let node = this._layoutNodeManager.getNodeByRenderNode(oldRenderable)\n        if (node) {\n          node.setRenderNode(renderable)\n        }\n      } else {\n        if (!this._isPositionOutsideCurrentView(indexOrId)) {\n          this.reflow()\n        }\n      }\n    }\n    this._accountForModificationsHappeningAtStart()\n    /* Else, the renderable is the same as the old one, do nothing */\n\n  }\n\n  stickToBottom () {\n    this.stickToTopOrBottom(true)\n  }\n\n  stickToTopOrBottom (isBottom) {\n    let sequenceToMatch = isBottom ? this._viewSequence.getTail() : this._viewSequence.getHead()\n    if (sequenceToMatch && this._viewSequence !== sequenceToMatch) {\n      this._moveSequence(sequenceToMatch, isBottom)\n    }\n    this.animateToTopOrBottom(isBottom)\n\n    this._stickingToEnds[isBottom ? 'bottom' : 'top'] = true\n    this._stickingToEnds[isBottom ? 'top' : 'bottom'] = false\n  }\n\n  /**\n   *\n   * @param {Boolean} isBottom\n   */\n  animateToTopOrBottom (isBottom) {\n    if (!this._scrollToTransitionable.isActive()) {\n      /* Set the scroll transitionable to go from the current position to where it has to go (hence settings twice)*/\n      this._scrollToTransitionable.set(Math.max(0, this._group.getScrollOffset()))\n      this._scrollToTransitionable.set(Math.max(0, isBottom ? this._group.getMaxScrollOffset() : 0), {\n        curve: function linear (x) {\n          return x\n        }, duration: 300\n      }, () => {\n        this._group.forceScrollOffsetInvalidation()\n      })\n    }\n\n  }\n\n  scrollToBottom () {\n    this._shouldIgnoreScrollEvent = true\n    this._group.scrollToBottom()\n  }\n\n  _isPositionOutsideCurrentView (position) {\n    return position < this._firstNodeIndex || position > this._lastNodeIndex\n  }\n\n  _accountForModificationsHappeningAtStart () {\n    /* If we're doing modifications and we're at the beginning, we should be sure to reset the sequence to the first node\n     * in order to to update the layout in a faulty way\n     */\n    if (this._firstNodeIndex === 0) {\n      // this._resetSequenceToFirstNode();\n    }\n  }\n\n  getDataSource () {\n    return this._viewSequence\n  }\n\n  invalidateLayout () {\n    this._reLayout = true\n  }\n\n  reflow () {\n    this._isDirty = true\n    this._cachedSpecs = {}\n  }\n\n  _initNativeScrollGroup () {\n    this._group = new NativeScrollGroup()\n    this._group.add({render: this._innerRender.bind(this)})\n    /* Prevent scrolling in the opposite direction */\n    this._group.setProperties({[`overflow${this.options.layoutDirection === 0 ? 'Y' : 'X'}`]: 'hidden'})\n    this.on('mousewheel', this._onManualScrollAttempt.bind(this));\n    this.on('wheel', this._onManualScrollAttempt.bind(this));\n    this.on('touchmove', this._onManualScrollAttempt.bind(this));\n    this.on('scroll', (e) => {\n      this._eventOutput.emit('userScroll', e)\n      if (!this._shouldIgnoreScrollEvent) {\n        this._shouldIgnoreScrollEvent = false\n      }\n    })\n\n    if (!this.options.showScrollBar) {\n      this._group.addClass('hide-scrollbar')\n    }\n  }\n\n  _onManualScrollAttempt () {\n    this._eventOutput.emit('manualScroll')\n    this._didManualScroll = true\n    for (let direction in this._stickingToEnds) {\n      this._stickingToEnds[direction] = false\n    }\n  }\n\n  _initOverScrollPhysics () {\n    /* These are used for overscrolling */\n    this._physicsEngine = new PhysicsEngine(this.options.scrollPhysicsEngine)\n    this._overScrollSpring = new Spring({\n      dampingRatio: 1,\n      period: 400,\n      anchor: new Vector([0, 0, 0])\n    })\n    this._scrollParticle = new Particle({mass: 100})\n    this._physicsEngine.addBody(this._scrollParticle)\n    this._physicsEngine.attach(this._overScrollSpring, this._scrollParticle)\n  }\n\n  _isLayoutNecessary (newSize, newScrollOffset) {\n\n    let upperMargin = this.options.layoutOptions.margins[0]\n    let lowerMargin = this.options.layoutOptions.margins[2]\n    let lastNormalizedScrollOffset = this._previousValues.normalizedScrollOffset\n    let scrollHeight = this._group.getMaxScrollOffset()\n    return this._isReflowNecessary() || /* Changes have been made that means that a new flow animation will take place */\n      /* Changes have been made that aren't as big as starting new flow animation but still need new layout */\n      this._reLayout ||\n      /* Size has changed */ !isEqual(newSize, this._previousValues.contextSize) ||\n      /* There is no normalizedScollOffset */\n      lastNormalizedScrollOffset === undefined ||\n      /* The scrolling has changed too much since last normalization */\n      Math.abs(lastNormalizedScrollOffset - newScrollOffset) > newSize[this.options.layoutDirection] * 0.8 ||\n      (newScrollOffset < upperMargin && lastNormalizedScrollOffset >= upperMargin) ||\n      (scrollHeight - newScrollOffset < lowerMargin && scrollHeight - lastNormalizedScrollOffset >= lowerMargin) ||\n      /* We should always layout */\n      this.options.alwaysLayout\n\n  }\n\n  _isReflowNecessary () {\n    return this._isDirty\n  }\n\n  _pipeRenderableAsNecessary (renderable) {\n    if (this.options.autoPipeEvents && renderable && renderable.pipe) {\n      renderable.pipe(this)\n      renderable.pipe(this._eventOutput)\n    }\n  }\n\n  _enqueueCommitAction (actionToPerform) {\n    this._commitActions.push(actionToPerform)\n  }\n\n  _layout (size, scrollOffset) {\n\n    let scrollSize = size[this.options.layoutDirection]\n    let scrollLength = this._maxKnownTranslate + this.options.extraBoundsSpace[1]\n    /* Display elements that are one screen above and one screen below */\n    let scrollStart = scrollOffset - scrollSize - this._scrollTopHeight\n    let scrollEnd = scrollSize * 2 + scrollOffset - this._scrollTopHeight\n\n    /* If everything should be layouted, then are bounds should be infinite */\n    if (this.options.layoutAll) {\n      scrollStart = -this._scrollTopHeight\n      scrollEnd = 10000\n    }\n\n    /* Prepare for layout */\n    let layoutContext = this._layoutNodeManager.prepareForLayout(\n      this._viewSequence, /* first node to layout */\n      this._otherNodes, /* Nodes by id */\n      {\n        size,\n        direction: this.options.layoutDirection,\n        reverse: false,\n        scrollOffset: this._scrollVoidHeight + this.options.extraBoundsSpace[0],\n        scrollStart,\n        scrollEnd,\n        scrollLength,\n        scrollTopHeight: this._scrollTopHeight\n      },\n    )\n\n    /* Call speificied layout function */\n    this.options.layout(\n      layoutContext, /* context which the layout-function can use */\n      this.options.layoutOptions      /* additional layout-options */\n    )\n\n    /* Currently no support for postLayout function. TODO: Examine whether we need a postlayout function */\n\n    /* Mark non-invalidated nodes for removal */\n    this._layoutNodeManager.removeNonInvalidatedNodes(this.options.flowOptions.removeSpec)\n\n    this._normalizeSequence(scrollOffset, scrollSize)\n    this._adjustTotalHeight(scrollOffset, scrollSize)\n\n    /* Cleanup nodes */\n    this._layoutNodeManager.removeVirtualViewSequenceNodes()\n\n    this._updateThisSizeCache()\n  }\n\n  _updateThisSizeCache () {\n    let scrollLength = 0\n    let node = this._layoutNodeManager.getStartEnumNode()\n    while (node) {\n      if (node._invalidated && node.scrollLength) {\n        scrollLength += node.scrollLength\n      }\n      node = node._next\n    }\n\n    this._size = [undefined, undefined]\n    this._size[this.options.layoutDirection] = scrollLength\n  }\n\n  _adjustTotalHeight (scrollOffset, scrollSize) {\n    this._adjustDistanceToTop(scrollOffset, scrollSize)\n    this._adjustDistanceToBottom(scrollOffset, scrollSize)\n  }\n\n  _adjustDistanceToTop (scrollOffset, scrollSize) {\n    let firstNode = this._layoutNodeManager.getFirstRenderedNode()\n    /* Determine the position of the first node */\n    if (firstNode && !this._stickingToEnds.bottom) {\n      /* If this if clause is true, we need to allocate more space to scroll upwards */\n      if (this._firstNodeIndex !== 0 && scrollOffset <= this.options.layoutOptions.margins[0] && this._group.getMaxScrollOffset()) {\n        /* If we can't scroll that much, we also can't allocate too much space at the top since\n         * allocating space at top also implies scrolling down with the same amount.\n         */\n        let extraSpaceToAllocate = Math.min(scrollSize, this._group.getMaxScrollOffset())\n        this._allocateExtraHeightAtTop(extraSpaceToAllocate, scrollOffset)\n        /* If we are the first node, then redefine the top position. It can have been (over/under)estimated previously */\n        //TODO This if clause triggers too often\n      } else if (this._firstNodeIndex === 0 && (firstNode.getTranslate()[this.options.layoutDirection] + this._scrollTopHeight) !== this.options.layoutOptions.margins[0]\n      ) {\n        let newScrollTopHeight = this.options.layoutOptions.margins[0] - firstNode.getTranslate()[this.options.layoutDirection]\n        if (newScrollTopHeight > this._scrollTopHeight) {\n          let scrollTopHeightDiff = newScrollTopHeight - this._scrollTopHeight\n          this._allocateExtraHeightAtTop(scrollTopHeightDiff, scrollOffset)\n        } else {\n          this._setScrollTopHeight(newScrollTopHeight)\n        }\n      }\n    }\n  }\n\n  _adjustDistanceToBottom (scrollOffset, scrollSize) {\n    /* Determine what the point furthest away was */\n    let lastNode = this._layoutNodeManager.getLastRenderedNode()\n    if (lastNode) {\n      let bottomPosition = lastNode.getTranslate()[this.options.layoutDirection] + lastNode.scrollLength\n      /* If we are seeing the last node, then redefine the bottom position. It can have been (over/under)estimated previously */\n      if (lastNode.renderNode === this._layoutNodeManager.getLastRenderNodeInSequence()) {\n        if (bottomPosition !== this._maxKnownTranslate) {\n          this._enqueueCommitAction(this.invalidateLayout)\n          this._maxKnownTranslate = bottomPosition\n        }\n      } else {\n        this._maxKnownTranslate = Math.max(this._maxKnownTranslate, bottomPosition)\n      }\n    } else {\n      /* If there are no nodes, then the max translate should not be anywhere else than at the top */\n      this._maxKnownTranslate = 0\n    }\n  }\n\n  _allocateExtraHeightAtTop (space, scrollOffset) {\n    if (!this._allocationLock) {\n      this._allocationLock = true\n      this._setScrollTopHeight(this._scrollTopHeight + space)\n      this._otherNodes.topScroller.once('resize', () => {\n        this._group.setScrollOffset(space + this._currentScrollOffset)\n        this._allocationLock = false\n      })\n    }\n\n  }\n\n  _setScrollTopHeight (scrollTopHeight) {\n    /* TODO: If anything doesn't work well when scrolling upwards through the roof, try adding this line:\n     /* this._cachedSpecs = {} */\n\n    this._scrollTopHeight = scrollTopHeight\n    /* Negative height exists in CSS if done as negative margin-top */\n    this._otherNodes.topScroller.setProperties({'margin-top': `${scrollTopHeight < 0 ? scrollTopHeight : 0}px`})\n    this._enqueueCommitAction(this.invalidateLayout.bind(this))\n  }\n\n  /**\n   * Determines whether the user has scrolled to the bottom\n   * @returns {boolean} True if the scroll is all the way to the bottom\n   */\n  isAtBottom () {\n    return Math.floor(this._group.getScrollOffset()) >= Math.floor(this._group.getMaxScrollOffset())\n  }\n\n  isAtTop () {\n    return this._group.getScrollOffset() === 0\n  }\n\n  /**\n   * Normalizes the viewsequence so that the layout function doens't have to loop through more nodes than necessary\n   * @param {Integer} scrollOffset\n   * @param {Integer} scrollSize\n   * @returns {boolean}\n   * @private\n   */\n  _normalizeSequence (scrollOffset, scrollSize) {\n    this._previousValues.normalizedScrollOffset = scrollOffset\n    this._firstNodeIndex = this._layoutNodeManager.getFirstRenderedNodeIndex()\n    this._lastNodeIndex = this._layoutNodeManager.getLastRenderedNodeIndex()\n\n    let sequenceHead = this._viewSequence.getHead()\n    let sequenceTail = this._viewSequence.getTail()\n    /* Normalize to top to make sure that the top margin is correct */\n\n    let shouldAllowScroll = this._layoutNodeManager.getCoveredScrollHeight() >= scrollSize || !this.options.chatScrolling\n    this._group.setProperties({[`overflow${this.options.layoutDirection === 1 ? 'Y' : 'X'}`]: shouldAllowScroll ? 'scroll' : 'hidden'})\n\n    if (sequenceHead && scrollOffset <= this.options.layoutOptions.margins[0] && this._stickingToEnds.bottom) {\n      /* Make sure that we're seeing the first node and just not temporary hitting bottom*/\n      this._scrollVoidHeight = scrollSize\n    }\n    /* Normalize to bottom to make sure that the bottom margin is always correct. TODO This if-clause triggers too often. Further more, forceNormalizeBottom seems unused */\n    else if (this._forceNormalizeBottom ||\n      (sequenceTail && this._group.getMaxScrollOffset() - scrollOffset <= this.options.layoutOptions.margins[1] &&\n        /* Make sure that we're seeing the last node and just not temporary hitting bottom*/\n        (this._lastNodeIndex === Infinity || this._lastNodeIndex === sequenceTail.getIndex())\n      ) &&\n      !this._stickingToEnds.top) {\n      if (this._forceNormalizeBottom) {\n        this._forceNormalizeBottom = false\n      }\n      if (sequenceTail !== this._viewSequence) {\n        this._moveSequence(sequenceTail, true)\n        this._enqueueCommitAction(this.invalidateLayout)\n        return\n      }\n    }\n\n    /* Normalize if we are somewhere in the middle */\n    if (this._layoutNodeManager.isSequenceMoved() && !this._stickingToEnds.bottom) {\n      let isForwards = this._layoutNodeManager.getMovedSequenceDirection() === 1\n      /* Normalize scroll offset so that the current viewsequence node is as close to the\n       * top as possible and the layout function will need to process the least amount\n       * of renderables.*/\n      let normalizedStartSequence = this._layoutNodeManager.getStartSequence()\n      if (normalizedStartSequence) {\n        this._moveSequence(normalizedStartSequence, isForwards)\n        this._enqueueCommitAction(this.invalidateLayout)\n      }\n    }\n\n  }\n\n  /**\n   * Resets the sequence to the first node, as it started out\n   * @private\n   */\n  _resetSequenceToFirstNode () {\n    this._moveSequence(this._viewSequence.getHead(), false)\n  }\n\n  /**\n   * Moves the sequence to the specific node\n   * @param newSequence\n   * @param isForwards\n   * @private\n   */\n  _moveSequence (newSequence, isForwards) {\n    let node = this._layoutNodeManager.getStartEnumNode(isForwards)\n    let oldScrollVoidHeight = this._scrollVoidHeight\n    while (node && node.renderNode !== newSequence.get()) {\n      /* If there is no scrollLength, then it must be the bottomScroller, skip it */\n      if (node.scrollLength) {\n        if (isForwards) {\n          this._scrollVoidHeight += node.scrollLength || 0\n        } else {\n          this._scrollVoidHeight -= node.scrollLength || 0\n        }\n      }\n      node = isForwards ? node._next : node._prev\n    }\n    if (!isForwards) {\n      if (node) {\n        this._scrollVoidHeight -= node.scrollLength || 0\n      }\n    }\n    this._viewSequence = newSequence\n    return oldScrollVoidHeight - this._scrollVoidHeight\n  }\n\n  /* Used to return the specs by the native group */\n  _innerRender () {\n    let specsForThisCommit = {}\n    for (let [index, spec] of this._specs.entries()) {\n      if (spec.renderNode === this._otherNodes.bottomScroller ||\n        ( spec.renderNode &&\n        (!this._nodes[index].stoppedFlowing || this._nodes[index].stoppedFlowing()\n        ))\n      ) {\n        this._cachedSpecs[spec.target] = spec\n      } else {\n        specsForThisCommit[spec.target] = spec\n      }\n    }\n    Object.assign(specsForThisCommit, this._cachedSpecs)\n    let specs = Object.keys(specsForThisCommit).map((target) => specsForThisCommit[target])\n    /* Removed cleanup registration code.\n     TODO: Examine whether the cleanup registration is still necessary to add here */\n    return specs\n  }\n\n  /**\n   *  Gets the size of the scrollcontroller\n   *  */\n  getSize () {\n    return this._size || [undefined, undefined]\n  }\n\n  /**\n   * Performs enqueued functions\n   */\n\n  _performEnqueuedCommitActions () {\n    let actionsToPerform = [...this._commitActions]\n    this._commitActions = []\n    for (let action of actionsToPerform) {\n      action()\n    }\n  }\n\n  commit (context) {\n    let {size, transform} = context\n\n    this._performEnqueuedCommitActions()\n\n    let scrollOffset\n    if (this._scrollToTransitionable.isActive()) {\n      scrollOffset = this._scrollToTransitionable.get()\n      this._group.setScrollOffset(scrollOffset)\n    } else {\n      scrollOffset = this._group.getScrollOffset()\n    }\n    this._currentScrollOffset = scrollOffset\n\n    let eventData = {\n      target: this,\n      oldSize: this._previousValues.contextSize,\n      size,\n      oldScrollOffset: this._previousValues.scrollOffset,\n      scrollOffset\n    }\n    let didLayout = false\n\n    //TODO: Add events scrollstart and scrollend, or maybe not. Not sure if needed\n    if (this._isLayoutNecessary(size, scrollOffset)) {\n\n      didLayout = true\n      this._eventOutput.emit('layoutstart', eventData)\n\n      /* When the layout has changed, and we are not just scrolling,\n       * disable the locked state of the layout-nodes so that they\n       * can freely transition between the old and new state. */\n      if (this.options.flow && (this._isReflowNecessary())) {\n        /* TODO Refactor linkedViewList to support symbol.iterator so we can do for of */\n        let node = this._layoutNodeManager.getStartEnumNode()\n        while (node) {\n          if (node.releaseLock) {\n            node.releaseLock(true)\n          }\n          node = node._next\n        }\n      }\n\n      /* Perform layout */\n      this._layout(size, scrollOffset)\n    } else {\n      /* Reset the ensureVisibleRenderNode to prevent unwanted behaviour when doing replace and not finding the renderable */\n      this._ensureVisibleNode = null\n    }\n    /* Do the paper-work for creating the entire spec for the nodes */\n    //TODO See if we have to add a translate here\n    let result\n    if (this._previousValues.resultModified || didLayout) {\n      result = this._layoutNodeManager.buildSpecAndDestroyUnrenderedNodes()\n      this._nodes = result.nodes\n      this._specs = result.specs\n    }\n\n    if (result && result.modified) {\n      this._eventOutput.emit('reflow', {\n        target: this\n      })\n    }\n\n    /* Reset variables */\n    this._isDirty = false\n    this._reLayout = false\n\n    this._previousValues.scrollDelta = this._previousValues.scrollOffset ? this._previousValues.scrollOffset - scrollOffset : 0\n    this._previousValues.scrollOffset = scrollOffset\n    this._previousValues.contextSize = size\n    this._previousValues.resultModified = (result && result.modified) || didLayout\n    this._previousValues.maxKnownTranslate = this._maxKnownTranslate\n\n    if (this._stickingToEnds.bottom && !this.isAtBottom()) {\n      this.animateToTopOrBottom(true)\n    }\n\n    if (this._stickingToEnds.top && !this.isAtTop()) {\n      this.animateToTopOrBottom(false)\n    }\n\n    this._didManualScroll = false\n\n    //TODO Remove this code if we really don't want overscroll animation\n    /*/!* Check if we can scroll anywhere at all, and if the physics engine is sleeping. In that case make an overscroll\n     * animation *!/\n     if (this._physicsEngine.isSleeping() && this._group.getMaxScrollOffset()) {\n     if ((scrollOffset === 0 && this._firstNodeIndex === 0) || (this.isAtBottom() && this._lastNodeIndex === Infinity)) {\n     this._startOverscrollAnimation()\n     }\n     } else if (!this.isAtBottom() && scrollOffset !== 0) {\n     this._physicsEngine.sleep()\n     }*/\n    let extraTranslate = [0, 0, 0]\n    /* Adjust transform and size to extra bounds */\n    extraTranslate[this.options.layoutDirection] = -this.options.extraBoundsSpace[0]\n    let expandedSize = [...size]\n    expandedSize[this.options.layoutDirection] += this.options.extraBoundsSpace[0] + this.options.extraBoundsSpace[1]\n\n    if (!this._physicsEngine.isSleeping()) {\n      extraTranslate[this.options.layoutDirection] += this._scrollParticle.getPosition1D()\n    }\n\n    transform = Transform.thenMove(transform, extraTranslate)\n\n    if (didLayout) {\n      this._eventOutput.emit('layoutend', eventData)\n      /* Removed the logic for emitting pagechange, for now. TODO: Possibly, add it back */\n    }\n\n    // Return the spec\n    return {\n      transform,\n      size: expandedSize,\n      opacity: context.opacity,\n      origin: context.origin,\n      target: this._group.render()\n    }\n  }\n\n  //todo remove\n  _startOverscrollAnimation () {\n    let scrollVelocity = this._previousValues.scrollDelta / Engine.getFrameTimeDelta()\n    this._scrollParticle.setVelocity1D(Math.min(scrollVelocity, 10))\n    this._physicsEngine.wake()\n  }\n\n  render () {\n    return this._id\n  }\n\n  getID () {\n    return this._id\n  }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/core/ScrollController.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 187,
    "kind": "class",
    "name": "ScrollController",
    "memberof": "src/core/ScrollController.js",
    "static": true,
    "longname": "src/core/ScrollController.js~ScrollController",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/core/ScrollController.js",
    "importStyle": "{ScrollController}",
    "description": "Enables a native scrolling list to be rendered.",
    "lineNumber": 49,
    "interface": false,
    "extends": [
      "famous/core/View.js~FamousView"
    ]
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "_scrollVoidHeight",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_scrollVoidHeight",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "_scrollTopHeight",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_scrollTopHeight",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_previousValues",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_previousValues",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "member",
    "name": "_cachedSpecs",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_cachedSpecs",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "member",
    "name": "_stickingToEnds",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_stickingToEnds",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_commitActions",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_commitActions",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "member",
    "name": "_isDirty",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_isDirty",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "member",
    "name": "_scrollToTransitionable",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_scrollToTransitionable",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_ensureVisibleNode",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_ensureVisibleNode",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true
  },
  {
    "__docId__": 198,
    "kind": "member",
    "name": "options",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#options",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_id",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_id",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "_maxKnownTranslate",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_maxKnownTranslate",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "_otherNodes",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_otherNodes",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "type": {
      "types": [
        "{\"bottomScroller\": *, \"topScroller\": *}"
      ]
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_layoutNodeManager",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_layoutNodeManager",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_dataSource",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_dataSource",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "method",
    "name": "insert",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#insert",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "position",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "insertSpec",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 205,
    "kind": "method",
    "name": "remove",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#remove",
    "access": "public",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "params": [
      {
        "name": "position",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "_viewSequence",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_viewSequence",
    "access": "private",
    "description": null,
    "lineNumber": 175,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "replace",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#replace",
    "access": "public",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "params": [
      {
        "name": "indexOrId",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "noAnimation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "stickToBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#stickToBottom",
    "access": "public",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "stickToTopOrBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#stickToTopOrBottom",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "params": [
      {
        "name": "isBottom",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "animateToTopOrBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#animateToTopOrBottom",
    "access": "public",
    "description": "",
    "lineNumber": 242,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isBottom",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 212,
    "kind": "method",
    "name": "scrollToBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#scrollToBottom",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "_shouldIgnoreScrollEvent",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_shouldIgnoreScrollEvent",
    "access": "private",
    "description": null,
    "lineNumber": 258,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "_isPositionOutsideCurrentView",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_isPositionOutsideCurrentView",
    "access": "private",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "params": [
      {
        "name": "position",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "_accountForModificationsHappeningAtStart",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_accountForModificationsHappeningAtStart",
    "access": "private",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 216,
    "kind": "method",
    "name": "getDataSource",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#getDataSource",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "invalidateLayout",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#invalidateLayout",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "_reLayout",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_reLayout",
    "access": "private",
    "description": null,
    "lineNumber": 280,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "reflow",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#reflow",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "_initNativeScrollGroup",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_initNativeScrollGroup",
    "access": "private",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "_group",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_group",
    "access": "private",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "_onManualScrollAttempt",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_onManualScrollAttempt",
    "access": "private",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "member",
    "name": "_didManualScroll",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_didManualScroll",
    "access": "private",
    "description": null,
    "lineNumber": 310,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "_initOverScrollPhysics",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_initOverScrollPhysics",
    "access": "private",
    "description": null,
    "lineNumber": 316,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "member",
    "name": "_physicsEngine",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_physicsEngine",
    "access": "private",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "member",
    "name": "_overScrollSpring",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_overScrollSpring",
    "access": "private",
    "description": null,
    "lineNumber": 319,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "_scrollParticle",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_scrollParticle",
    "access": "private",
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "_isLayoutNecessary",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_isLayoutNecessary",
    "access": "private",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "params": [
      {
        "name": "newSize",
        "types": [
          "*"
        ]
      },
      {
        "name": "newScrollOffset",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "_isReflowNecessary",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_isReflowNecessary",
    "access": "private",
    "description": null,
    "lineNumber": 350,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "_pipeRenderableAsNecessary",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_pipeRenderableAsNecessary",
    "access": "private",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "_enqueueCommitAction",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_enqueueCommitAction",
    "access": "private",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "params": [
      {
        "name": "actionToPerform",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "_layout",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_layout",
    "access": "private",
    "description": null,
    "lineNumber": 365,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollOffset",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "_updateThisSizeCache",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_updateThisSizeCache",
    "access": "private",
    "description": null,
    "lineNumber": 415,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "member",
    "name": "_size",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_size",
    "access": "private",
    "description": null,
    "lineNumber": 425,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "_adjustTotalHeight",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_adjustTotalHeight",
    "access": "private",
    "description": null,
    "lineNumber": 429,
    "undocument": true,
    "params": [
      {
        "name": "scrollOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "_adjustDistanceToTop",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_adjustDistanceToTop",
    "access": "private",
    "description": null,
    "lineNumber": 434,
    "undocument": true,
    "params": [
      {
        "name": "scrollOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "_adjustDistanceToBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_adjustDistanceToBottom",
    "access": "private",
    "description": null,
    "lineNumber": 460,
    "undocument": true,
    "params": [
      {
        "name": "scrollOffset",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 244,
    "kind": "method",
    "name": "_allocateExtraHeightAtTop",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_allocateExtraHeightAtTop",
    "access": "private",
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "params": [
      {
        "name": "space",
        "types": [
          "*"
        ]
      },
      {
        "name": "scrollOffset",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 245,
    "kind": "member",
    "name": "_allocationLock",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_allocationLock",
    "access": "private",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 247,
    "kind": "method",
    "name": "_setScrollTopHeight",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_setScrollTopHeight",
    "access": "private",
    "description": null,
    "lineNumber": 492,
    "undocument": true,
    "params": [
      {
        "name": "scrollTopHeight",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 249,
    "kind": "method",
    "name": "isAtBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#isAtBottom",
    "access": "public",
    "description": "Determines whether the user has scrolled to the bottom",
    "lineNumber": 506,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the scroll is all the way to the bottom"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the scroll is all the way to the bottom"
    },
    "params": []
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "isAtTop",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#isAtTop",
    "access": "public",
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "method",
    "name": "_normalizeSequence",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_normalizeSequence",
    "access": "private",
    "description": "Normalizes the viewsequence so that the layout function doens't have to loop through more nodes than necessary",
    "lineNumber": 521,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollOffset",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Integer"
        ],
        "spread": false,
        "optional": false,
        "name": "scrollSize",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "_firstNodeIndex",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_firstNodeIndex",
    "access": "private",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "_lastNodeIndex",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_lastNodeIndex",
    "access": "private",
    "description": null,
    "lineNumber": 524,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "_forceNormalizeBottom",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_forceNormalizeBottom",
    "access": "private",
    "description": null,
    "lineNumber": 545,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "_resetSequenceToFirstNode",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_resetSequenceToFirstNode",
    "access": "private",
    "description": "Resets the sequence to the first node, as it started out",
    "lineNumber": 573,
    "params": [],
    "return": null
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "_moveSequence",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_moveSequence",
    "access": "private",
    "description": "Moves the sequence to the specific node",
    "lineNumber": 583,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newSequence",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isForwards",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "_innerRender",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_innerRender",
    "access": "private",
    "description": null,
    "lineNumber": 607,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "getSize",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#getSize",
    "access": "public",
    "description": " Gets the size of the scrollcontroller",
    "lineNumber": 630,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "_performEnqueuedCommitActions",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_performEnqueuedCommitActions",
    "access": "private",
    "description": "Performs enqueued functions",
    "lineNumber": 638,
    "params": [],
    "return": null
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "commit",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#commit",
    "access": "public",
    "description": null,
    "lineNumber": 646,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"transform\": *, \"size\": *, \"opacity\": *, \"origin\": *, \"target\": *}"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "_currentScrollOffset",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_currentScrollOffset",
    "access": "private",
    "description": null,
    "lineNumber": 658,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "_nodes",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_nodes",
    "access": "private",
    "description": null,
    "lineNumber": 700,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "_specs",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_specs",
    "access": "private",
    "description": null,
    "lineNumber": 701,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "_startOverscrollAnimation",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#_startOverscrollAnimation",
    "access": "private",
    "description": null,
    "lineNumber": 768,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "render",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#render",
    "access": "public",
    "description": null,
    "lineNumber": 774,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "getID",
    "memberof": "src/core/ScrollController.js~ScrollController",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/ScrollController.js~ScrollController#getID",
    "access": "public",
    "description": null,
    "lineNumber": 778,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 277,
    "kind": "file",
    "name": "src/core/View.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport extend                   from 'lodash/extend.js'\nimport cloneDeep                from 'lodash/cloneDeep.js'\nimport FamousView               from 'famous/core/View.js'\nimport {RenderablePrototype}    from 'famous/utilities/RenderablePrototype.js'\nimport LayoutController         from 'famous-flex/LayoutController.js'\nimport {Surface}                from '../surfaces/Surface.js'\nimport Engine                   from 'famous/core/Engine.js'\nimport LayoutUtility            from 'famous-flex/LayoutUtility.js';\n\nimport {limit}                  from 'arva-js/utils/Limiter.js'\n\nimport {layout}                 from '../layout/Decorators.js'\nimport {ObjectHelper}           from '../utils/ObjectHelper.js'\nimport {SizeResolver}           from '../utils/view/SizeResolver.js'\nimport {Utils}                  from '../utils/view/Utils.js'\nimport {\n    DockedLayoutHelper,\n    FullSizeLayoutHelper,\n    TraditionalLayoutHelper\n}\n    from '../utils/view/LayoutHelpers.js'\nimport {RenderableHelper} from '../utils/view/RenderableHelper.js'\nimport {ReflowingScrollView} from '../components/ReflowingScrollView.js'\nimport {MappedArray} from '../utils/view/ArrayObserver.js'\nimport {combineOptions} from '../utils/CombineOptions.js'\nimport {OptionObserver} from '../utils/view/OptionObserver.js'\n\n/**\n * An Arva View. This is the heart of Arva and responsible for providing state management and animation.\n *\n */\nexport class View extends FamousView {\n\n    /**\n     * @example\n     * HomeController extends Controller {\n     *      Index() {\n     *          let view = new View();\n     *          view.add(new Surface({properties: {backgroundColor: 'red'}}));\n     *          return view\n     *      }\n     * }\n     * @example\n     * class HomeView extends View {\n     *      @layout.size(100, 100)\n     *      @layout.stick.center()\n     *      mySurface = new Surface({properties: {backgroundColor: 'red'}})\n     * }\n     *\n     *\n     *\n     * @param {Object} options. The options passed to the view will be stored in this.options, but won't change any\n     * behaviour of the core functionality of the view. Instead, configuration of the View is done by decorators.\n     *\n     * @param children\n     */\n    constructor(options = {}, children) {\n\n        super(options);\n\n\n        this._copyPrototypeProperties();\n        this._initDataStructures();\n        this._initOwnDecorations();\n        this._initOptions(options);\n        this._initUtils();\n        this._constructDecoratedRenderables();\n\n        this._createLayoutController();\n        this._initTrueSizedBookkeeping();\n        this._setupExtraRenderables(children);\n\n    }\n\n    //noinspection JSUnusedGlobalSymbols\n    /**\n     * Deprecated, it is no longer required to call build() from within your View instances.\n     * @deprecated\n     * @returns {void}\n     */\n    build() {\n        Utils.warn(`Arva: calling build() from within views is no longer necessary, any existing calls can safely be removed. Called from ${this._name()}`)\n    }\n\n    /**\n     * Reflows the layout while also informing any subscribing parents that a reflow has to take place\n     */\n    reflowRecursively() {\n        if (!this._initialised) {\n            return;\n        }\n        this._doReflow();\n        let reflowData = {[this.getID()]: true};\n        this._eventOutput.emit('recursiveReflow', reflowData);\n    }\n\n    _doReflow() {\n        if (!this.layout) {\n            /* Reflowing before construction, no need to bother */\n            return\n        }\n        this.layout.reflowLayout()\n    }\n\n    /**\n     * Gets the size used when displaying a renderable on the screen the last tick\n     * @param {Surface|View|Name} renderableOrName The renderable or the name of the renderable of which you need the size\n     */\n    getResolvedSize(renderableOrName) {\n        let renderable = renderableOrName;\n        if (typeof renderableOrName === 'string') {\n            renderable = this.renderables[renderableOrName];\n        }\n        let size = this._sizeResolver.getResolvedSize(renderable);\n\n        /* Backup: If size can't be resolved, then see if there's a size specified on the decorator */\n        if (!size && renderable.decorations) {\n            let decoratedSize = renderable.decorations.size;\n            let isValidSize = (inputSize) => typeof inputSize === 'number' && inputSize > 0;\n            if (decoratedSize && decoratedSize.every(isValidSize)) {\n                size = decoratedSize\n            }\n        }\n\n        return size || [undefined, undefined]\n    }\n\n    /**\n     * Returns true if the view contains uncalculated surfaces\n     * @returns {Boolean}\n     */\n    containsUncalculatedSurfaces() {\n        return this._sizeResolver.containsUncalculatedSurfaces()\n    }\n\n    /**\n     * Adds a renderable to the layout.\n     * @param {Surface|FamousView|View} renderable The renderable to be added\n     * @param {Array<Function>} decorators\n     * @returns {Surface|FamousView|View} The renderable that was assigned\n     */\n    addRenderable(renderable, ...decorators) {\n        let id = Utils.getRenderableID(renderable);\n        if (!id) {\n            Utils.warn(`Could not add invalid renderable inside ${this._name()} (no ID of renderable found)`)\n        }\n        this._renderableHelper.applyDecoratorFunctionsToRenderable(renderable, decorators);\n        this._assignRenderable(renderable);\n        this[id] = renderable;\n        this.layout.reflowLayout();\n        return renderable\n    }\n\n    /**\n     * Removes the renderable from the view\n     */\n    removeRenderable(renderable) {\n        if (!renderable) {\n            return Utils.warn(`${this._name()}: Removing renderable that doesn't exist`);\n        }\n        let renderableID = Utils.getRenderableID(renderable);\n        if (!this.renderables[renderableID]) {\n            Utils.warn(`Failed to remove renderable ${renderableID} from ${this._name()} because the renderable doesn't exist in the parent scope`);\n            return\n        }\n        this._renderableHelper.removeRenderable(renderableID);\n        /* Delete operator isn't allowed here (probably) because the initializer is non-configurable */\n        this[this._IDtoLocalRenderableName[renderableID]] = undefined;\n        this.layout.reflowLayout()\n    }\n\n    hasRenderable(renderable) {\n        return !!this.renderables[Utils.getRenderableID(renderable)]\n    }\n\n    _getRenderableName(renderable) {\n        return this._IDtoLocalRenderableName[Utils.getRenderableID(renderable)]\n    }\n\n    /**\n     * Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed\n     * before 'nextRenderableName'.\n     * @param {View|Surface} renderable\n     * @param {View|Surface} nextRenderable\n     */\n    prioritiseDockBefore(renderable, nextRenderable) {\n        this.reflowRecursively();\n        return this._renderableHelper.prioritiseDockBefore(Utils.getRenderableID(renderable), Utils.getRenderableID(nextRenderable))\n    }\n\n    /**\n     * @param {View|Surface} renderable\n     * @param {View|Surface} prevRenderable\n     */\n    prioritiseDockAfter(renderable, prevRenderable) {\n        this.reflowRecursively();\n        return this._renderableHelper.prioritiseDockAfter(Utils.getRenderableID(renderable), Utils.getRenderableID(prevRenderable))\n    }\n\n    /**\n     * Shows a renderable decorated with layout.animate()\n     *\n     * @param {View|Surface} renderable\n     * @returns {Promise} when the renderable has finished its animation\n     */\n    showRenderable(renderable) {\n        return this.toggleRenderable(renderable, true)\n    }\n\n    /**\n     *\n     * @param {View|Surface} renderable\n     * @param {String }show\n     * @param {Object} options\n     * @returns {Promise}\n     */\n    async toggleRenderable(renderable, show, options = {}) {\n        if (!renderable) {\n            Utils.warn(`Trying to show renderable which does not exist! (${this._name()})`);\n            return\n        }\n        if (!renderable.animationController) {\n            if (typeof renderable === 'string') {\n                Utils.warn(`Renderable visibility function called with string argument '${renderable}'. This has been deprecated. Please refactor to this.showRenderable(this.myView) instead of this.showRenderable('myView')`);\n                return;\n            }\n            Utils.warn(`Trying to show renderable which does not have an animationcontroller. Please use @layout.animate`);\n            return;\n        }\n\n        if (show === undefined) {\n            /* If show is not specified, it will switch the renderable to the opposite of the current state */\n            show = !this.isRenderableShowing(renderable)\n        }\n\n        let decoratedSize = renderable.decorations.size || (renderable.decorations.dock ? renderable.decorations.dock.size : undefined);\n        if (decoratedSize) {\n            /* Check if animationController has a true size specified. If so a reflow needs to be performed since there is a\n             * new size to take into account. */\n            for (let dimension of [0, 1]) {\n                if (this._sizeResolver.isValueTrueSized(this._sizeResolver.resolveSingleSize(decoratedSize[dimension], [NaN, NaN], dimension))) {\n                    this.reflowRecursively();\n                    break\n                }\n\n            }\n        }\n\n        return await new Promise((resolve) => this._renderableHelper.showWithAnimationController(renderable.animationController, renderable, resolve, show, options))\n    }\n\n    /**\n     * Returns true if animation-controlled renderable is showing\n     * @param {View|Surface} renderable\n     * @returns {*}\n     */\n    isRenderableShowing(renderable) {\n        if (!renderable.animationController) {\n            Utils.warn(`Trying to get visibility of renderable with no @layout.aniamte specified`);\n            return true\n        }\n        return renderable.animationController.get()\n    }\n\n    /**\n     * Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.\n     * @example\n     * this.decorateRenderable('myRenderable',layout.size(100, 100));\n     *\n     * @param renderable\n     * @param decorators\n     */\n    decorateRenderable(renderable, ...decorators) {\n        if (typeof renderable === 'string') {\n            Utils.warn(`decorateRenderable called with string argument. Please use this.decorateRenderable(this[renderableName],...) instead of this.decorateRenderable(renderableName,...)`);\n            return;\n        }\n        if (!decorators.length) {\n            Utils.warn('No decorators specified to decorateRenderable(renderable, ...decorators)')\n        }\n        this._renderableHelper.decorateRenderable(Utils.getRenderableID(renderable), ...decorators);\n        this.reflowRecursively()\n    }\n\n    /**\n     * Sets a renderable flow state as declared in the @flow.stateStep, or @flow.defaultState\n     * @param {View|Surface} renderable. The name of the renderable\n     * @param {String} stateName. The name of the state as declared in the first argument of the decorator\n     * @returns {*}\n     */\n    setRenderableFlowState(renderable, stateName = '') {\n        return this._renderableHelper.setRenderableFlowState(Utils.getRenderableID(renderable), stateName)\n    }\n\n    /**\n     * Sets a view flow state as declared in the @flow.viewState\n     * @param {String} stateName. The name of the state as declared in the first argument of the decorator\n     * @returns {Promise}\n     */\n    setViewFlowState(stateName = '') {\n        this._eventOutput.emit('viewFlowStateChanged', stateName);\n        if (!this.decorations.viewFlow.viewStates[stateName]) {\n            Utils.warn(`Trying to to set flow state ${this._name()}:${stateName}, which doesn't exist!`);\n            return Promise.resolve()\n        }\n        return this._renderableHelper.setViewFlowState(stateName, this.decorations.viewFlow)\n    }\n\n    /**\n     * Gets the name of a flow state of a renderable.\n     *\n     * @returns {String} stateName the name of the state that the renderable is in\n     * @param renderable\n     */\n    getRenderableFlowState(renderable) {\n        return this._renderableHelper.getRenderableFlowState(Utils.getRenderableID(renderable))\n    }\n\n    /**\n     * Gets the name of the flow state of a view.\n     *\n     * @returns {String} stateName the name of the state that this view is in.\n     */\n    getViewFlowState() {\n        return this._renderableHelper.getViewFlowState(this.decorations.viewFlow)\n    }\n\n    /**\n     * Replaces an existing decorated renderable with a new renderable, preserving all necessary state and decorations\n     * @param {View|Surface} oldRenderable. The name of the renderable\n     * @param {Surface|FamousView|View} newRenderable Renderable to replace the old renderable with\n     */\n    replaceRenderable(oldRenderable, newRenderable) {\n        let oldRenderableID = Utils.getRenderableID(oldRenderable),\n            newRenderableID = Utils.getRenderableID(newRenderable);\n        this._renderableHelper.replaceRenderable(oldRenderableID, newRenderable, Utils.getRenderableID(newRenderable));\n        let localRenderableName = this._IDtoLocalRenderableName[newRenderableID] = this._IDtoLocalRenderableName[oldRenderableID];\n        this.reflowRecursively();\n        this[localRenderableName] = newRenderable;\n        delete this._IDtoLocalRenderableName[oldRenderableID];\n    }\n\n    /**\n     * Gets the scroll view that was set if @layout.scrollable was used on the view\n     * @returns {ReflowingScrollView}\n     */\n    getScrollView() {\n        return this._scrollView;\n    }\n\n    /**\n     * Binds the options passed to the specific view class\n     * @param options\n     * @returns {RenderablePrototype}\n     */\n    static with(options, children) {\n        return new RenderablePrototype(this, options, children);\n    }\n\n    /**\n     * getSize() is called by this view and by layoutControllers. For lazy people that don't want to specifiy their own getSize() function,\n     * we provide a fallback. This function can be performance expensive when using non-docked renderables, but for docked renderables it\n     * is efficient and convenient]\n     * @returns {*[]}\n     */\n    getSize() {\n        return this._getLayoutSize()\n    }\n\n    /**\n     * Hides a renderable that has been declared with @layout.animate\n     * @returns {Promise} when the renderable has finished its animation\n     * @param renderable\n     * @param [options]\n     */\n    hideRenderable(renderable, options = {}) {\n        return this.toggleRenderable(renderable, false, options)\n    }\n\n    /**\n     * Gets the \"actual\" renderable as being outputted, based on the renderable passed. This can be\n     * same as the assigned renderable in many cases, but different in some cases, such as with the\n     * animation controller or draggable\n     *\n     * @param renderable\n     * @returns {*}\n     */\n    getActualRenderable(renderable) {\n        return this.renderables[Utils.getRenderableID(renderable)]\n    }\n\n\n    /**\n     * Returns true if size is fully settled\n     * @returns {boolean}\n     */\n    isSizeSettled() {\n        if (this._sizeResolver.containsUncalculatedSurfaces()) {\n            return false\n        }\n        for (let renderableName in this.renderables) {\n            let renderable = this.renderables[renderableName];\n            if (!this._sizeResolver.isSizeFinal(renderable)) {\n                return false\n            }\n        }\n        return true\n    }\n\n    /**\n     * Repeat a certain flowState indefinitely\n     * @param renderable\n     * @param stateName\n     * @param {Boolean} persistent. If true, then it will keep on repeating until explicitly cancelled by cancelRepeatFlowState.\n     * If false, it will be interrupted automatically by any interrput to another state. Defaults to true\n     * @returns {Promise} resolves to false if the flow state can't be repeated due to an existing running repeat\n     */\n    async repeatFlowState(renderable, stateName = '', persistent = true) {\n        let renderableID = Utils.getRenderableID(renderable);\n        if (!this._runningRepeatingFlowStates[renderableID]) {\n            this._runningRepeatingFlowStates[renderableID] = {persistent};\n            while (this._runningRepeatingFlowStates[renderableID] && (await this.setRenderableFlowState(renderable, stateName) || persistent)) {\n            }\n            delete this._runningRepeatingFlowStates[renderableID];\n            return true\n        } else {\n            return false\n        }\n    }\n\n    /**\n     * Cancel a repeating renderable. This will cancel the animation for next flow-cycle, it won't interject the current animation cycle.\n     * @param renderable\n     */\n    cancelRepeatFlowState(renderable) {\n        if (this._runningRepeatingFlowStates) {\n            delete this._runningRepeatingFlowStates[Utils.getRenderableID(renderable)];\n        }\n    }\n\n    /**\n     * Initiate a renderable to a default flow state.\n     * @param renderable\n     * @param stateName\n     */\n    setDefaultState(renderable, stateName) {\n        for (let step of this[this._getRenderableName(renderable)].decorations.flow.states[stateName].steps) {\n            this.decorateRenderable(renderable, ...step.transformations);\n        }\n    }\n\n    /**\n     * Returns true if the view is currently displaying\n     * @returns {boolean}\n     */\n    isDisplaying() {\n        return this.layout.isDisplaying();\n    }\n\n    /**\n     * Set a maximum width of the view\n     * @param {Number} width\n     */\n    setMaxContentWidth(width) {\n        if (this.decorations.dynamicDockPadding) {\n            this.onNewSize((size) => {\n                this.decorations.viewMargins = this.decorations.dynamicDockPadding(size, width);\n                this.reflowRecursively();\n            });\n            const sizeCache = this.layout._contextSizeCache;\n            const alteredSizeCache = [\n                sizeCache[0] + 1,\n                sizeCache[1] + 1\n            ];\n            this.layout._eventOutput.emit('sizeChanged', {\n                oldSize: sizeCache,\n                size: alteredSizeCache\n            });\n        } else {\n            let defaultPadding = [0, 16, 0, 16];\n            let normalisedPadding = LayoutUtility.normalizeMargins(defaultPadding);\n            this.decorations.dynamicDockPadding = function (size, newWidth = width) {\n                let sideWidth = size[0] > newWidth + 32 ? (size[0] - newWidth) / 2 : normalisedPadding[1];\n                return [normalisedPadding[0], sideWidth, normalisedPadding[2], sideWidth];\n            };\n\n            this.setMaxContentWidth(width);\n        }\n    }\n\n    /**\n     * Inits the utils that are used as helper classes for the view\n     * @private\n     */\n    _initUtils() {\n        this._sizeResolver = new SizeResolver();\n        this._sizeResolver.on('layoutControllerReflow', this._requestLayoutControllerReflow.bind(this));\n        this._sizeResolver.on('reflow', () => this.layout.reflowLayout());\n        this._sizeResolver.on('reflowRecursively', this.reflowRecursively.bind(this));\n        this._dockedRenderablesHelper = new DockedLayoutHelper(this._sizeResolver);\n        this._fullSizeLayoutHelper = new FullSizeLayoutHelper(this._sizeResolver);\n        this._traditionalLayoutHelper = new TraditionalLayoutHelper(this._sizeResolver);\n        this._renderableHelper = new RenderableHelper(\n            this._bindToSelf.bind(this),\n            this._setPipeToSelf.bind(this),\n            this._getIDFromLocalName.bind(this),\n            this.renderables,\n            this._sizeResolver);\n    }\n\n\n    /** Requests for a parent LayoutController trying to resolve the size of this view\n     * @private\n     */\n    _requestLayoutControllerReflow() {\n        this._nodes = {_trueSizeRequested: true};\n        //TODO: Do we really need to emit this?\n        this._eventOutput.emit('layoutControllerReflow')\n    }\n\n    /**\n     * Construct all the renderables that have been decorated in the class.\n     * @private\n     */\n    _constructDecoratedRenderables() {\n\n        let classConstructorList = [];\n\n        /* Reverse the class list because it makes more sense to make the renderables of the parent before the renderables\n         * of this view\n         */\n        for (let currentClass = this; currentClass.__proto__.constructor !== View; currentClass = Object.getPrototypeOf(currentClass)) {\n            classConstructorList.push(currentClass.__proto__.constructor)\n        }\n        classConstructorList.reverse();\n\n        /*\n         * Loop through the constructors to do the initial setup of the renderables\n         */\n        for (let currentClassConstructor of classConstructorList) {\n            let renderableConstructors = this.renderableConstructors.get(currentClassConstructor);\n            for (let localRenderableName in renderableConstructors) {\n                let renderableConstructor = renderableConstructors[localRenderableName];\n\n                /* Assign to the 'flat' structure renderableConstructors */\n                this._renderableConstructors[localRenderableName] = renderableConstructor;\n                let {decorations} = renderableConstructor;\n                renderableConstructor.localName = localRenderableName;\n                this._setupRenderable(renderableConstructor, decorations);\n            }\n        }\n    }\n\n    /**\n     * Assigns a renderable to this view, without setting this[renderableName]\n     * @param {Surface|FamousView|View} renderable the renderable that is going to be added\n     * @private\n     */\n    _assignRenderable(renderable) {\n        this._renderableHelper.assignRenderable(renderable, Utils.getRenderableID(renderable));\n        if (Utils.renderableIsSurface(renderable)) {\n            let sizeSpecification =\n                (renderable.decorations.dock && renderable.decorations.dock.size) ||\n                renderable.decorations.size;\n            if (sizeSpecification && (sizeSpecification[0] === true || sizeSpecification[1] === true)) {\n                this._sizeResolver.configureTrueSizedSurface(\n                    renderable,\n                    sizeSpecification\n                )\n            }\n        }\n    }\n\n    /**\n     *\n     * @param context\n     * @private\n     */\n    _layoutDecoratedRenderables(context) {\n        let groupedRenderables = this._renderableHelper;\n        let nativeScrollableOptions = this.decorations.nativeScrollable;\n        if (nativeScrollableOptions) {\n            let thisSize = this.getSize();\n            context.size = context.size.map((size, index) =>\n                (nativeScrollableOptions[`scroll${index === 0 ? 'X' : 'Y'}`] && Math.max(thisSize[index], size)) || size)\n        }\n        this._renderableHelper.flushTransitions(context);\n        this._dockedRenderablesHelper.layout(groupedRenderables.getRenderableGroup('docked'), groupedRenderables.getRenderableGroup('filled'), context, this.decorations);\n        this._fullSizeLayoutHelper.layout(groupedRenderables.getRenderableGroup('fullSize'), context, this.decorations);\n        this._traditionalLayoutHelper.layout(groupedRenderables.getRenderableGroup('traditional'), context, this.decorations)\n    }\n\n    /**\n     * Combines all layouts defined in subclasses of the View into a single layout for the LayoutController.\n     * @returns {void}\n     * @private\n     */\n    _createLayoutController() {\n        let hasFlowyRenderables = this._renderableHelper.hasFlowyRenderables();\n        this.layout = new LayoutController({\n            flow: !!this.decorations.useFlow || hasFlowyRenderables,\n            partialFlow: true,\n            nativeScroll: !!this.decorations.nativeScrollable,\n            perspective: !!this.decorations.perspective,\n            flowOptions: this.decorations.flowOptions || {spring: {period: 200}},\n            layout: function (context, options) {\n\n                /* Because views that extend this View class first call super() and then define their renderables,\n                 * we wait until the first engine render tick to add our renderables to the layout, when the view will have declared them all.\n                 * layout.setDataSource() will automatically pipe events from the renderables to this View. */\n                if (!this._initialised) {\n                    this.layout.setDataSource(this.renderables);\n                    this._renderableHelper.pipeAllRenderables();\n                    this._renderableHelper.initializeAnimations();\n                    this._initialised = true;\n                    this.layout.reflowLayout();\n\n                    /*\n                     * When the data source is set, it will not be reflected in the context yet because the layout is already\n                     * prepared for the previous (empty) renderable data source. Therefore, it's a waste of resources\n                     * and mysterious bugs to continue. We will wait for the next rendering cycle. However, if views\n                     * are only having decorated renderables, then we don't have to do this whatsoever\n                     */\n                    return\n                }\n\n                /* Layout all renderables that have decorators (e.g. @someDecorator) */\n                this._layoutDecoratedRenderables(context, options);\n                if (this.decorations.customLayoutFunction) {\n                    this.decorations.customLayoutFunction(context)\n                }\n\n                this._doTrueSizedSurfacesBookkeeping();\n\n                /* Legacy context.set() based layout functions */\n                if (this.layouts.length) {\n                    this._callLegacyLayoutFunctions(context, options)\n                }\n            }.bind(this)\n        });\n\n        this.layout.__hiddenViewName__ = this._name();\n\n        this._eventInput.on('recursiveReflow', (reflowData) => {\n            /* Modify the reflow data so that it's clear what things have been reflown */\n            reflowData[this.getID()] = true;\n            this._doReflow();\n        });\n\n        /* Add the layoutController to this View's rendering context. */\n        this._prepareLayoutController();\n\n        if ((this.decorations.scrollableOptions || this.decorations.nativeScrollable) && !this._renderableHelper.getRenderableGroup('fullSize')) {\n            this.addRenderable(new Surface(), layout.fullSize().translate(0, 0, -10))\n        }\n    }\n\n    getID() {\n        return this.layout.id\n    }\n\n    /**\n     * Layout all renderables that have explicit context.set() calls in this View's legacy layout array.\n     * @returns {void}\n     * @private\n     */\n    _callLegacyLayoutFunctions(context, options) {\n        for (let layout of this.layouts) {\n            try {\n                switch (typeof layout) {\n                    case 'function':\n                        layout.call(this, context, options);\n                        break;\n                    default:\n                        Utils.warn(`Unrecognized layout specification in view '${this._name()}'.`);\n                        break\n                }\n            } catch (error) {\n                Utils.warn(`Exception thrown in ${this._name()}:`);\n                console.log(error)\n            }\n        }\n    }\n\n    /**\n     * Either adds this.layout (a LayoutController) to the current View, or a FlexScrollView containing this.layout if this view\n     * has been decorated with a @scrollable.\n     * @returns {void}\n     * @private\n     */\n    _prepareLayoutController() {\n        let {scrollableOptions} = this.decorations;\n        if (scrollableOptions) {\n            this._scrollView = new ReflowingScrollView(scrollableOptions);\n            this.layout.getSize = this.getSize.bind(this);\n            this._scrollView.push(this.layout);\n            this.pipe(this._scrollView);\n            this.add(this._scrollView);\n        }\n        else {\n            this.add(this.layout)\n        }\n    }\n\n    /**\n     * Calculates the total height of the View's layout when it's embedded inside a FlexScrollView (i.e. @scrollable is set on the View),\n     * by iterating over each renderable inside the View, and finding the minimum and maximum y values at which they are drawn.\n     *\n     *\n     * @returns {*[]}\n     * @private\n     */\n    _getLayoutSize() {\n        let dockedRenderables = this._renderableHelper.getRenderableGroup('docked');\n        let traditionalRenderables = this._renderableHelper.getRenderableGroup('traditional');\n        let filledRenderables = this._renderableHelper.getRenderableGroup('filled');\n        if (!traditionalRenderables && !dockedRenderables) {\n            return [undefined, undefined]\n        }\n        let totalSize = [undefined, undefined];\n        if (dockedRenderables || filledRenderables) {\n            totalSize = this._dockedRenderablesHelper.boundingBoxSize(dockedRenderables, filledRenderables, this.decorations)\n        }\n\n        if (traditionalRenderables) {\n            let traditionalRenderablesBoundingBox = this._traditionalLayoutHelper.boundingBoxSize(traditionalRenderables);\n            for (let [dimension, singleSize] of totalSize.entries()) {\n                let traditionalSingleSize = traditionalRenderablesBoundingBox[dimension];\n                if (traditionalSingleSize !== undefined && (singleSize === undefined || singleSize < traditionalSingleSize)) {\n                    totalSize[dimension] = traditionalSingleSize\n                }\n            }\n        }\n        return totalSize\n\n    }\n\n    /**\n     * Retrieves the class name of the subclass View instance.\n     * @returns {string}\n     * @private\n     */\n    _name() {\n        return Object.getPrototypeOf(this).constructor.name\n    }\n\n    /**\n     * Copies prototype properties set by decorators to this\n     * @private\n     */\n    _copyPrototypeProperties() {\n        let prototype = Object.getPrototypeOf(this);\n\n        /* Move over all renderable- and decoration information that decorators.js set to the View prototype */\n        for (let name of ['decorationsMap', 'renderableConstructors']) {\n            this[name] = cloneDeep(prototype[name]) || new Map()\n        }\n    }\n\n    /**\n     * Inits the decorations that is set on a class level\n     * @private\n     */\n    _initOwnDecorations() {\n\n        for (let currentClass = this; currentClass.__proto__.constructor !== View; currentClass = Object.getPrototypeOf(currentClass)) {\n            /* The close the decoration is to this constructor in the prototype chain, the higher the priority */\n            let decorations = this.decorationsMap.get(currentClass.__proto__.constructor);\n            this._extendFromDynamicFunctions(decorations);\n            for (let property in decorations) {\n                let decoration = decorations[property];\n                if (!(property in this.decorations)) {\n                    this.decorations[property] = decoration;\n                } else if (property === 'defaultOptions' && this.decorations.defaultOptions) {\n                    this.decorations.defaultOptions = combineOptions(decoration, this.decorations.defaultOptions);\n                } else if (property === 'bindingTriggers') {\n                    this.decorations.bindingTriggers.push(...decoration);\n                }\n            }\n        }\n\n        if (this.decorations.dynamicDockPadding) {\n            this.onNewSize((size) => this.decorations.viewMargins = this.decorations.dynamicDockPadding(size))\n        }\n\n        if (!this.decorations.extraTranslate) {\n            this.decorations.extraTranslate = [0, 0, 10]\n        }\n\n        this._initBindingsTriggers();\n    }\n\n    onNewSize(callback) {\n        this.on('newSize', callback, {propagate: false});\n    }\n\n    onceNewSize(callback) {\n        this.once('newSize', callback);\n    }\n\n    setNewOptions(options) {\n        this._optionObserver.recombineOptions(options);\n        this._setupExtraRenderables();\n    }\n\n    setNewChildren(children) {\n        this._setupExtraRenderables(children);\n    }\n\n    _doTrueSizedSurfacesBookkeeping() {\n        this._nodes._trueSizeRequested = false\n    }\n\n    _initTrueSizedBookkeeping() {\n        this.layout.on('sizeChanged', ({oldSize, size}) => {\n            if (size[0] !== oldSize[0] ||\n                size[1] !== oldSize[1]) {\n                this._sizeResolver.doTrueSizedBookkeeping();\n                this._eventOutput.emit('newSize', size);\n            }\n        });\n        /* Hack to make the layoutcontroller reevaluate sizes on resize of the parent */\n        this._nodes = {_trueSizedRequested: false}\n        /* This needs to be set in order for the LayoutNodeManager to be happy */\n    }\n\n    _initOptions(options) {\n        if (!Utils.isPlainObject(options)) {\n            Utils.warn(`View ${this._name()} initialized with invalid non-object arguments`)\n        }\n        let {defaultOptions = {}} = this.decorations;\n\n        /**\n         * A copy of the options that were passed in the constructor\n         *\n         * @type {Object}\n         */\n        this._optionObserver = new OptionObserver(defaultOptions, options, this._bindingTriggers, this._name());\n        /* Call setup function after initialize to prevent problems when this._optionObserver is undefined inside setup */\n        this._optionObserver.setup();\n        this._optionObserver.on('needUpdate', (renderableName) =>\n            this._setupRenderable(this._renderableConstructors[renderableName], this._renderableConstructors[renderableName].decorations)\n        );\n        this.options = this._optionObserver.getOptions()\n    }\n\n    _initDataStructures() {\n        /**\n         * The renderables \"outputted\" by the view that are passed to the underlying famous-flex layer\n         *\n         * @type {Object}\n         */\n        this.renderables = {};\n        this._IDtoLocalRenderableName = {};\n        if (!this.layouts) {\n            /**\n             * @deprecated\n             *`\n             * The old way of setting the spec of the renderables created by adding renderables through\n             * `this.renderables.myRenderable = ....\n             *\n             * @type {Array|Function}\n             */\n            this.layouts = []\n        }\n\n        if (!this.decorations) {\n            this.decorations = {}\n        }\n\n        this._runningRepeatingFlowStates = {};\n        this._renderableConstructors = {};\n\n        this._bindingTriggers = [];\n\n    }\n\n    /**\n     * Binds the method to this view. Used by the util DecoratedRenderables\n     * @param {Function} method The method that is about to be bound\n     * @returns {*}\n     * @private\n     */\n    _bindToSelf(method) {\n        return method.bind(this)\n    }\n\n    /**\n     * Pipes a renderable to this view. Used by the util DecoratedRenderables\n     * @param {View|Surface} renderable\n     * @param {Boolean} enable set to false to unpipe\n     * @returns {Boolean} true if piping was successful, otherwise false\n     * @private\n     */\n    _setPipeToSelf(renderable, enable = true) {\n        let methodName = enable ? 'pipe' : 'unpipe';\n        /* Auto pipe events from the renderable to the view */\n        if (renderable && renderable[methodName]) {\n            /*\n             * We see it as a bit of a mystery why the piping needs to be done both to this and this._eventOutput,\n             * but they both seem to be necessary so I'm gonna leave it for now.\n             */\n            renderable[methodName](this);\n            renderable[methodName](this._eventOutput);\n            return true\n        }\n        return false\n    }\n\n    /**\n     * Sets up a renderable when it is invalidated to be re-rendered (happens on creation too)\n     * @param {Function} renderableInitializer\n     * @param decorations\n     * @returns {*}\n     * @private\n     */\n    _setupRenderable(renderableInitializer, decorations) {\n        /* Re-assign the options to make sure they're up to date */\n        this.options = this._optionObserver.options;\n        //todo clean up this function, it's too long!!\n        if (!decorations) {\n            decorations = currentRenderable && currentRenderable.decorations\n        }\n\n        let decoratorFunctions = decorations &&\n            decorations.dynamicFunctions\n            || [];\n\n        let localRenderableName = renderableInitializer.localName;\n        let currentRenderable = this[localRenderableName];\n        let renderable;\n        let dynamicDecorations = [];\n        let renderableIsArray = false;\n        this._optionObserver.recordForRenderable(localRenderableName, () => {\n            /* Make sure we have proper this scoping inside the initializer */\n            renderable = renderableInitializer.call(this, this.options);\n\n            /* Call the dynamic decorations, while we're recording */\n            dynamicDecorations = decoratorFunctions.map((dynamicDecorator) => dynamicDecorator(this.options));\n\n            /* Allow class property to be a function that returns a renderable */\n            if (typeof renderable === 'function') {\n                let factoryFunction = renderable;\n                renderable = factoryFunction(this.options);\n            }\n\n            if (Array.isArray(renderable)) {\n                renderableIsArray = true;\n                let renderables = renderable instanceof MappedArray ? renderable.getArray() : renderable;\n                if (currentRenderable && !Array.isArray(currentRenderable)) {\n                    throw new Error('Cannot dynamically reassign renderable to array')\n                }\n                let currentRenderables = currentRenderable || [];\n\n                let index, totalLength = renderables.length;\n\n                if (!renderables.length) {\n                    /* Insert an empty surface in order to preserver order of the sequence of (docked) renderables\n                     * TODO: This is dirty but seemingly inevitable, think of other solutions */\n                    let placeholderRenderable = Surface.with();\n                    renderables = [placeholderRenderable];\n                    dynamicDecorations = () =>\n                        layout.dock.left(0).size(0)\n\n                }\n\n                let actualRenderables = new Array(totalLength);\n                let dockedRenderables = this._renderableHelper.getRenderableGroup('docked');\n                for (index = 0; index < renderables.length; index++) {\n                    actualRenderables[index] = this._arrangeRenderableAssignment(currentRenderables[index],\n                        renderables[index],\n                        dynamicDecorations,\n                        localRenderableName,\n                        decorations,\n                        true);\n                    if (index) {\n                        if (dockedRenderables && dockedRenderables.has(Utils.getRenderableID(actualRenderables[index]))) {\n                            /* Make sure that the order is correct */\n                            this.prioritiseDockAfter(actualRenderables[index], actualRenderables[index - 1])\n                        }\n                    }\n                }\n\n\n                for (; index < currentRenderables.length; index++) {\n                    this.removeRenderable(currentRenderables[index])\n                }\n\n                this._readjustRenderableInitializer(localRenderableName);\n                this[localRenderableName] = actualRenderables\n            }\n\n            if (!renderableIsArray) {\n                this._arrangeRenderableAssignment(currentRenderable, renderable, dynamicDecorations, localRenderableName, decorations)\n            }\n\n            return renderable;\n        });\n        if (dynamicDecorations.length) {\n            this._doReflow();\n        }\n\n\n        return renderable;\n    }\n\n    /**\n     *\n     * @param renderable\n     * @param {String} [localRenderableName]\n     * @param decorations\n     * @param {Boolean} isArray If set to true, renderable is array and actions will be taken accordingly\n     * @private\n     */\n    _assignNewRenderable(renderable, localRenderableName, decorations, isArray) {\n\n        let renderableID = Utils.getRenderableID(renderable);\n\n        if (localRenderableName) {\n            this._IDtoLocalRenderableName[renderableID] = localRenderableName\n        }\n\n        /* Allow decorated class properties to be set to false, null, or undefined, in order to skip rendering */\n        if (!renderable) {\n            return\n        }\n\n        renderable.decorations = decorations;\n\n        if (!isArray) {\n            this._readjustRenderableInitializer(localRenderableName);\n            this[localRenderableName] = renderable\n        }\n        this._assignRenderable(renderable)\n    }\n\n    _getIDFromLocalName(localName) {\n        return Utils.getRenderableID(this[localName])\n    }\n\n    /**\n     *\n     * @param oldRenderable\n     * @param newRenderable\n     * @param dynamicDecorations\n     * @param {String} [localRenderableName]\n     * @param {Object} decorations\n     * @param {Boolean} isArray\n     * @returns {View|Surface}\n     * @private\n     */\n    _arrangeRenderableAssignment(oldRenderable, newRenderable, dynamicDecorations, localRenderableName, decorations, isArray = false) {\n        if (!newRenderable) {\n            if (oldRenderable) {\n                this.removeRenderable(oldRenderable);\n                /* Removing a renderable is likely to cause a size change, so emit to notify parents */\n                this.reflowRecursively()\n            }\n            return newRenderable\n        }\n        let renderablePrototype = newRenderable instanceof RenderablePrototype && newRenderable;\n        if (renderablePrototype) {\n            let {options, type, children} = renderablePrototype;\n            if (oldRenderable && oldRenderable.constructor === type && oldRenderable.setNewOptions) {\n                oldRenderable.setNewOptions(options);\n                if (children) {\n                    oldRenderable.setNewChildren(children);\n                }\n                newRenderable = oldRenderable;\n                this._renderableHelper.decorateRenderable(\n                    Utils.getRenderableID(newRenderable),\n                    ...dynamicDecorations,\n                    ...renderablePrototype.getDirectlyAppliedDecoratorFunctions()\n                );\n                return newRenderable\n            }\n            /* If there wasn't any function to adjust the options, we have to start over from scratch! */\n            newRenderable = new type(options, children);\n        }\n\n        decorations = this._cloneDecorationsForRenderable(decorations, newRenderable);\n\n        if (renderablePrototype) {\n            this._renderableHelper.applyDirectDecoratorsFromRenderablePrototype(decorations, renderablePrototype);\n        }\n\n\n        this._renderableHelper.applyDecoratorFunctionsToRenderable({decorations}, dynamicDecorations);\n        if (oldRenderable) {\n            this.replaceRenderable(oldRenderable, newRenderable);\n            if (!this._initialised) {\n                /* Edge case: If we are replacing a renderable when constructing, that means that a property with the same\n                 * name has been redefined for the child class that had a parent class (they both defined a renderable with the same name).\n                 * If this happens, we need to call the function for readjustment, in order not to construct the renderable a third\n                 * time. TODO: Consider not supporting this and throw an error instead\n                 */\n                this._readjustRenderableInitializer(localRenderableName);\n            }\n            /* This is a very inefficient of keeping the current decorators. That's why .with should be used at all times possible */\n            this._renderableHelper.applyDecoratorObjectToRenderable(Utils.getRenderableID(newRenderable), decorations);\n        } else {\n            this._assignNewRenderable(newRenderable, localRenderableName, decorations, isArray)\n        }\n        return newRenderable\n    }\n\n    /**\n     * Resets the initializer for a class property\n     * @param {String} localRenderableName\n     * @private\n     */\n    _readjustRenderableInitializer(localRenderableName) {\n        /* If there is no initializer declared for the renderable, that could mean that the renderable has been\n         * passed \"from above\" through the children argument. No action needed */\n        if (!this._renderableConstructors[localRenderableName]) {\n            return\n        }\n        /* Since after constructor() of this View class is called, all decorated renderables will\n         * be attempted to be initialized by Babel / the ES7 class properties spec, we'll need to\n         * override the descriptor get/initializer to return this specific instance once.\n         *\n         * If we don't do this, the View will have its renderables overwritten by new renderable instances\n         * that don't have constructor.options applied to them correctly. If we always return this specific instance\n         * instead of only just once, any instantiation of the same View class somewhere else in the code will refer\n         * to the renderables of this instance, which is unwanted.\n         */\n        let {descriptor} = this._renderableConstructors[localRenderableName].decorations;\n        if (descriptor) {\n            if (descriptor.initializer) {\n                descriptor.initializer = function () {\n                    return this[localRenderableName]\n                }.bind(this)\n            }\n        }\n    }\n\n    _setupExtraRenderables(extraLayout = {}) {\n        if (!extraLayout.renderableConstructors) {\n            return;\n        }\n        let {value: [, extraRenderableInitializers]} = extraLayout.renderableConstructors.entries().next();\n        for (let localRenderableName in extraRenderableInitializers) {\n            let renderableInitializer = extraRenderableInitializers[localRenderableName];\n            this._arrangeRenderableAssignment(this[localRenderableName], renderableInitializer(),\n                renderableInitializer.decorations && renderableInitializer.decorations.dynamicFunctions || [],\n                localRenderableName, renderableInitializer.decorations)\n        }\n    }\n\n    /**\n     * Clones decorations for renderable, to make sure that shared decorations structures don't affect each other\n     *\n     * @param decorations\n     * @param renderable\n     * @returns {*}\n     * @private\n     */\n    _cloneDecorationsForRenderable(decorations, renderable) {\n        /* Clone the decorator properties, because otherwise every view of the same type willl share them between\n         * the same corresponding renderable. TODO: profiling reveals that cloneDeep affects performance\n         */\n        return cloneDeep(extend({}, decorations, renderable.decorations || {}));\n    }\n\n    /**\n     * Initializes the part of the decorations object that contains the binding trigger functions\n     * @private\n     */\n    _initBindingsTriggers() {\n        let {bindingTriggers = []} = this.decorations;\n\n        for (let [index, {triggerMethod, name}] of bindingTriggers.entries()) {\n            this[name] = () => {\n                return this._optionObserver.triggerMethodForIndex(this.options, index);\n            };\n\n            /* TODO Think of a more clever solution than receiving the optionObserver as an argument */\n            this._bindingTriggers.push((optionObserver) => {\n                this.options = optionObserver.getOptions();\n                /* TODO: Change this to a getter function or at least figure out a plan how to handle default options */\n                triggerMethod.call(this, this.options, optionObserver.defaultOptions);\n            });\n        }\n\n    }\n\n    /**\n     *\n     * @param decorations\n     * @private\n     */\n    _extendFromDynamicFunctions(decorations = {}) {\n        let {dynamicFunctions} = decorations;\n        for (let dynamicFunction of dynamicFunctions || []) {\n            dynamicFunction(this.options)({prototype: {decorationsMap: {get: () => decorations}}});\n        }\n    }\n\n    async whenFlowFinished(renderable) {\n        await this._optionObserver.whenSettled();\n        /* If the renderable doesn't exist (yet), this means that we shouldn't continue */\n        if (!renderable) {\n            return;\n        }\n        await this._renderableHelper.waitForRenderableTransition(Utils.getRenderableID(renderable));\n        await this._optionObserver.whenSettled();\n    }\n\n    static empty() {\n        //TODO Think of a more performant solution\n        return Surface.with();\n    }\n\n    get inputOptions() {\n        return this._optionObserver.getInputOptions();\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/core/View.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "View",
    "memberof": "src/core/View.js",
    "static": true,
    "longname": "src/core/View.js~View",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/core/View.js",
    "importStyle": "{View}",
    "description": "An Arva View. This is the heart of Arva and responsible for providing state management and animation.",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "famous/core/View.js~FamousView"
    ]
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#constructor",
    "access": "public",
    "description": "",
    "examples": [
      "HomeController extends Controller {\n     Index() {\n         let view = new View();\n         view.add(new Surface({properties: {backgroundColor: 'red'}}));\n         return view\n     }\n}",
      "class HomeView extends View {\n     @layout.size(100, 100)\n     @layout.stick.center()\n     mySurface = new Surface({properties: {backgroundColor: 'red'}})\n}"
    ],
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options.",
        "description": "The options passed to the view will be stored in this.options, but won't change any\nbehaviour of the core functionality of the view. Instead, configuration of the View is done by decorators."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "build",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#build",
    "access": "public",
    "description": "Deprecated, it is no longer required to call build() from within your View instances.",
    "lineNumber": 90,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "reflowRecursively",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#reflowRecursively",
    "access": "public",
    "description": "Reflows the layout while also informing any subscribing parents that a reflow has to take place",
    "lineNumber": 97,
    "params": [],
    "return": null
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "_doReflow",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_doReflow",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getResolvedSize",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getResolvedSize",
    "access": "public",
    "description": "Gets the size used when displaying a renderable on the screen the last tick",
    "lineNumber": 118,
    "params": [
      {
        "nullable": null,
        "types": [
          "Surface",
          "View",
          "Name"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableOrName",
        "description": "The renderable or the name of the renderable of which you need the size"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "method",
    "name": "containsUncalculatedSurfaces",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#containsUncalculatedSurfaces",
    "access": "public",
    "description": "Returns true if the view contains uncalculated surfaces",
    "lineNumber": 141,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 285,
    "kind": "method",
    "name": "addRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#addRenderable",
    "access": "public",
    "description": "Adds a renderable to the layout.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Surface|FamousView|View} The renderable that was assigned"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Surface",
          "FamousView",
          "View"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": "The renderable to be added"
      },
      {
        "nullable": null,
        "types": [
          "Array<Function>"
        ],
        "spread": false,
        "optional": false,
        "name": "decorators",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Surface",
        "FamousView",
        "View"
      ],
      "spread": false,
      "description": "The renderable that was assigned"
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "[id]",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#[id]",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "removeRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#removeRenderable",
    "access": "public",
    "description": "Removes the renderable from the view",
    "lineNumber": 166,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "[._IDtoLocalRenderableName[renderableID]]",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#[._IDtoLocalRenderableName[renderableID]]",
    "access": "public",
    "description": null,
    "lineNumber": 177,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "hasRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#hasRenderable",
    "access": "public",
    "description": null,
    "lineNumber": 181,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "_getRenderableName",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_getRenderableName",
    "access": "private",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "prioritiseDockBefore",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#prioritiseDockBefore",
    "access": "public",
    "description": "Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed\nbefore 'nextRenderableName'.",
    "lineNumber": 195,
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "nextRenderable",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "prioritiseDockAfter",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#prioritiseDockAfter",
    "access": "public",
    "description": "",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "prevRenderable",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "showRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#showRenderable",
    "access": "public",
    "description": "Shows a renderable decorated with layout.animate()",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} when the renderable has finished its animation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "when the renderable has finished its animation"
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "toggleRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/core/View.js~View#toggleRenderable",
    "access": "public",
    "description": "",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "{String",
        "description": "}show"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "isRenderableShowing",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#isRenderableShowing",
    "access": "public",
    "description": "Returns true if animation-controlled renderable is showing",
    "lineNumber": 266,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "decorateRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#decorateRenderable",
    "access": "public",
    "description": "Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.",
    "examples": [
      "this.decorateRenderable('myRenderable',layout.size(100, 100));"
    ],
    "lineNumber": 282,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "decorators",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "setRenderableFlowState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#setRenderableFlowState",
    "access": "public",
    "description": "Sets a renderable flow state as declared in the @flow.stateStep, or @flow.defaultState",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable.",
        "description": "The name of the renderable"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName.",
        "description": "The name of the state as declared in the first argument of the decorator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "setViewFlowState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#setViewFlowState",
    "access": "public",
    "description": "Sets a view flow state as declared in the @flow.viewState",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName.",
        "description": "The name of the state as declared in the first argument of the decorator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "getRenderableFlowState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getRenderableFlowState",
    "access": "public",
    "description": "Gets the name of a flow state of a renderable.",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} stateName the name of the state that the renderable is in"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "stateName the name of the state that the renderable is in"
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "getViewFlowState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getViewFlowState",
    "access": "public",
    "description": "Gets the name of the flow state of a view.",
    "lineNumber": 333,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} stateName the name of the state that this view is in."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "stateName the name of the state that this view is in."
    },
    "params": []
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "replaceRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#replaceRenderable",
    "access": "public",
    "description": "Replaces an existing decorated renderable with a new renderable, preserving all necessary state and decorations",
    "lineNumber": 342,
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "oldRenderable.",
        "description": "The name of the renderable"
      },
      {
        "nullable": null,
        "types": [
          "Surface",
          "FamousView",
          "View"
        ],
        "spread": false,
        "optional": false,
        "name": "newRenderable",
        "description": "Renderable to replace the old renderable with"
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "[localRenderableName]",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#[localRenderableName]",
    "access": "public",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "getScrollView",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getScrollView",
    "access": "public",
    "description": "Gets the scroll view that was set if @layout.scrollable was used on the view",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ReflowingScrollView}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReflowingScrollView"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "with",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/View.js~View.with",
    "access": "public",
    "description": "Binds the options passed to the specific view class",
    "lineNumber": 365,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{RenderablePrototype}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "RenderablePrototype"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "getSize",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getSize",
    "access": "public",
    "description": "getSize() is called by this view and by layoutControllers. For lazy people that don't want to specifiy their own getSize() function,\nwe provide a fallback. This function can be performance expensive when using non-docked renderables, but for docked renderables it\nis efficient and convenient]",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "hideRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#hideRenderable",
    "access": "public",
    "description": "Hides a renderable that has been declared with @layout.animate",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} when the renderable has finished its animation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "when the renderable has finished its animation"
    }
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "getActualRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getActualRenderable",
    "access": "public",
    "description": "Gets the \"actual\" renderable as being outputted, based on the renderable passed. This can be\nsame as the assigned renderable in many cases, but different in some cases, such as with the\nanimation controller or draggable",
    "lineNumber": 397,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "isSizeSettled",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#isSizeSettled",
    "access": "public",
    "description": "Returns true if size is fully settled",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "repeatFlowState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/core/View.js~View#repeatFlowState",
    "access": "public",
    "description": "Repeat a certain flowState indefinitely",
    "lineNumber": 427,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} resolves to false if the flow state can't be repeated due to an existing running repeat"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "persistent.",
        "description": "If true, then it will keep on repeating until explicitly cancelled by cancelRepeatFlowState.\nIf false, it will be interrupted automatically by any interrput to another state. Defaults to true"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "resolves to false if the flow state can't be repeated due to an existing running repeat"
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "cancelRepeatFlowState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#cancelRepeatFlowState",
    "access": "public",
    "description": "Cancel a repeating renderable. This will cancel the animation for next flow-cycle, it won't interject the current animation cycle.",
    "lineNumber": 444,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "setDefaultState",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#setDefaultState",
    "access": "public",
    "description": "Initiate a renderable to a default flow state.",
    "lineNumber": 455,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "isDisplaying",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#isDisplaying",
    "access": "public",
    "description": "Returns true if the view is currently displaying",
    "lineNumber": 465,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "setMaxContentWidth",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#setMaxContentWidth",
    "access": "public",
    "description": "Set a maximum width of the view",
    "lineNumber": 473,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "_initUtils",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_initUtils",
    "access": "private",
    "description": "Inits the utils that are used as helper classes for the view",
    "lineNumber": 504,
    "params": [],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "member",
    "name": "_sizeResolver",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_sizeResolver",
    "access": "private",
    "description": null,
    "lineNumber": 505,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "_dockedRenderablesHelper",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_dockedRenderablesHelper",
    "access": "private",
    "description": null,
    "lineNumber": 509,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "_fullSizeLayoutHelper",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_fullSizeLayoutHelper",
    "access": "private",
    "description": null,
    "lineNumber": 510,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "_traditionalLayoutHelper",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_traditionalLayoutHelper",
    "access": "private",
    "description": null,
    "lineNumber": 511,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "_renderableHelper",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_renderableHelper",
    "access": "private",
    "description": null,
    "lineNumber": 512,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "_requestLayoutControllerReflow",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_requestLayoutControllerReflow",
    "access": "private",
    "description": "Requests for a parent LayoutController trying to resolve the size of this view",
    "lineNumber": 524,
    "params": [],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "member",
    "name": "_nodes",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_nodes",
    "access": "private",
    "description": null,
    "lineNumber": 525,
    "undocument": true,
    "type": {
      "types": [
        "{\"_trueSizeRequested\": boolean}"
      ]
    }
  },
  {
    "__docId__": 322,
    "kind": "method",
    "name": "_constructDecoratedRenderables",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_constructDecoratedRenderables",
    "access": "private",
    "description": "Construct all the renderables that have been decorated in the class.",
    "lineNumber": 534,
    "params": [],
    "return": null
  },
  {
    "__docId__": 323,
    "kind": "method",
    "name": "_assignRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_assignRenderable",
    "access": "private",
    "description": "Assigns a renderable to this view, without setting this[renderableName]",
    "lineNumber": 568,
    "params": [
      {
        "nullable": null,
        "types": [
          "Surface",
          "FamousView",
          "View"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": "the renderable that is going to be added"
      }
    ],
    "return": null
  },
  {
    "__docId__": 324,
    "kind": "method",
    "name": "_layoutDecoratedRenderables",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_layoutDecoratedRenderables",
    "access": "private",
    "description": "",
    "lineNumber": 588,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "method",
    "name": "_createLayoutController",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_createLayoutController",
    "access": "private",
    "description": "Combines all layouts defined in subclasses of the View into a single layout for the LayoutController.",
    "lineNumber": 607,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "layout",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#layout",
    "access": "public",
    "description": null,
    "lineNumber": 609,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "_initialised",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_initialised",
    "access": "private",
    "description": null,
    "lineNumber": 624,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "getID",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#getID",
    "access": "public",
    "description": null,
    "lineNumber": 667,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "_callLegacyLayoutFunctions",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_callLegacyLayoutFunctions",
    "access": "private",
    "description": "Layout all renderables that have explicit context.set() calls in this View's legacy layout array.",
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "_prepareLayoutController",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_prepareLayoutController",
    "access": "private",
    "description": "Either adds this.layout (a LayoutController) to the current View, or a FlexScrollView containing this.layout if this view\nhas been decorated with a @scrollable.",
    "lineNumber": 700,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 331,
    "kind": "member",
    "name": "_scrollView",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_scrollView",
    "access": "private",
    "description": null,
    "lineNumber": 703,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 332,
    "kind": "method",
    "name": "_getLayoutSize",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_getLayoutSize",
    "access": "private",
    "description": "Calculates the total height of the View's layout when it's embedded inside a FlexScrollView (i.e. @scrollable is set on the View),\nby iterating over each renderable inside the View, and finding the minimum and maximum y values at which they are drawn.",
    "lineNumber": 722,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 333,
    "kind": "method",
    "name": "_name",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_name",
    "access": "private",
    "description": "Retrieves the class name of the subclass View instance.",
    "lineNumber": 752,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 334,
    "kind": "method",
    "name": "_copyPrototypeProperties",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_copyPrototypeProperties",
    "access": "private",
    "description": "Copies prototype properties set by decorators to this",
    "lineNumber": 760,
    "params": [],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "[name]",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#[name]",
    "access": "public",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 336,
    "kind": "method",
    "name": "_initOwnDecorations",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_initOwnDecorations",
    "access": "private",
    "description": "Inits the decorations that is set on a class level",
    "lineNumber": 773,
    "params": [],
    "return": null
  },
  {
    "__docId__": 337,
    "kind": "method",
    "name": "onNewSize",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#onNewSize",
    "access": "public",
    "description": null,
    "lineNumber": 802,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 338,
    "kind": "method",
    "name": "onceNewSize",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#onceNewSize",
    "access": "public",
    "description": null,
    "lineNumber": 806,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "setNewOptions",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#setNewOptions",
    "access": "public",
    "description": null,
    "lineNumber": 810,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 340,
    "kind": "method",
    "name": "setNewChildren",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#setNewChildren",
    "access": "public",
    "description": null,
    "lineNumber": 815,
    "undocument": true,
    "params": [
      {
        "name": "children",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 341,
    "kind": "method",
    "name": "_doTrueSizedSurfacesBookkeeping",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_doTrueSizedSurfacesBookkeeping",
    "access": "private",
    "description": null,
    "lineNumber": 819,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 342,
    "kind": "method",
    "name": "_initTrueSizedBookkeeping",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_initTrueSizedBookkeeping",
    "access": "private",
    "description": null,
    "lineNumber": 823,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "_initOptions",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_initOptions",
    "access": "private",
    "description": null,
    "lineNumber": 836,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "_optionObserver",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_optionObserver",
    "access": "private",
    "description": "A copy of the options that were passed in the constructor",
    "lineNumber": 847,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "options",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#options",
    "access": "public",
    "description": null,
    "lineNumber": 853,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "_initDataStructures",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_initDataStructures",
    "access": "private",
    "description": null,
    "lineNumber": 856,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "member",
    "name": "renderables",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#renderables",
    "access": "public",
    "description": "The renderables \"outputted\" by the view that are passed to the underlying famous-flex layer",
    "lineNumber": 862,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 349,
    "kind": "member",
    "name": "_IDtoLocalRenderableName",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_IDtoLocalRenderableName",
    "access": "private",
    "description": null,
    "lineNumber": 863,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 350,
    "kind": "member",
    "name": "layouts",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#layouts",
    "access": "public",
    "description": "",
    "lineNumber": 873,
    "deprecated": "`\nThe old way of setting the spec of the renderables created by adding renderables through\n`this.renderables.myRenderable = ....",
    "type": {
      "nullable": null,
      "types": [
        "Array",
        "Function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "decorations",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#decorations",
    "access": "public",
    "description": null,
    "lineNumber": 877,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "_runningRepeatingFlowStates",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_runningRepeatingFlowStates",
    "access": "private",
    "description": null,
    "lineNumber": 880,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 353,
    "kind": "member",
    "name": "_renderableConstructors",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_renderableConstructors",
    "access": "private",
    "description": null,
    "lineNumber": 881,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 354,
    "kind": "member",
    "name": "_bindingTriggers",
    "memberof": "src/core/View.js~View",
    "static": false,
    "longname": "src/core/View.js~View#_bindingTriggers",
    "access": "private",
    "description": null,
    "lineNumber": 883,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "_bindToSelf",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_bindToSelf",
    "access": "private",
    "description": "Binds the method to this view. Used by the util DecoratedRenderables",
    "lineNumber": 893,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method that is about to be bound"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "_setPipeToSelf",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_setPipeToSelf",
    "access": "private",
    "description": "Pipes a renderable to this view. Used by the util DecoratedRenderables",
    "lineNumber": 904,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} true if piping was successful, otherwise false"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "View",
          "Surface"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": "set to false to unpipe"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if piping was successful, otherwise false"
    }
  },
  {
    "__docId__": 357,
    "kind": "method",
    "name": "_setupRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_setupRenderable",
    "access": "private",
    "description": "Sets up a renderable when it is invalidated to be re-rendered (happens on creation too)",
    "lineNumber": 926,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableInitializer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "decorations",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "_assignNewRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_assignNewRenderable",
    "access": "private",
    "description": "",
    "lineNumber": 1024,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "localRenderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "decorations",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isArray",
        "description": "If set to true, renderable is array and actions will be taken accordingly"
      }
    ],
    "return": null
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "_getIDFromLocalName",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_getIDFromLocalName",
    "access": "private",
    "description": null,
    "lineNumber": 1046,
    "undocument": true,
    "params": [
      {
        "name": "localName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 363,
    "kind": "method",
    "name": "_arrangeRenderableAssignment",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_arrangeRenderableAssignment",
    "access": "private",
    "description": "",
    "lineNumber": 1061,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{View|Surface}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldRenderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newRenderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dynamicDecorations",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "localRenderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "decorations",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isArray",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "View",
        "Surface"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "_readjustRenderableInitializer",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_readjustRenderableInitializer",
    "access": "private",
    "description": "Resets the initializer for a class property",
    "lineNumber": 1121,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "localRenderableName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "_setupExtraRenderables",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_setupExtraRenderables",
    "access": "private",
    "description": null,
    "lineNumber": 1146,
    "undocument": true,
    "params": [
      {
        "name": "extraLayout",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "_cloneDecorationsForRenderable",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_cloneDecorationsForRenderable",
    "access": "private",
    "description": "Clones decorations for renderable, to make sure that shared decorations structures don't affect each other",
    "lineNumber": 1167,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "decorations",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "_initBindingsTriggers",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_initBindingsTriggers",
    "access": "private",
    "description": "Initializes the part of the decorations object that contains the binding trigger functions",
    "lineNumber": 1178,
    "params": [],
    "return": null
  },
  {
    "__docId__": 370,
    "kind": "method",
    "name": "_extendFromDynamicFunctions",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#_extendFromDynamicFunctions",
    "access": "private",
    "description": "",
    "lineNumber": 1201,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "decorations",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 371,
    "kind": "method",
    "name": "whenFlowFinished",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/core/View.js~View#whenFlowFinished",
    "access": "public",
    "description": null,
    "lineNumber": 1208,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "empty",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/core/View.js~View.empty",
    "access": "public",
    "description": null,
    "lineNumber": 1218,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 373,
    "kind": "get",
    "name": "inputOptions",
    "memberof": "src/core/View.js~View",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/core/View.js~View#inputOptions",
    "access": "public",
    "description": null,
    "lineNumber": 1223,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 374,
    "kind": "file",
    "name": "src/data/DataSource.js",
    "content": "/**\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\n/**\n * @ignore\n * The DataSource in the abstract interface for communicating with data\n */\nexport class DataSource {\n\n    /**\n     * @param {String} path Full path to resource in remote data storage.\n     * @return {DataSource} DataSource instance.\n     **/\n    constructor(path) {\n        this._dataReference = null;\n    }\n\n    /**\n     * Indicate that the DataSource can be inherited when instantiating a list of models. By\n     * default we indicate false, which should trigger data model instantiation to create unique\n     * DataSource references to each model either in array or directly.\n     *\n     * If set to false, model updates trigger creation of a new DataSource instance. (default)\n     *\n     * @returns {Boolean} Whether the DataSource is inheritable.\n     */\n    get inheritable() {\n        return false;\n    }\n\n    /**\n     * Returns the full path to this dataSource's source on the remote storage provider.\n     * @returns {String} Full resource path.\n     */\n    toString() {\n    }\n\n    /**\n     * Returns a dataSource reference to the given child branch of the current dataSource.\n     * @param {String} childName Child branch name.\n     * @param {Object} options Optional: additional options to pass to new DataSource instance.\n     * @returns {DataSource} New dataSource instance pointing to the given child branch.\n     */\n    child(childName, options = null) {\n    }\n\n    /**\n     * Returns the full URL to the path on the dataSource. Functionally identical to toString().\n     * @returns {String} Full resource path.\n     */\n    path() {\n    }\n\n    /**\n     * Returns the name of the current branch in the path on the dataSource.\n     * @returns {String} Current branch name.\n     */\n    key() {\n    }\n\n    /**\n     * Writes newData to the path this dataSource was constructed with.\n     * @param {Object} newData Data to write to dataSource.\n     * @returns {Promise} Resolves when write to server is complete.\n     */\n    set(newData) {\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes the object and all underlying children that this dataSource points to.\n     * @returns {Promise} resolves when it has been successfully removed\n     */\n    remove() {\n    }\n\n    /**\n     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by\n     * the dataSource.\n     * @param {Object} newData New data to append to dataSource.\n     * @returns {void}\n     */\n    push(newData) {\n    }\n\n    /**\n     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.\n     * @param {Object} newData New data to set.\n     * @param {String|Number} priority Priority value by which the data should be ordered.\n     * @returns {Promise} Resolves when write to server is complete.\n     */\n    setWithPriority(newData, priority) {\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the priority (ordering) of an object on a given dataSource.\n     * @param {String|Number} newPriority New priority value to order data by.\n     * @returns {void}\n     */\n    setPriority(newPriority) {\n    }\n\n    /**\n     * Orders the DataSource's childs by the value in child[key].\n     * @param {String} childKey Key of the field to order by.\n     * @returns {DataSource} New dataSource instance.\n     */\n    orderByChild(childKey) {\n    }\n\n    /**\n     * Orders the DataSource's childs by their key names, ignoring their priority.\n     * @returns {DataSource} New dataSource instance.\n     */\n    orderByKey() {\n    }\n\n    /**\n     * Orders the DataSource's childs by their values, ignoring their priority.\n     * @returns {DataSource} New dataSource instance.\n     */\n    orderByValue() {\n    }\n\n    /**\n     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.\n     * @param {Number} amount Amount of items to limit the dataSource to.\n     * @returns {DataSource} New dataSource instance.\n     */\n    limitToFirst(amount) {\n    }\n\n    /**\n     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.\n     * @param {Number} amount Amount of items to limit the dataSource to.\n     * @returns {DataSource} New dataSource instance.\n     */\n    limitToLast(amount) {\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.\n     * @param {String} provider google, facebook, github, or twitter\n     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authWithOAuthToken(provider, credentials, onComplete, options) {\n    }\n\n    /**\n     * Merges the current user with the specified provider.\n     * @param provider\n     * @returns {Authentication}\n     */\n    linkCurrentUserWithProvider(provider) {\n    }\n\n\n    /**\n     * Creates a provider with the specified type\n     *\n     * @param {String} providerType Can be 'password' or 'facebook'\n     * @param {String|Object} credential if 'password' providerType, then an object {email:String,password:String}. If\n     * 'facebook' providerType, then a string containing the API token.\n     * @returns {Provider}\n     */\n    createProviderFromCredential(providerType, credential) {\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with a custom auth token or secret.\n     * @param {String} authToken Authentication token or secret.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authWithCustomToken(authToken, onComplete, options) {\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with the given email/password credentials.\n     * @param {String|Object} credentials Object with key/value pairs {email: \"value\", password:\"value\"}.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authWithPassword(credentials, onComplete, options) {\n    }\n\n\n    /**\n     * Registers a user with instances of this DataSource with the given email/password credentials.\n     * @param {String|Object} credentials Object with key/value pairs {email: \"value\", password:\"value\"}.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @returns {Promise}\n     */\n    registerWithPassword(credential) {\n    }\n\n    /**\n     * Authenticates all instances of this DataSource as an anonymous user.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authAnonymously(onComplete, options) {\n    }\n\n    /**\n     * Fetches the current user's authentication state.\n     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.\n     * If the user is not authenticated, returns null.\n     * @returns {Object|null} User auth object.\n     */\n    getAuth() {\n    }\n\n    /**\n     * Logs out from the datasource, allowing to re-authenticate at a later time.\n     * @returns {void}\n     */\n    unauth() {\n    }\n\n    /**\n     * Subscribe to an event emitted by the DataSource.\n     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.\n     * @param {Function} handler Function to call when the subscribed event is emitted.\n     * @param {Object} context Context to set 'this' to when calling the handler function.\n     */\n    on(event, handler, context) {\n    }\n\n    /**\n     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe.\n     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.\n     * @param {Function} handler Function to call when the subscribed event is emitted.\n     * @param {Object} context Context to set 'this' to when calling the handler function.\n     * @returns {Promise}\n     */\n    once(event, handler, context) {\n    }\n\n\n    /**\n     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for\n     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.\n     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.\n     * @param {Function} handler Optional: Function that was used in previous subscription.\n     */\n    off(event, handler) {\n    }\n\n    /**\n     * Sets the callback triggered when dataSource updates the data.\n     * @param {Function} callback Callback function to call when the subscribed data value changes.\n     * @returns {void}\n     **/\n    setValueChangedCallback(callback) {\n    }\n\n    /**\n     * Sets data at the specified path(s) without touching unspecified paths\n     * @param {JSON} data The object to push\n     * @returns {Promise}\n     **/\n    update(data) {\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource updates the data.\n     * @returns {void}\n     **/\n    removeValueChangedCallback() {\n    }\n\n    /**\n     * Set the callback triggered when dataSource adds a data element.\n     * @param {Function} callback Callback function to call when a new data child is added.\n     * @returns {void}\n     **/\n    setChildAddedCallback(callback) {\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource adds a data element.\n     * @returns {void}\n     **/\n    removeChildAddedCallback() {\n    }\n\n    /**\n     * Set the callback triggered when dataSource changes a data element.\n     * @param {Function} callback Callback function to call when a child is changed.\n     * @returns {void}\n     **/\n    setChildChangedCallback(callback) {\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource changes a data element.\n     * @returns {void}\n     **/\n    removeChildChangedCallback() {\n    }\n\n    /**\n     * Set the callback triggered when dataSource moves a data element.\n     * @param {Function} callback Callback function to call when a child is moved.\n     * @returns {void}\n     **/\n    setChildMovedCallback(callback) {\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource moves a data element.\n     * @returns {void}\n     **/\n    removeChildMovedCallback() {\n    }\n\n    /**\n     * Set the callback triggered when dataSource removes a data element.\n     * @param {Function} callback Callback function to call when a child is removed.\n     * @returns {void}\n     **/\n    setChildRemovedCallback(callback) {\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource removes a data element.\n     * @returns {void}\n     **/\n    removeChildRemovedCallback() {\n    }\n\n\n    /**\n     * Resolves when the DataSource is synchronized to the server\n     * @returns {Promise} Resolves when the DataSource is synchronized\n     */\n    synced() {\n    }\n\n    /**\n     * Performs an atomic transaction\n     * @param {Function} transactionFunction A function that takes the current value as a single argument, and\n     * returns the new value.\n     * @returns {Promise} Resolves the new value when the transaction is finished\n     */\n    atomicTransaction(transactionFunction) {\n    }\n\n    /**\n     * Gets a symbolic representation of a timestamp as being run on the server-side\n     * @returns {*}\n     */\n    getTimestampSymbol() {\n\n    }\n\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/DataSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 375,
    "kind": "class",
    "name": "DataSource",
    "memberof": "src/data/DataSource.js",
    "static": true,
    "longname": "src/data/DataSource.js~DataSource",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/DataSource.js",
    "importStyle": "{DataSource}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 376,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Full path to resource in remote data storage."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "DataSource instance."
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "_dataReference",
    "memberof": "src/data/DataSource.js~DataSource",
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#_dataReference",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 378,
    "kind": "get",
    "name": "inheritable",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#inheritable",
    "access": "public",
    "description": "Indicate that the DataSource can be inherited when instantiating a list of models. By\ndefault we indicate false, which should trigger data model instantiation to create unique\nDataSource references to each model either in array or directly.\n\nIf set to false, model updates trigger creation of a new DataSource instance. (default)",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the DataSource is inheritable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the DataSource is inheritable."
    },
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "toString",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#toString",
    "access": "public",
    "description": "Returns the full path to this dataSource's source on the remote storage provider.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path."
    },
    "params": []
  },
  {
    "__docId__": 380,
    "kind": "method",
    "name": "child",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#child",
    "access": "public",
    "description": "Returns a dataSource reference to the given child branch of the current dataSource.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance pointing to the given child branch."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "childName",
        "description": "Child branch name."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional: additional options to pass to new DataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance pointing to the given child branch."
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "path",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#path",
    "access": "public",
    "description": "Returns the full URL to the path on the dataSource. Functionally identical to toString().",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path."
    },
    "params": []
  },
  {
    "__docId__": 382,
    "kind": "method",
    "name": "key",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#key",
    "access": "public",
    "description": "Returns the name of the current branch in the path on the dataSource.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Current branch name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Current branch name."
    },
    "params": []
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "set",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#set",
    "access": "public",
    "description": "Writes newData to the path this dataSource was constructed with.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when write to server is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to write to dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when write to server is complete."
    }
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#remove",
    "access": "public",
    "description": "Removes the object and all underlying children that this dataSource points to.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} resolves when it has been successfully removed"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "resolves when it has been successfully removed"
    },
    "params": []
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "push",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#push",
    "access": "public",
    "description": "Writes newData to the path this dataSource was constructed with, appended by a random UID generated by\nthe dataSource.",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to append to dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 386,
    "kind": "method",
    "name": "setWithPriority",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setWithPriority",
    "access": "public",
    "description": "Writes newData with given priority (ordering) to the path this dataSource was constructed with.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when write to server is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to set."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "priority",
        "description": "Priority value by which the data should be ordered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when write to server is complete."
    }
  },
  {
    "__docId__": 387,
    "kind": "method",
    "name": "setPriority",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setPriority",
    "access": "public",
    "description": "Sets the priority (ordering) of an object on a given dataSource.",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPriority",
        "description": "New priority value to order data by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "orderByChild",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#orderByChild",
    "access": "public",
    "description": "Orders the DataSource's childs by the value in child[key].",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "childKey",
        "description": "Key of the field to order by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 389,
    "kind": "method",
    "name": "orderByKey",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#orderByKey",
    "access": "public",
    "description": "Orders the DataSource's childs by their key names, ignoring their priority.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    },
    "params": []
  },
  {
    "__docId__": 390,
    "kind": "method",
    "name": "orderByValue",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#orderByValue",
    "access": "public",
    "description": "Orders the DataSource's childs by their values, ignoring their priority.",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    },
    "params": []
  },
  {
    "__docId__": 391,
    "kind": "method",
    "name": "limitToFirst",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#limitToFirst",
    "access": "public",
    "description": "Returns a new dataSource reference that will limit the subscription to only the first given amount items.",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of items to limit the dataSource to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 392,
    "kind": "method",
    "name": "limitToLast",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#limitToLast",
    "access": "public",
    "description": "Returns a new dataSource reference that will limit the subscription to only the last given amount items.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of items to limit the dataSource to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 393,
    "kind": "method",
    "name": "authWithOAuthToken",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#authWithOAuthToken",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with the given OAuth provider and credentials.",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "google, facebook, github, or twitter"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "linkCurrentUserWithProvider",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#linkCurrentUserWithProvider",
    "access": "public",
    "description": "Merges the current user with the specified provider.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Authentication}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Authentication"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 395,
    "kind": "method",
    "name": "createProviderFromCredential",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#createProviderFromCredential",
    "access": "public",
    "description": "Creates a provider with the specified type",
    "lineNumber": 178,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Provider}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "providerType",
        "description": "Can be 'password' or 'facebook'"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credential",
        "description": "if 'password' providerType, then an object {email:String,password:String}. If\n'facebook' providerType, then a string containing the API token."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 396,
    "kind": "method",
    "name": "authWithCustomToken",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#authWithCustomToken",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with a custom auth token or secret.",
    "lineNumber": 190,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "authToken",
        "description": "Authentication token or secret."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "method",
    "name": "authWithPassword",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#authWithPassword",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with the given email/password credentials.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Object with key/value pairs {email: \"value\", password:\"value\"}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 398,
    "kind": "method",
    "name": "registerWithPassword",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#registerWithPassword",
    "access": "public",
    "description": "Registers a user with instances of this DataSource with the given email/password credentials.",
    "lineNumber": 214,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Object with key/value pairs {email: \"value\", password:\"value\"}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "authAnonymously",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#authAnonymously",
    "access": "public",
    "description": "Authenticates all instances of this DataSource as an anonymous user.",
    "lineNumber": 225,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "getAuth",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#getAuth",
    "access": "public",
    "description": "Fetches the current user's authentication state.\nIf the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.\nIf the user is not authenticated, returns null.",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null} User auth object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": "User auth object."
    },
    "params": []
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "unauth",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#unauth",
    "access": "public",
    "description": "Logs out from the datasource, allowing to re-authenticate at a later time.",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 402,
    "kind": "method",
    "name": "on",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#on",
    "access": "public",
    "description": "Subscribe to an event emitted by the DataSource.",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call when the subscribed event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Context to set 'this' to when calling the handler function."
      }
    ],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "once",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#once",
    "access": "public",
    "description": "Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe.",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call when the subscribed event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Context to set 'this' to when calling the handler function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "off",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#off",
    "access": "public",
    "description": "Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for\nthe given event are removed. If no parameters are given at all, all event types will have their handlers removed.",
    "lineNumber": 270,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Optional: Function that was used in previous subscription."
      }
    ],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "setValueChangedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setValueChangedCallback",
    "access": "public",
    "description": "Sets the callback triggered when dataSource updates the data.",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when the subscribed data value changes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "update",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#update",
    "access": "public",
    "description": "Sets data at the specified path(s) without touching unspecified paths",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "JSON"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The object to push"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "removeValueChangedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#removeValueChangedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource updates the data.",
    "lineNumber": 294,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 408,
    "kind": "method",
    "name": "setChildAddedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setChildAddedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource adds a data element.",
    "lineNumber": 302,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a new data child is added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "removeChildAddedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#removeChildAddedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource adds a data element.",
    "lineNumber": 309,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "setChildChangedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setChildChangedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource changes a data element.",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is changed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "removeChildChangedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#removeChildChangedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource changes a data element.",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 412,
    "kind": "method",
    "name": "setChildMovedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setChildMovedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource moves a data element.",
    "lineNumber": 332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is moved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "removeChildMovedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#removeChildMovedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource moves a data element.",
    "lineNumber": 339,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "setChildRemovedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#setChildRemovedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource removes a data element.",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "removeChildRemovedCallback",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#removeChildRemovedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource removes a data element.",
    "lineNumber": 354,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "synced",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#synced",
    "access": "public",
    "description": "Resolves when the DataSource is synchronized to the server",
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the DataSource is synchronized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the DataSource is synchronized"
    },
    "params": []
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "atomicTransaction",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#atomicTransaction",
    "access": "public",
    "description": "Performs an atomic transaction",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves the new value when the transaction is finished"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transactionFunction",
        "description": "A function that takes the current value as a single argument, and\nreturns the new value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves the new value when the transaction is finished"
    }
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "getTimestampSymbol",
    "memberof": "src/data/DataSource.js~DataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/DataSource.js~DataSource#getTimestampSymbol",
    "access": "public",
    "description": "Gets a symbolic representation of a timestamp as being run on the server-side",
    "lineNumber": 378,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 419,
    "kind": "file",
    "name": "src/data/PrioritisedArray.js",
    "content": "/**\n\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport extend                       from 'lodash/extend.js';\nimport EventEmitter                 from 'eventemitter3';\nimport {DataSource}                 from './DataSource.js';\nimport {Model}                      from '../core/Model.js';\nimport {LocalModel}                 from './local/LocalModel.js';\nimport {Injection}                  from '../utils/Injection.js';\nimport {Throttler}                  from '../utils/Throttler.js';\nimport {ObjectHelper}               from '../utils/ObjectHelper.js';\n\n/**\n * An array of two-way bound data Models that are automatically synced with the currently used DataSource\n */\nexport class PrioritisedArray {\n\n  _children = [];\n  _referenceLength = 0;\n  /* The amount of numerical properties on this PrioArray that refer to this._children */\n  get length() {\n    return this._children.length;\n  }\n\n  /**\n   *\n   * @param {Function} dataType DataType of the models being added to the PrioritisedArray.\n   * @param {DataSource} [dataSource] dataSource to load the models from. If none is given, a new DataSource is made with a path guessed from\n   * the model's DataType name.\n   * @param {Snapshot} [dataSnapshot] snapshot already containing model data. Prevents initial subscription on all values in the DataSource.\n   * @param {Object} [options] options to pass to the dataSource if none is provided and a new one is constructed.\n   * @param {Object} [modelOptions] options to merge into the construction of every new Model.\n   * @returns {PrioritisedArray} PrioritisedArray instance.\n   */\n  constructor(dataType, dataSource = null, dataSnapshot = null, options = {}, modelOptions = {}) {\n    /**** Callbacks ****/\n    this._valueChangedCallback = null;\n\n    options = options || {};\n\n\n    /**** Private properties ****/\n    this._ids = {};\n    this._dataType = dataType;\n    this._dataSource = dataSource;\n    this._isBeingReordered = false;\n    this._modelOptions = modelOptions;\n    /* Flag to determine when we're reordering so we don't listen to move updates */\n    this._eventEmitter = new EventEmitter();\n    this._childAddedThrottler = new Throttler(options.noThrottle || typeof window === 'undefined' ? 0 : 1, true, this, true);\n    this._overrideChildAddedForId = null;\n\n    /* We do the bindAllMethods before this happens in order to make sure that dataType.prototype isn't modified so\n     * that this check would break\n     */\n    if (dataType && !(dataType.prototype instanceof Model)) {\n      throw new Error(`${dataType.toString()} passed to PrioritisedArray is not an instance of a model`);\n    }\n\n    /* Hide all private properties (starting with '_') and methods from enumeration,\n     * so when you do for( in ), only actual data properties show up. */\n    ObjectHelper.hideMethodsAndPrivatePropertiesFromObject(this);\n\n    /* Hide the priority field from enumeration, so we don't save it to the dataSource. */\n    // ObjectHelper.hidePropertyFromObject(Object.getPrototypeOf(this), 'length');\n\n    /* If no dataSource is given, create own one with guessed path */\n    if (!dataSource) {\n      /* The this._name property can be set by Arva's babel-plugin-transform-runtime-constructor-name plugin.\n       * This allows Arva code to be minified and mangled without losing automated model name resolving.\n       * If the plugin is not set up to run, which is done e.g. when not minifying your code, we default back to the runtime constructor name. */\n      let path = this.constructor._name || Object.getPrototypeOf(this).constructor.name;\n      /* Retrieve dataSource from the DI context */\n      dataSource = Injection.get(DataSource);\n      dataSource = dataSource.child(options.path || path, options);\n\n      this._dataSource = dataSource;\n    }\n\n    /* If a snapshot is present use it, otherwise generate one by subscribing to the dataSource one time. */\n    if (dataSnapshot) {\n      this._buildFromSnapshot(dataSnapshot);\n    } else {\n      this._buildFromDataSource(dataSource);\n    }\n  }\n\n\n\n\n  /**\n   * Subscribes to events emitted by this PrioritisedArray.\n   * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.\n   * @param {Function} handler Function that is called when the given event type is emitted.\n   * @param {Object} context Optional: context of 'this' inside the handler function when it is called.\n   * @returns {void}\n   */\n  on(event, handler, context) {\n    /* If we're already ready, fire immediately */\n    if ((event === 'ready' || event === 'value') && this._dataSource && this._dataSource.ready) {\n      handler.call(context, this);\n    }\n\n    /* If we already have children stored locally when the subscriber calls this method,\n     * fire their callback for all pre-existing children. */\n    if (event === 'child_added') {\n\n      for (let i = 0; i < this.length; i++) {\n        this._childAddedThrottler.add(() => {\n          let model = this._children[i];\n          let previousSiblingID = i > 0 ? this._children[i - 1].id : null;\n          handler.call(context, model, previousSiblingID);\n        });\n      }\n    }\n\n    this._eventEmitter.on(event, handler, context);\n  }\n\n  /**\n   * Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.\n   * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.\n   * @param {Function} [handler] Function that is called when the given event type is emitted.\n   * @param {Object} [context] context of 'this' inside the handler function when it is called.\n   * @returns {Promise} A promise that resolves once the event has happened\n   */\n  once(event, handler, context = this) {\n    return new Promise((resolve) => {\n      this.on(event, function onceWrapper() {\n        this.off(event, onceWrapper, context);\n        handler && handler.call(context, ...arguments);\n        resolve(...arguments);\n      }, this);\n    });\n\n  }\n\n  /**\n   * Removes subscription to events emitted by this PrioritisedArray. If no handler or context is given, all handlers for\n   * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.\n   * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.\n   * @param {Function} handler Function to remove from event callbacks.\n   * @param {Object} context Object to bind the given callback function to.\n   * @returns {void}\n   */\n  off(event, handler, context) {\n    if (event && (handler || context)) {\n      this._eventEmitter.removeListener(event, handler, context);\n    } else {\n      this._eventEmitter.removeAllListeners(event);\n    }\n  }\n\n  /**\n   * Adds a model instance to the rear of the PrioritisedArray, and emits a 'child_added' and possibly 'new_child' event after successful addition.\n   * @param {Model|Object} model Instance of a Model.\n   * @param {String|undefined} prevSiblingId ID of the model preceding the one that will be added.\n   * @param {Boolean} [emitValueEvent] Set to false to prevent emitting value event in this method.\n   * @returns {Object} Same model as the one originally passed as parameter.\n   */\n  add(model, prevSiblingId = null, emitValueEvent = true) {\n    if (model instanceof this._dataType) {\n      if (this.findIndexById(model.id) < 0) {\n\n        if (prevSiblingId) {\n          let newPosition = this.findIndexById(prevSiblingId) + 1;\n          this.insertAt(model, newPosition);\n        } else {\n          this.push(model);\n        }\n\n        /* If we've already received an on('value') result, this child addition is\n         * a new entry that wasn't on the dataSource before. */\n        if (this._dataSource.ready) {\n          this._eventEmitter.emit('new_child', model, prevSiblingId);\n        }\n\n        this._eventEmitter.emit('child_added', model, prevSiblingId);\n        if (emitValueEvent) {\n          this._eventEmitter.emit('value', this);\n        }\n\n        return model;\n      }\n    } else if (model instanceof Object) {\n      /* Let's try to parse the object using property reflection */\n      var options = { dataSource: this._dataSource };\n      /* Prevent child_added from being fired immediately when the model is created by creating a promise that resolves\n       * the ID that shouldn't be synced twice\n       */\n\n      this._overrideChildAddedForId = this.once('local_child_added');\n      let newModel = new this._dataType(null, model, extend({}, this._modelOptions, options));\n\n      this.add(newModel, undefined, emitValueEvent);\n      /* Remove lock */\n      this._eventEmitter.emit('local_child_added', newModel);\n      this._overrideChildAddedForId = null;\n      return newModel;\n    } else {\n      /* TODO: change to throw exception */\n      console.log('Tried to append an object that is not the same type as the one this PrioritisedArray was created with.');\n    }\n\n    /* Return model so we can do this: let newModel = PrioArray.add(new Model()); newModel.someProperty = true; */\n    return null;\n  }\n\n\n  /**\n   * Inserts a model instance at the given position of the PrioritisedArray, and recalculates the priority (position)\n   * of all models after the inserted position.\n   * @param {Model} model Subclass of Model\n   * @param {Number} position Zero-based index where to put the new model instance.\n   * @returns {Object} Same model as the one originally passed as parameter.\n   */\n  insertAt(model, position) {\n    if (model instanceof this._dataType) {\n      for (let i = position; i < this.length; i++) {\n        /* Increase the index of items further on in the prio array */\n        this._ids[this._children[i].id]++;\n      }\n      this._children.splice(position, 0, model);\n      this._ids[model._id] = position;\n    } else {\n      /* TODO: change to throw exception */\n      console.log('Tried to append an object that is not the same type as the PrioritisedArray was created with.');\n    }\n\n    this._updateReferenceProperties();\n\n    /* Return model so we can do this: let newModel = PrioArray.add(new Model()); newModel.someProperty = true; */\n    return model;\n  }\n\n  /**\n   * Adds a model or object to the end of the list.\n   * @param {Object|Model} model\n   * @returns {Model} The newly inserted model\n   */\n  push(model) {\n    return this.insertAt(model, this.length);\n  }\n\n  /**\n   * Removes the model instance at the given position. Does not remove the model from the datasource, to do that\n   * call model.remove() directly, or PrioArray[index].remove().\n   * @param {Number} position Index in the PrioritisedArray of the model to remove.\n   * @returns {void}\n   */\n  remove(position) {\n    /*\n     * TODO: Beware, there might be hard to reproduce prone to errors going on sometimes when deleting many things at once\n     * Sometimes, there is an inconsistent state, but I haven't been able to figure out how that happens. /Karl\n     */\n    if (this.length === 1) {\n      this._ids = {};\n    } else {\n      for (let i = position + 1; i < this.length; i++) {\n        /* Decrease the index of items further on in the prio array */\n        if (!this._ids[this._children[i].id] && this._ids[this._children[i].id] !== 0) {\n          console.log(\"Internal error, decreasing index of non-existing id. For ID: \" + this._children[i].id);\n        }\n        this._ids[this._children[i].id]--;\n      }\n      delete this._ids[this._children[position].id];\n\n    }\n    this.splice(position, 1);\n    this._updateReferenceProperties();\n  }\n\n\n  /**\n   * Return the position of model's id, saved in an associative array\n   * @param {String} id Id field of the model we're looking for\n   * @returns {Number} Zero-based index if found, -1 otherwise\n   */\n  findIndexById(id) {\n    let position = this._ids[id];\n    return (position == undefined || position == null) ? -1 : position;\n  }\n\n\n  /**\n   * Finds an item based on its Id in the datasource.\n   * @param id\n   * @returns {Model}\n   */\n  findById(id) {\n    return this._children[this.findIndexById(id)];\n  }\n\n  getDataSourcePath() {\n    return this._dataSource.path();\n  }\n\n  /**\n   * Replaces all items in this PrioritisedArray with items from newContents.\n   * @param {PrioritisedArray} newContents PrioritisedArray to take elements from.\n   */\n  replaceContents(newContents) {\n    while (this.length) {\n      this._children[0].remove();\n    }\n    this._referenceLength = 0;\n    for (let item of newContents) {\n      this.add(LocalModel.cloneModelProperties(item));\n    }\n  }\n\n  /**\n   * Proxies PrioArray.find() to its underlying Array cache.\n   * @returns {*}\n   */\n  find() {\n    return this._children.find.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.findIndex() to its underlying Array cache.\n   * @returns {*}\n   */\n  findIndex() {\n    return this._children.findIndex.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.keys() to its underlying Array cache.\n   * @returns {*}\n   */\n  keys() {\n    return this._children.keys.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.keys() to its underlying Array cache.\n   * @returns {*}\n   */\n  includes() {\n    return this._children.includes.apply(this._children, arguments);\n  }\n\n  /**\n   * Proxies PrioArray.entries() to its underlying Array cache.\n   * @returns {*}\n   */\n  entries() {\n    return this._children.entries.apply(this._children, arguments);\n  }\n\n  /**\n   * Proxies PrioArray.reduce() to its underlying Array cache.\n   * @returns {*}\n   */\n  reduce() {\n    return this._children.reduce.apply(this._children, arguments);\n  }\n\n  /**\n   * Proxies PrioArray.map() to its underlying Array cache.\n   * @returns {*}\n   */\n  map() {\n    return this._children.map.apply(this._children, arguments);\n  }\n\n  /**\n   * //TODO Why is this necessary? Would be better never to access this method\n   * Proxies PrioArray.splice() to its underlying Array cache.\n   * @returns {*}\n   */\n  splice() {\n    let result = this._children.splice.apply(this._children, arguments);\n    this._updateReferenceProperties();\n    return result;\n  }\n\n  /**\n   * Proxies PrioArray.filter() to its underlying Array cache.\n   * @returns {*}\n   */\n  filter() {\n    return this._children.filter.apply(this._children, arguments);\n  }\n\n  /**\n   * Proxies PrioArray.concat() to its underlying Array cache.\n   * @returns {*}\n   */\n  concat() {\n      for(let index in arguments){\n          if(arguments[index] instanceof PrioritisedArray){\n              arguments[index] = arguments[index]._children;\n          }\n      }\n      return this._children.concat.apply(this._children, arguments);\n  }\n\n  /**\n   * Proxies PrioArray.every() to its underlying Array cache.\n   * @returns {*}\n   */\n  every() {\n    return this._children.every.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.filter() to its underlying Array cache.\n   * @returns {*}\n   */\n  includes() {\n    return this._children.includes.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.join() to its underlying Array cache.\n   * @returns {*}\n   */\n  join() {\n    return this._children.join.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.lastIndexOf() to its underlying Array cache.\n   * @returns {*}\n   */\n  lastIndexOf() {\n    return this._children.lastIndexOf.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.reduceRight() to its underlying Array cache.\n   * @returns {*}\n   */\n  reduceRight() {\n    return this._children.reduceRight.apply(this._children, arguments);\n  }\n  /**\n   * Proxies PrioArray.some() to its underlying Array cache.\n   * @returns {*}\n   */\n  some() {\n    return this._children.some.apply(this._children, arguments);\n  }\n\n\n  /**\n   * Allows 'for of' loops on the PrioArray.\n   */\n  *[Symbol.iterator]() {\n    for (let child of this._children) {\n      yield child;\n    }\n  }\n\n  /**\n   * Whenever this PrioArray is typecasted, its underlying Array cache is returned.\n   * @param hint\n   * @returns {Array}\n   */\n  [Symbol.toPrimitive](hint) {\n    return \"\" + this._children;\n  }\n\n  /**\n   * Interprets all childs of a given snapshot as instances of the given data type for this PrioritisedArray,\n   * and attempts to instantiate new model instances based on these sub-snapshots. It adds them to the\n   * PrioritisedArray, which also assigns their priority based on their inserted position.\n   * @param {Snapshot} dataSnapshot Snapshot to build the PrioritisedArray from.\n   * @returns {void}\n   * @private\n   */\n  _buildFromSnapshot(dataSnapshot) {\n\n    let numChildren = dataSnapshot.numChildren(), currentChild = 1;\n\n    /* If there is no data at this point yet, fire a ready event */\n    if (numChildren === 0) {\n      this._dataSource.ready = true;\n      this._eventEmitter.emit('ready');\n      this._eventEmitter.emit('value', this);\n    }\n\n    dataSnapshot.forEach(function (child) {\n      this._childAddedThrottler.add(function (child) {\n        /* Create a new instance of the given data type and prefill it with the snapshot data. */\n        let options = { dataSnapshot: child, noInitialSync: true };\n        let childRef = this._dataSource.child(child.key);\n\n        /* whenever the ref() is a datasource, we can bind that source to the model.\n         * whenever it's not a datasource, we assume the model should instantiate a new\n         * datasource to bind the model */\n\n        if (childRef instanceof DataSource) {\n          options.dataSource = childRef;\n        } else {\n          var rootPath = dataSnapshot.ref().root().toString();\n          options.path = dataSnapshot.ref().toString().replace(rootPath, '/');\n        }\n\n        let newModel = new this._dataType(child.key, child.val(), extend({}, this._modelOptions, options));\n        this.add(newModel, undefined, false);\n\n        /* If this is the last child, fire a ready event */\n        if (currentChild++ === numChildren) {\n          this._dataSource.ready = true;\n          this._eventEmitter.emit('ready');\n          this._eventEmitter.emit('value', this);\n        }\n\n      }.bind(this, child));\n    }.bind(this))\n  }\n\n  /**\n   * Clones a dataSource (to not disturb any existing callbacks defined on the original) and uses it\n   * to get a dataSnapshot which is used in _buildSnapshot to build our array.\n   * @param {DataSource} dataSource DataSource to subscribe to for building the PrioritisedArray.\n   * @returns {void}\n   * @private\n   */\n  _buildFromDataSource(dataSource) {\n    dataSource.once('value', (dataSnapshot) => {\n      this._buildFromSnapshot(dataSnapshot);\n      this._registerCallbacks(dataSource);\n    });\n  }\n\n  /**\n   * Registers the added, moved, changed, and removed callbacks to the given DataSource.\n   * @param {DataSource} dataSource DataSource to register callbacks on.\n   * @return {void}\n   * @private\n   */\n  _registerCallbacks(dataSource) {\n    dataSource.on('child_added', this._doOnceReady(this._onChildAdded));\n    dataSource.on('child_moved', this._doOnceReady(this._onChildMoved));\n    dataSource.on('child_changed', this._doOnceReady(this._onChildChanged));\n    dataSource.on('child_removed', this._doOnceReady(this._onChildRemoved));\n  }\n\n  _doOnceReady(callback) {\n    return (...otherArgs) => {\n      if (!this._dataSource.ready) {\n        this.once('ready', () => {\n          return callback.call(this, ...otherArgs)\n        });\n      } else {\n        return callback.call(this, ...otherArgs)\n      }\n    }\n  }\n\n  /**\n   * Called by dataSource when a new child is added.\n   * @param {Snapshot} snapshot Snapshot of the added child.\n   * @param {String} prevSiblingId ID of the model preceding the added model.\n   * @returns {void}\n   * @private\n   */\n  _onChildAdded(snapshot, prevSiblingId) {\n    let id = snapshot.key;\n    if (this._overrideChildAddedForId) {\n      this._overrideChildAddedForId.then((newModel) => {\n        /* If the override is concerning another id, then go ahead and make the _onChildAdded */\n        if (newModel.id !== id) {\n          this._onChildAdded(snapshot, prevSiblingId)\n        } else {\n          this._eventEmitter.emit('value', this);\n        }\n        /* Otherwise, don't recreate the same model twice */\n      });\n\n      return;\n    }\n\n    /* Skip addition if an item with identical ID already exists. */\n    let previousPosition = this.findIndexById(id);\n    if (previousPosition >= 0) {\n      return;\n    }\n\n    let model = new this._dataType(id, null, extend({}, this._modelOptions, {\n      noInitialSync: true,\n      dataSnapshot: snapshot\n    }));\n    this.add(model, prevSiblingId, false);\n\n    if (!this._dataSource.ready) {\n      this._dataSource.ready = true;\n      this._eventEmitter.emit('ready');\n    }\n    this._eventEmitter.emit('value', this);\n  }\n\n  /**\n   * Called by dataSource when a child is changed.\n   * @param {Snapshot} snapshot Snapshot of the added child.\n   * @param {String} prevSiblingId ID of the model preceding the added model.\n   * @returns {void}\n   * @private\n   */\n  _onChildChanged(snapshot, prevSiblingId) {\n    let id = snapshot.key;\n\n    let previousPosition = this.findIndexById(id);\n    if (previousPosition < 0) {\n      /* The model doesn't exist, so we won't emit a changed event. */\n      return;\n    }\n\n\n    let model = this._children[previousPosition];\n    model._onChildValue(snapshot, prevSiblingId);\n    let newPosition = this.findIndexById(prevSiblingId) + 1;\n\n    this._moveItem(previousPosition, newPosition, model);\n\n    this._eventEmitter.emit('child_changed', model, prevSiblingId);\n    this._eventEmitter.emit('value', this);\n  }\n\n  /**\n   * Called by dataSource when a child is moved, which changes its priority.\n   * @param {Snapshot} snapshot Snapshot of the added child.\n   * @param {String} prevSiblingId ID of the model preceding the added model.\n   * @returns {void}\n   * @private\n   */\n  _onChildMoved(snapshot, prevSiblingId) {\n    /* Ignore priority updates whilst we're reordering to avoid floods */\n    if (!this._isBeingReordered) {\n\n      let id = snapshot.key;\n      let previousPosition = this.findIndexById(id);\n      let newPosition = this.findIndexById(prevSiblingId) + 1;\n      let tempModel = this._children[previousPosition];\n      this._moveItem(previousPosition, newPosition, tempModel);\n\n      let model = this._children[newPosition];\n\n      this._eventEmitter.emit('child_moved', model, previousPosition);\n      this._eventEmitter.emit('value', this);\n    }\n  }\n\n  _moveItem(previousPosition, newPosition, modelToMove) {\n    this._ids[modelToMove._id] = newPosition;\n    /* Update the positions of things coming inbetween */\n    for (let positionAhead = previousPosition; positionAhead < newPosition; positionAhead++) {\n      this._ids[this._children[positionAhead].id]--;\n    }\n    for (let positionBefore = newPosition; positionBefore < previousPosition; positionBefore++) {\n      this._ids[this._children[positionBefore].id]++;\n    }\n\n    if (previousPosition === newPosition) {\n      this._children[newPosition] = modelToMove;\n    } else {\n      this._children.splice(previousPosition, 1);\n      this._children.splice(newPosition, 0, modelToMove);\n    }\n  }\n\n  /**\n   * Called by dataSource when a child is removed.\n   * @param {Snapshot} oldSnapshot Snapshot of the added child.\n   * @returns {void}\n   * @private\n   */\n  _onChildRemoved(oldSnapshot) {\n    /* TODO: figure out if we can use the snapshot's priority as our array index reliably, to avoid big loops. */\n    let id = oldSnapshot.key;\n    let position = this.findIndexById(id);\n    let model = this._children[position];\n\n    if (position !== -1) {\n      this.remove(position);\n      delete this._ids[id];\n\n      this._eventEmitter.emit('child_removed', model);\n      this._eventEmitter.emit('value', this);\n    }\n  }\n\n  /**\n   * Updates the local properties [0]...[n] on this PrioArray instance, each of which is a getter to\n   * the entry in the underlying Array cache at the same index.\n   * @private\n   */\n  _updateReferenceProperties() {\n    let wantedLength = this.length;\n    let currentLength = this._referenceLength;\n    let difference = wantedLength - currentLength;\n\n    if (difference > 0) {\n      for (let i = 0; i < difference; i++) {\n        Object.defineProperty(this, `${currentLength + i}`, {\n          get: () => this._children[currentLength + i],\n          configurable: true,\n          enumerable: true\n        });\n      }\n    } else if (difference < 0) {\n      for (let i = 0; i < (difference * -1); i++) {\n        delete this[currentLength - 1 - i];\n      }\n    }\n\n    this._referenceLength = this.length;\n  }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/PrioritisedArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 420,
    "kind": "class",
    "name": "PrioritisedArray",
    "memberof": "src/data/PrioritisedArray.js",
    "static": true,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/PrioritisedArray.js",
    "importStyle": "{PrioritisedArray}",
    "description": "An array of two-way bound data Models that are automatically synced with the currently used DataSource",
    "lineNumber": 23,
    "interface": false
  },
  {
    "__docId__": 421,
    "kind": "member",
    "name": "_children",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_children",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 422,
    "kind": "member",
    "name": "_referenceLength",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_referenceLength",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 423,
    "kind": "get",
    "name": "length",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#length",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 424,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PrioritisedArray} PrioritisedArray instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "dataType",
        "description": "DataType of the models being added to the PrioritisedArray."
      },
      {
        "nullable": null,
        "types": [
          "DataSource"
        ],
        "spread": false,
        "optional": true,
        "name": "dataSource",
        "description": "dataSource to load the models from. If none is given, a new DataSource is made with a path guessed from\nthe model's DataType name."
      },
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": true,
        "name": "dataSnapshot",
        "description": "snapshot already containing model data. Prevents initial subscription on all values in the DataSource."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options to pass to the dataSource if none is provided and a new one is constructed."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "modelOptions",
        "description": "options to merge into the construction of every new Model."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PrioritisedArray"
      ],
      "spread": false,
      "description": "PrioritisedArray instance."
    }
  },
  {
    "__docId__": 425,
    "kind": "member",
    "name": "_valueChangedCallback",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_valueChangedCallback",
    "access": "private",
    "description": "* Callbacks ***",
    "lineNumber": 44,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 426,
    "kind": "member",
    "name": "_ids",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_ids",
    "access": "private",
    "description": "* Private properties ***",
    "lineNumber": 50,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 427,
    "kind": "member",
    "name": "_dataType",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_dataType",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "_dataSource",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_dataSource",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 429,
    "kind": "member",
    "name": "_isBeingReordered",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_isBeingReordered",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 430,
    "kind": "member",
    "name": "_modelOptions",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_modelOptions",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 431,
    "kind": "member",
    "name": "_eventEmitter",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_eventEmitter",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 432,
    "kind": "member",
    "name": "_childAddedThrottler",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_childAddedThrottler",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 433,
    "kind": "member",
    "name": "_overrideChildAddedForId",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_overrideChildAddedForId",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "on",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#on",
    "access": "public",
    "description": "Subscribes to events emitted by this PrioritisedArray.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function that is called when the given event type is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Optional: context of 'this' inside the handler function when it is called."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 436,
    "kind": "method",
    "name": "once",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#once",
    "access": "public",
    "description": "Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.",
    "lineNumber": 134,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that resolves once the event has happened"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "Function that is called when the given event type is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "context of 'this' inside the handler function when it is called."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that resolves once the event has happened"
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "off",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#off",
    "access": "public",
    "description": "Removes subscription to events emitted by this PrioritisedArray. If no handler or context is given, all handlers for\nthe given event are removed. If no parameters are given at all, all event types will have their handlers removed.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to remove from event callbacks."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Object to bind the given callback function to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "add",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#add",
    "access": "public",
    "description": "Adds a model instance to the rear of the PrioritisedArray, and emits a 'child_added' and possibly 'new_child' event after successful addition.",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Same model as the one originally passed as parameter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Model",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "Instance of a Model."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "prevSiblingId",
        "description": "ID of the model preceding the one that will be added."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "emitValueEvent",
        "description": "Set to false to prevent emitting value event in this method."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Same model as the one originally passed as parameter."
    }
  },
  {
    "__docId__": 441,
    "kind": "method",
    "name": "insertAt",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#insertAt",
    "access": "public",
    "description": "Inserts a model instance at the given position of the PrioritisedArray, and recalculates the priority (position)\nof all models after the inserted position.",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Same model as the one originally passed as parameter."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": "Subclass of Model"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Zero-based index where to put the new model instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Same model as the one originally passed as parameter."
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "push",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#push",
    "access": "public",
    "description": "Adds a model or object to the end of the list.",
    "lineNumber": 248,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model} The newly inserted model"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "Model"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": "The newly inserted model"
    }
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#remove",
    "access": "public",
    "description": "Removes the model instance at the given position. Does not remove the model from the datasource, to do that\ncall model.remove() directly, or PrioArray[index].remove().",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "Index in the PrioritisedArray of the model to remove."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "findIndexById",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#findIndexById",
    "access": "public",
    "description": "Return the position of model's id, saved in an associative array",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} Zero-based index if found, -1 otherwise"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id field of the model we're looking for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "Zero-based index if found, -1 otherwise"
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "findById",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#findById",
    "access": "public",
    "description": "Finds an item based on its Id in the datasource.",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Model}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Model"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 447,
    "kind": "method",
    "name": "getDataSourcePath",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#getDataSourcePath",
    "access": "public",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "replaceContents",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#replaceContents",
    "access": "public",
    "description": "Replaces all items in this PrioritisedArray with items from newContents.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "PrioritisedArray"
        ],
        "spread": false,
        "optional": false,
        "name": "newContents",
        "description": "PrioritisedArray to take elements from."
      }
    ],
    "return": null
  },
  {
    "__docId__": 450,
    "kind": "method",
    "name": "find",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#find",
    "access": "public",
    "description": "Proxies PrioArray.find() to its underlying Array cache.",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 451,
    "kind": "method",
    "name": "findIndex",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#findIndex",
    "access": "public",
    "description": "Proxies PrioArray.findIndex() to its underlying Array cache.",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 452,
    "kind": "method",
    "name": "keys",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#keys",
    "access": "public",
    "description": "Proxies PrioArray.keys() to its underlying Array cache.",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "includes",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#includes",
    "access": "public",
    "description": "Proxies PrioArray.keys() to its underlying Array cache.",
    "lineNumber": 344,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 454,
    "kind": "method",
    "name": "entries",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#entries",
    "access": "public",
    "description": "Proxies PrioArray.entries() to its underlying Array cache.",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 455,
    "kind": "method",
    "name": "reduce",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#reduce",
    "access": "public",
    "description": "Proxies PrioArray.reduce() to its underlying Array cache.",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 456,
    "kind": "method",
    "name": "map",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#map",
    "access": "public",
    "description": "Proxies PrioArray.map() to its underlying Array cache.",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 457,
    "kind": "method",
    "name": "splice",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#splice",
    "access": "public",
    "description": "//TODO Why is this necessary? Would be better never to access this method\nProxies PrioArray.splice() to its underlying Array cache.",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "filter",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#filter",
    "access": "public",
    "description": "Proxies PrioArray.filter() to its underlying Array cache.",
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 459,
    "kind": "method",
    "name": "concat",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#concat",
    "access": "public",
    "description": "Proxies PrioArray.concat() to its underlying Array cache.",
    "lineNumber": 395,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 460,
    "kind": "method",
    "name": "every",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#every",
    "access": "public",
    "description": "Proxies PrioArray.every() to its underlying Array cache.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 461,
    "kind": "method",
    "name": "includes",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#includes",
    "access": "public",
    "description": "Proxies PrioArray.filter() to its underlying Array cache.",
    "lineNumber": 415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 462,
    "kind": "method",
    "name": "join",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#join",
    "access": "public",
    "description": "Proxies PrioArray.join() to its underlying Array cache.",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "lastIndexOf",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#lastIndexOf",
    "access": "public",
    "description": "Proxies PrioArray.lastIndexOf() to its underlying Array cache.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 464,
    "kind": "method",
    "name": "reduceRight",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#reduceRight",
    "access": "public",
    "description": "Proxies PrioArray.reduceRight() to its underlying Array cache.",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 465,
    "kind": "method",
    "name": "some",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#some",
    "access": "public",
    "description": "Proxies PrioArray.some() to its underlying Array cache.",
    "lineNumber": 443,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 466,
    "kind": "method",
    "name": "[Symbol.iterator]",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": true,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#[Symbol.iterator]",
    "access": "public",
    "description": "Allows 'for of' loops on the PrioArray.",
    "lineNumber": 451,
    "params": [],
    "return": null
  },
  {
    "__docId__": 467,
    "kind": "method",
    "name": "[Symbol.toPrimitive]",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#[Symbol.toPrimitive]",
    "access": "public",
    "description": "Whenever this PrioArray is typecasted, its underlying Array cache is returned.",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hint",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 468,
    "kind": "method",
    "name": "_buildFromSnapshot",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_buildFromSnapshot",
    "access": "private",
    "description": "Interprets all childs of a given snapshot as instances of the given data type for this PrioritisedArray,\nand attempts to instantiate new model instances based on these sub-snapshots. It adds them to the\nPrioritisedArray, which also assigns their priority based on their inserted position.",
    "lineNumber": 474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSnapshot",
        "description": "Snapshot to build the PrioritisedArray from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 469,
    "kind": "method",
    "name": "_buildFromDataSource",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_buildFromDataSource",
    "access": "private",
    "description": "Clones a dataSource (to not disturb any existing callbacks defined on the original) and uses it\nto get a dataSnapshot which is used in _buildSnapshot to build our array.",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DataSource"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSource",
        "description": "DataSource to subscribe to for building the PrioritisedArray."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "_registerCallbacks",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_registerCallbacks",
    "access": "private",
    "description": "Registers the added, moved, changed, and removed callbacks to the given DataSource.",
    "lineNumber": 536,
    "params": [
      {
        "nullable": null,
        "types": [
          "DataSource"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSource",
        "description": "DataSource to register callbacks on."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "_doOnceReady",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_doOnceReady",
    "access": "private",
    "description": null,
    "lineNumber": 543,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "_onChildAdded",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_onChildAdded",
    "access": "private",
    "description": "Called by dataSource when a new child is added.",
    "lineNumber": 562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "snapshot",
        "description": "Snapshot of the added child."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prevSiblingId",
        "description": "ID of the model preceding the added model."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "_onChildChanged",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_onChildChanged",
    "access": "private",
    "description": "Called by dataSource when a child is changed.",
    "lineNumber": 604,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "snapshot",
        "description": "Snapshot of the added child."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prevSiblingId",
        "description": "ID of the model preceding the added model."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "_onChildMoved",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_onChildMoved",
    "access": "private",
    "description": "Called by dataSource when a child is moved, which changes its priority.",
    "lineNumber": 631,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "snapshot",
        "description": "Snapshot of the added child."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prevSiblingId",
        "description": "ID of the model preceding the added model."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "_moveItem",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_moveItem",
    "access": "private",
    "description": null,
    "lineNumber": 648,
    "undocument": true,
    "params": [
      {
        "name": "previousPosition",
        "types": [
          "*"
        ]
      },
      {
        "name": "newPosition",
        "types": [
          "*"
        ]
      },
      {
        "name": "modelToMove",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 476,
    "kind": "method",
    "name": "_onChildRemoved",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_onChildRemoved",
    "access": "private",
    "description": "Called by dataSource when a child is removed.",
    "lineNumber": 672,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "oldSnapshot",
        "description": "Snapshot of the added child."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 477,
    "kind": "method",
    "name": "_updateReferenceProperties",
    "memberof": "src/data/PrioritisedArray.js~PrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedArray.js~PrioritisedArray#_updateReferenceProperties",
    "access": "private",
    "description": "Updates the local properties [0]...[n] on this PrioArray instance, each of which is a getter to\nthe entry in the underlying Array cache at the same index.",
    "lineNumber": 692,
    "params": [],
    "return": null
  },
  {
    "__docId__": 479,
    "kind": "file",
    "name": "src/data/PrioritisedObject.js",
    "content": "/**\n\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport isEqual          from 'lodash/isEqual.js';\nimport every            from 'lodash/every.js';\nimport EventEmitter     from 'eventemitter3';\nimport {ObjectHelper}   from '../utils/ObjectHelper.js';\nimport {Injection}      from '../utils/Injection.js';\nimport {DataSource}     from '../data/DataSource.js';\n\n/**\n * @ignore\n */\nexport class PrioritisedObject extends EventEmitter {\n\n    _accessedKeys = [];\n\n    get id() {\n        return this._id;\n    }\n\n    set id(value) {\n        this._id = value;\n    }\n\n    /** Priority (positioning) of the object in the dataSource */\n    get priority() {\n        return this._priority;\n    }\n\n    get dataSource() {\n        return this._dataSource;\n    }\n\n    set priority(value) {\n        if (this._priority !== value) {\n            this._priority = value;\n            this._dataSource.setPriority(value);\n        }\n    }\n\n    /* TODO: refactor out after we've resolved SharepointDataSource specific issue. */\n    get _inheritable() {\n        return this._dataSource ? this._dataSource.inheritable : false;\n    }\n\n    /**\n     * @param {DataSource} dataSource DataSource to construct this PrioritisedObject with.\n     * @param {Snapshot} dataSnapshot Optional: dataSnapshot already containing model data, so we can skip subscribing to the full data on the dataSource.\n     * @returns {PrioritisedObject} PrioritisedObject instance.\n     */\n    constructor(dataSource, dataSnapshot = null) {\n        super();\n\n        /**** Callbacks ****/\n        this._valueChangedCallback = null;\n\n        /**** Private properties ****/\n        this._id = dataSource ? dataSource.key() : 0;\n        this._events = this._events || [];\n        this._dataSource = dataSource;\n        this._priority = 0; // Priority of this object on remote dataSource\n        this._changeListenersDisabled = false; // Flag to determine whether data change listeners are disabled\n        this._childChangedListeners = {};\n\n\n        /* Hide all private properties (starting with '_') and methods from enumeration,\n         * so when you do for( in ), only actual data properties show up. */\n        ObjectHelper.hideMethodsAndPrivatePropertiesFromObject(this);\n\n        /* Hide the id field from enumeration, so we don't save it to the dataSource. */\n        ObjectHelper.hidePropertyFromObject(this, 'id');\n\n        /* Hide the priority field from enumeration, so we don't save it to the dataSource. */\n        ObjectHelper.hidePropertyFromObject(this, 'priority');\n\n        /* Hide the dataSource field from enumeration, so we don't save it to the dataSource. */\n        ObjectHelper.hidePropertyFromObject(this, 'dataSource');\n\n        if (dataSnapshot) {\n            this._buildFromSnapshot(dataSnapshot);\n        } else {\n            this._buildFromDataSource(dataSource);\n        }\n    }\n\n    getDataSource(){\n        return this._dataSource;\n    }\n\n    dataExists(){\n       return this.getDataSource().dataExists();\n    }\n\n    _getParentDataSource() {\n        if (!this._parentDataSource) {\n            return this._parentDataSource = Injection.get(DataSource, this._dataSource.parent());\n        }\n        return this._parentDataSource;\n    }\n\n    /**\n     *  Deletes the current object from the dataSource, and clears itself to free memory.\n     *  @returns {void}\n     */\n    remove() {\n        this.off();\n        delete this; //TODO <---- This is cryptic, what does it do?\n        return this._dataSource.remove(this);\n    }\n\n    /**\n     * Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.\n     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.\n     * @param {Function} [handler] Function that is called when the given event type is emitted.\n     * @param {Object} [context] Optional: context of 'this' inside the handler function when it is called.\n     * @returns {Promise} A promise that resolves once the event has happened\n     */\n    once(event, handler, context = this) {\n        return new Promise((resolve) => {\n            this.on(event, function onceWrapper() {\n                this.off(event, onceWrapper, context);\n                handler && handler.call(context, ...arguments);\n                resolve(...arguments);\n            }, this);\n        });\n    }\n\n    /**\n     * Subscribes to events emitted by this PrioritisedArray.\n     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.\n     * @param {Function} handler Function that is called when the given event type is emitted.\n     * @param {Object} [context] Optional: context of 'this' inside the handler function when it is called.\n     * @returns {void}\n     */\n    on(event, handler, context = this) {\n        let haveListeners = this._hasListenersOfType(event);\n        super.on(event, handler, context);\n\n        switch (event) {\n            case 'ready':\n                /* If we're already ready, fire immediately */\n                if (this._dataSource && this._dataSource.ready) {\n                    handler.call(context, this);\n                }\n                break;\n            case 'value':\n                if (!haveListeners) {\n                    /* Only subscribe to the dataSource if there are no previous listeners for this event type. */\n                    this._dataSource.setValueChangedCallback(this._onChildValue.bind(this));\n                } else {\n                    if (this._dataSource.ready) {\n                        /* If there are previous listeners, fire the value callback once to present the subscriber with inital data. */\n                        handler.call(context, this);\n                    }\n                }\n                break;\n            case 'added':\n\n                if (haveListeners) {\n                    this._dataSource.setChildAddedCallback(this._onChildAdded.bind(this));\n                }\n                break;\n            case 'changed':\n                /* We include the changed event in the value callback */\n                if (!this._hasListenersOfType('value')) {\n                    this._dataSource.setValueChangedCallback(this._onChildValue.bind(this));\n                }\n                break;\n            case 'moved':\n                if (!haveListeners) {\n                    this._dataSource.setChildMovedCallback(this._onChildMoved.bind(this));\n                }\n                break;\n            case 'removed':\n                if (!haveListeners) {\n                    this._dataSource.setChildRemovedCallback(this._onChildRemoved.bind(this));\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * Removes subscription to events emitted by this PrioritisedArray. If no handler or context is given, all handlers for\n     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.\n     * @param {String} event One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'.\n     * @param {Function} [handler] Function to remove from event callbacks.\n     * @param {Object} [context] Object to bind the given callback function to.\n     * @returns {void}\n     */\n    off(event, handler, context) {\n        if (event && (handler || context)) {\n            super.removeListener(event, handler, context);\n        } else {\n            super.removeAllListeners(event);\n        }\n\n        /* If we have no more listeners of this event type, remove dataSource callback. */\n        if (!this._hasListenersOfType(event)) {\n            switch (event) {\n                case 'ready':\n                    break;\n                case 'value':\n                    /* Value and changed have the same callback, due to the ability to be able to detect all property\n                     * changes at once.\n                     */\n                    if (!this._hasListenersOfType('changed')) {\n                        this._dataSource.removeValueChangedCallback();\n                    }\n                    break;\n                case 'added':\n                    this._dataSource.removeChildAddedCallback();\n                    break;\n                case 'moved':\n                    this._dataSource.removeChildMovedCallback();\n                    break;\n                case 'removed':\n                    if (!this._hasListenersOfType('value')) {\n                        this._dataSource.removeValueChangedCallback();\n                    }\n                    break;\n                case 'changed':\n                    this._dataSource.removeChildChangedCallback();\n                    break;\n                default:\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Allows multiple modifications to be made to the model without triggering dataSource pushes and event emits for each change.\n     * Triggers a push to the dataSource after executing the given method. This push should then emit an event notifying subscribers of any changes.\n     * @param {Function} method Function in which the model can be modified.\n     * @returns {Promise}\n     */\n    transaction(method) {\n        this.disableChangeListener();\n        method();\n        this.enableChangeListener();\n        return this._onSetterTriggered();\n    }\n\n    /**\n     * Disables pushes of local changes to the dataSource, and stops event emits that refer to the model's data.\n     * @returns {void}\n     */\n    disableChangeListener() {\n        this._changeListenersDisabled = true;\n    }\n\n\n    /**\n     * Enables pushes of local changes to the dataSource, and enables event emits that refer to the model's data.\n     * The change listener is active by default, so you'll only need to call this method if you've previously called disableChangeListener().\n     * @returns {void}\n     */\n    enableChangeListener() {\n        this._changeListenersDisabled = false;\n    }\n\n    getDataSourcePath() {\n        return this._dataSource.path();\n    }\n\n    /**\n     * Recursively builds getter/setter based properties on current PrioritisedObject from\n     * a given dataSnapshot. If an object value is detected, the object itself gets built as\n     * another PrioritisedObject and set to the current PrioritisedObject as a property.\n     * @param {Snapshot} dataSnapshot DataSnapshot to build the PrioritisedObject from.\n     * @returns {void}\n     * @private\n     */\n    _buildFromSnapshot(dataSnapshot) {\n\n        /* Set root object _priority */\n        this._priority = dataSnapshot.getPriority();\n        let data = dataSnapshot.val();\n        let numChildren = dataSnapshot.numChildren();\n\n        if (!this._id) {\n            this._id = dataSnapshot.key;\n        }\n\n        if (!this._dataSource) {\n            this._dataSource = dataSnapshot.ref;\n        }\n\n        /* If there is no data at this point yet, fire a ready event */\n        if (numChildren === 0) {\n            this._dataSource.ready = true;\n            this.emit('ready');\n            return;\n        }\n\n        this._buildFromData(data);\n\n        this._dataSource.ready = true;\n        this.emit('ready');\n    }\n\n    _buildFromData(data) {\n        for (let key in data) {\n            /* Only map properties that exists on our model */\n            let ownPropertyDescriptor = Object.getOwnPropertyDescriptor(this, key);\n            if (ownPropertyDescriptor && ownPropertyDescriptor.enumerable) {\n                /* If child is a primitive, listen to changes so we can sync with Firebase */\n                ObjectHelper.addPropertyToObject(this, key, data[key], true, true, () => this._onSetterTriggered(key), ({value}) => this._onGetterTriggered({propertyName: key, value}));\n            }\n        }\n    }\n\n    /**\n     * Clones a dataSource (to not disturb any existing callbacks defined on the original) and uses it\n     * to get a dataSnapshot which is used in _buildSnapshot to build our object.\n     * @param {DataSource} dataSource DataSource to build the PrioritisedObject from.\n     * @returns {void}\n     * @private\n     */\n    _buildFromDataSource(dataSource) {\n        if (!dataSource) {\n            return;\n        }\n        dataSource.once('value', this._buildFromSnapshot.bind(this));\n    }\n\n    /**\n     * Registers that whenever a getter has been called, then the callback function will be called\n     * @param callbackFunction\n     * @returns {Function} oldCallbackFunction The function that was replaced (if applicabble)\n     */\n    static setPropertyGetterSpy(callbackFunction) {\n        let oldPropertyGetterSpy = this._propertyGetterSpy;\n        this._propertyGetterSpy = callbackFunction;\n        return oldPropertyGetterSpy;\n    }\n\n    /**\n     *\n     * @returns {Function} oldCallbackFunction The function that was replaced (if applicabble)\n     */\n    static removePropertyGetterSpy() {\n        let oldPropertyGetterSpy = this._propertyGetterSpy;\n        this._propertyGetterSpy = null;\n        return oldPropertyGetterSpy;\n    }\n\n    /**\n     * This is used to keep track of any model getter accesses\n     */\n    static _propertyGetterSpy;\n\n    /**\n     * Gets called whenever a property value is set on this object.\n     * This can happen when local code modifies it, or when the dataSource updates it.\n     * We only propagate changes to the dataSource if the change was local.\n     * @returns {Promise}\n     * @private\n     */\n    _onSetterTriggered(key) {\n        if (!this._changeListenersDisabled) {\n            let changedProperties = this._accessedKeys.concat(key);\n            let changedValues = changedProperties.map((key) => this.shadow[key]);\n            this.emit('changed', this, changedProperties);\n            return this._dataSource.setWithPriority(ObjectHelper.getEnumerableProperties(this.shadow), this._priority);\n        } else {\n            this._accessedKeys.push(key);\n        }\n    }\n\n    _onGetterTriggered({propertyName, value}) {\n        if (!this._changeListenersDisabled && PrioritisedObject._propertyGetterSpy) {\n            PrioritisedObject._propertyGetterSpy(this, propertyName, value);\n        }\n    }\n\n    _getDiffingKeysFromOther(otherObject) {\n        return Object.keys(otherObject).filter((propertyName) => {\n            let ownPropertyDescriptor = Object.getOwnPropertyDescriptor(this, propertyName);\n            return ownPropertyDescriptor && ownPropertyDescriptor.enumerable && !isEqual(this[propertyName], otherObject[propertyName]);\n        });\n    }\n\n    /**\n     * Gets called whenever the current PrioritisedObject is changed by the dataSource.\n     * @param {Snapshot} dataSnapshot Snapshot of the new object value.\n     * @param {String} previousSiblingID ID of the model preceding the current one.\n     * @returns {void}\n     * @private\n     */\n    _onChildValue(dataSnapshot, previousSiblingID) {\n        this.disableChangeListener();\n        /* If the new dataSource data is equal to what we have locally,\n         * this is an update triggered by a local change having been pushed\n         * to the remote dataSource. We can ignore it.\n         */\n        let incomingData = dataSnapshot.val() || {};\n\n        let changedPropertyNames = this._getDiffingKeysFromOther(incomingData);\n\n        if (!changedPropertyNames.length) {\n            this.emit('value', this, previousSiblingID);\n            this.enableChangeListener();\n            return;\n        }\n\n        this._buildFromSnapshotWithoutSynchronizing(dataSnapshot);\n\n        this.emit('value', this, previousSiblingID);\n\n        if (this._hasListenersOfType('changed')) {\n            this.emit('changed', this, changedPropertyNames);\n        }\n\n        this.enableChangeListener();\n    }\n\n    _hasListenersOfType(type) {\n        return this.listeners(type, true);\n    }\n\n    _buildFromSnapshotWithoutSynchronizing(dataSnapshot) {\n        /* Make sure we don't trigger pushes to dataSource whilst repopulating with new dataSource data */\n        this.disableChangeListener();\n        this._buildFromSnapshot(dataSnapshot);\n        this.enableChangeListener();\n    }\n\n    /* TODO: implement partial updates of model */\n    _onChildAdded(dataSnapshot, previousSiblingID) {\n        this.emit('added', this, previousSiblingID);\n    }\n\n    _onChildMoved(dataSnapshot, previousSiblingID) {\n        this.emit('moved', this, previousSiblingID);\n    }\n\n    _onChildRemoved(dataSnapshot, previousSiblingID) {\n        this.emit('removed', this, previousSiblingID);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/PrioritisedObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 480,
    "kind": "class",
    "name": "PrioritisedObject",
    "memberof": "src/data/PrioritisedObject.js",
    "static": true,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/PrioritisedObject.js",
    "importStyle": "{PrioritisedObject}",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "_accessedKeys",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_accessedKeys",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 482,
    "kind": "get",
    "name": "id",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#id",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 483,
    "kind": "set",
    "name": "id",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#id",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "_id",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_id",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 485,
    "kind": "get",
    "name": "priority",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#priority",
    "access": "public",
    "description": "Priority (positioning) of the object in the dataSource",
    "lineNumber": 34,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 486,
    "kind": "get",
    "name": "dataSource",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#dataSource",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 487,
    "kind": "set",
    "name": "priority",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#priority",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "_priority",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_priority",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 489,
    "kind": "get",
    "name": "_inheritable",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_inheritable",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 490,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{PrioritisedObject} PrioritisedObject instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DataSource"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSource",
        "description": "DataSource to construct this PrioritisedObject with."
      },
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSnapshot",
        "description": "Optional: dataSnapshot already containing model data, so we can skip subscribing to the full data on the dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PrioritisedObject"
      ],
      "spread": false,
      "description": "PrioritisedObject instance."
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "_valueChangedCallback",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_valueChangedCallback",
    "access": "private",
    "description": "* Callbacks ***",
    "lineNumber": 63,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 493,
    "kind": "member",
    "name": "_events",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_events",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 494,
    "kind": "member",
    "name": "_dataSource",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_dataSource",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 496,
    "kind": "member",
    "name": "_changeListenersDisabled",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_changeListenersDisabled",
    "access": "private",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 497,
    "kind": "member",
    "name": "_childChangedListeners",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_childChangedListeners",
    "access": "private",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "getDataSource",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#getDataSource",
    "access": "public",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 499,
    "kind": "method",
    "name": "dataExists",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#dataExists",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "_getParentDataSource",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_getParentDataSource",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#remove",
    "access": "public",
    "description": " Deletes the current object from the dataSource, and clears itself to free memory.",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "once",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#once",
    "access": "public",
    "description": "Subscribes to the given event type exactly once; it automatically unsubscribes after the first time it is triggered.",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that resolves once the event has happened"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "Function that is called when the given event type is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Optional: context of 'this' inside the handler function when it is called."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that resolves once the event has happened"
    }
  },
  {
    "__docId__": 503,
    "kind": "method",
    "name": "on",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#on",
    "access": "public",
    "description": "Subscribes to events emitted by this PrioritisedArray.",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function that is called when the given event type is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Optional: context of 'this' inside the handler function when it is called."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 504,
    "kind": "method",
    "name": "off",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#off",
    "access": "public",
    "description": "Removes subscription to events emitted by this PrioritisedArray. If no handler or context is given, all handlers for\nthe given event are removed. If no parameters are given at all, all event types will have their handlers removed.",
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "One of the following Event Types: 'value', 'child_changed', 'child_moved', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "handler",
        "description": "Function to remove from event callbacks."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "Object to bind the given callback function to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 505,
    "kind": "method",
    "name": "transaction",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#transaction",
    "access": "public",
    "description": "Allows multiple modifications to be made to the model without triggering dataSource pushes and event emits for each change.\nTriggers a push to the dataSource after executing the given method. This push should then emit an event notifying subscribers of any changes.",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Function in which the model can be modified."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "disableChangeListener",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#disableChangeListener",
    "access": "public",
    "description": "Disables pushes of local changes to the dataSource, and stops event emits that refer to the model's data.",
    "lineNumber": 257,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 508,
    "kind": "method",
    "name": "enableChangeListener",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#enableChangeListener",
    "access": "public",
    "description": "Enables pushes of local changes to the dataSource, and enables event emits that refer to the model's data.\nThe change listener is active by default, so you'll only need to call this method if you've previously called disableChangeListener().",
    "lineNumber": 267,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 510,
    "kind": "method",
    "name": "getDataSourcePath",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#getDataSourcePath",
    "access": "public",
    "description": null,
    "lineNumber": 271,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 511,
    "kind": "method",
    "name": "_buildFromSnapshot",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_buildFromSnapshot",
    "access": "private",
    "description": "Recursively builds getter/setter based properties on current PrioritisedObject from\na given dataSnapshot. If an object value is detected, the object itself gets built as\nanother PrioritisedObject and set to the current PrioritisedObject as a property.",
    "lineNumber": 283,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSnapshot",
        "description": "DataSnapshot to build the PrioritisedObject from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 515,
    "kind": "method",
    "name": "_buildFromData",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_buildFromData",
    "access": "private",
    "description": null,
    "lineNumber": 311,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 516,
    "kind": "method",
    "name": "_buildFromDataSource",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_buildFromDataSource",
    "access": "private",
    "description": "Clones a dataSource (to not disturb any existing callbacks defined on the original) and uses it\nto get a dataSnapshot which is used in _buildSnapshot to build our object.",
    "lineNumber": 329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "DataSource"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSource",
        "description": "DataSource to build the PrioritisedObject from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 517,
    "kind": "method",
    "name": "setPropertyGetterSpy",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject.setPropertyGetterSpy",
    "access": "public",
    "description": "Registers that whenever a getter has been called, then the callback function will be called",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} oldCallbackFunction The function that was replaced (if applicabble)"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callbackFunction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "oldCallbackFunction The function that was replaced (if applicabble)"
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "_propertyGetterSpy",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "static": true,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject._propertyGetterSpy",
    "access": "private",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "method",
    "name": "removePropertyGetterSpy",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject.removePropertyGetterSpy",
    "access": "public",
    "description": "",
    "lineNumber": 351,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} oldCallbackFunction The function that was replaced (if applicabble)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "oldCallbackFunction The function that was replaced (if applicabble)"
    },
    "params": []
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "_onSetterTriggered",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_onSetterTriggered",
    "access": "private",
    "description": "Gets called whenever a property value is set on this object.\nThis can happen when local code modifies it, or when the dataSource updates it.\nWe only propagate changes to the dataSource if the change was local.",
    "lineNumber": 369,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 523,
    "kind": "method",
    "name": "_onGetterTriggered",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_onGetterTriggered",
    "access": "private",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"propertyName\": *, \"value\": *}"
        ],
        "defaultRaw": {
          "propertyName": null,
          "value": null
        },
        "defaultValue": "{\"propertyName\":null,\"value\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "_getDiffingKeysFromOther",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_getDiffingKeysFromOther",
    "access": "private",
    "description": null,
    "lineNumber": 386,
    "undocument": true,
    "params": [
      {
        "name": "otherObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "_onChildValue",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_onChildValue",
    "access": "private",
    "description": "Gets called whenever the current PrioritisedObject is changed by the dataSource.",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Snapshot"
        ],
        "spread": false,
        "optional": false,
        "name": "dataSnapshot",
        "description": "Snapshot of the new object value."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingID",
        "description": "ID of the model preceding the current one."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 526,
    "kind": "method",
    "name": "_hasListenersOfType",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_hasListenersOfType",
    "access": "private",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "method",
    "name": "_buildFromSnapshotWithoutSynchronizing",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_buildFromSnapshotWithoutSynchronizing",
    "access": "private",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "params": [
      {
        "name": "dataSnapshot",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 528,
    "kind": "method",
    "name": "_onChildAdded",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_onChildAdded",
    "access": "private",
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "params": [
      {
        "name": "dataSnapshot",
        "types": [
          "*"
        ]
      },
      {
        "name": "previousSiblingID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 529,
    "kind": "method",
    "name": "_onChildMoved",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_onChildMoved",
    "access": "private",
    "description": null,
    "lineNumber": 443,
    "undocument": true,
    "params": [
      {
        "name": "dataSnapshot",
        "types": [
          "*"
        ]
      },
      {
        "name": "previousSiblingID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 530,
    "kind": "method",
    "name": "_onChildRemoved",
    "memberof": "src/data/PrioritisedObject.js~PrioritisedObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/PrioritisedObject.js~PrioritisedObject#_onChildRemoved",
    "access": "private",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "params": [
      {
        "name": "dataSnapshot",
        "types": [
          "*"
        ]
      },
      {
        "name": "previousSiblingID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 531,
    "kind": "file",
    "name": "src/data/Snapshot.js",
    "content": "/**\n\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\n/**\n * @ignore\n * Abstraction of a data snapshot\n */\nexport class Snapshot{\n    constructor(dataSnapshot){}\n\n    get key(){}\n    val(){}\n    get ref(){}\n    getPriority(){}\n    forEach(){}\n    numChildren(){}\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/Snapshot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 532,
    "kind": "class",
    "name": "Snapshot",
    "memberof": "src/data/Snapshot.js",
    "static": true,
    "longname": "src/data/Snapshot.js~Snapshot",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/Snapshot.js",
    "importStyle": "{Snapshot}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 533,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 534,
    "kind": "get",
    "name": "key",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#key",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": null
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "val",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#val",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 536,
    "kind": "get",
    "name": "ref",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#ref",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": null
  },
  {
    "__docId__": 537,
    "kind": "method",
    "name": "getPriority",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#getPriority",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 538,
    "kind": "method",
    "name": "forEach",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#forEach",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 539,
    "kind": "method",
    "name": "numChildren",
    "memberof": "src/data/Snapshot.js~Snapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/Snapshot.js~Snapshot#numChildren",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 540,
    "kind": "file",
    "name": "src/data/datasources/FirebaseDataSource.js",
    "content": "/**\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\nimport firebase                     from 'firebase';\nimport merge                        from 'lodash/merge.js';\nimport {DataSource}                 from '../DataSource.js';\nimport {ObjectHelper}               from '../../utils/ObjectHelper.js';\nimport {provide}                    from '../../utils/di/Decorators.js';\nimport {combineOptions}             from '../../utils/CombineOptions.js';\n\n/**\n * @ignore\n * An implementation of the DataSource allowing Firebase integration\n */\n@provide(DataSource)\nexport class FirebaseDataSource extends DataSource {\n\n    get dataReference() {\n        return this._orderedDataReference;\n    }\n\n    set dataReference(value) {\n        this._orderedDataReference = value;\n    }\n\n    /**\n     * @param {String} path Full path to resource in remote data storage.\n     * @return {FirebaseDataSource} FirebaseDataSource instance.\n     * @param {Object} options Optional: options to construct the DataSource with.\n     * @param {[key: String, value: String]} [options.equalTo] Optional, only subscribe to items with a certain value.\n     * @param {String} [options.orderBy] Optional, order all items received through the dataSource.\n     *                                   Options are: '.priority', '.value', or a string containing the child key to order by (e.g. 'MyModelProperty')\n     * @param {Number} [options.limitToFirst]   Optional, only subscribe to the first amount of entries.\n     * @param {Number} [options.limitToLast]    Optional, only subscribe to the last amount of entries.\n     * @param {Number} [options.startAt]        Optional, only subscribe to the entries from a certain value onwards\n     * @param {Number} [options.endAt]          Optional, only subscribe to the entries towards a certain value\n     * @param {Promise} [options.synced]        Optional, a promise to tell the data source that it is only synchronized after this promise is resolved\n     **/\n    constructor(path, options = { orderBy: '.priority' }) {\n        super(path);\n        this._onValueCallback = null;\n        this._onAddCallback = null;\n        this._onChangeCallback = null;\n        this._onMoveCallback = null;\n        this._onRemoveCallback = null;\n        this._firebase = options.customFirebase || firebase;\n\n        this._dataReference = this._firebase.database().ref(path);\n        this.handlers = {};\n        this.options = combineOptions({ synced: Promise.resolve() }, options);\n        this._synced = this.options.synced;\n\n        /* Populate the orderedReference, which is the standard Firebase reference with an optional ordering\n         * defined. This needs to be saved seperately, because methods like child() and key() can't be called\n         * from the ordered reference, and must instead be performed on the standard reference. */\n\n        if (this.options.orderBy && this.options.orderBy === '.priority' && !this.options.equalTo) {\n            this._orderedDataReference = this._dataReference.orderByPriority();\n        } else if (this.options.orderBy && this.options.orderBy === '.value') {\n            this._orderedDataReference = this._dataReference.orderByValue();\n        } else if (this.options.orderBy && this.options.orderBy !== '') {\n            let {orderBy} = this.options;\n            if(orderBy === 'id'){\n                this._orderedDataReference = this._dataReference.orderByKey();\n            } else {\n                this._orderedDataReference = this._dataReference.orderByChild(this.options.orderBy);\n            }\n        } else if (this.options.equalTo) {\n            let [key, value] = this.options.equalTo;\n            if (key === 'id') {\n                this._orderedDataReference = this._dataReference.orderByKey().equalTo(value);\n            } else {\n                this._orderedDataReference = this._dataReference.orderByChild(key).equalTo(value);\n            }\n        } else {\n            this._orderedDataReference = this._dataReference;\n        }\n\n        if (this.options.startAt !== undefined) {\n            this._orderedDataReference = this._orderedDataReference.startAt(this.options.startAt);\n        }\n        if (this.options.endAt !== undefined) {\n            this._orderedDataReference = this._orderedDataReference.endAt(this.options.endAt);\n        }\n\n        if (this.options.limitToFirst !== undefined) {\n            this._orderedDataReference = this._orderedDataReference.limitToFirst(this.options.limitToFirst);\n        } else if (this.options.limitToLast !== undefined) {\n            this._orderedDataReference = this._orderedDataReference.limitToLast(this.options.limitToLast);\n        }\n\n\n        /* Bind all local methods to the current object instance, so we can refer to \"this\"\n         * in the methods as expected, even when they're called from event handlers. */\n    }\n\n    dataExists() {\n        return new Promise((resolve) => {\n            this._dataReference.once('value', (snapshot) => {\n                return resolve(snapshot.exists());\n            }, ()=>{\n                resolve(false);\n            });\n        });\n    }\n\n\n    /**\n     * Returns the full path to this dataSource's source on the remote storage provider.\n     * @returns {String} Full resource path.\n     */\n    toString() {\n        return this._dataReference.toString();\n    }\n\n    /**\n     * Resolves when the DataSource is synchronized to the server\n     * @returns {Promise} Resolves when the DataSource is synchronized\n     */\n    synced() {\n        return this._synced;\n    }\n\n    /**\n     * Returns a dataSource reference to the given child branch of the current datasource.\n     * @param {String} childName Child branch name.\n     * @param {Object} options Optional: additional options to pass to new DataSource instance.\n     * @returns {DataSource} New dataSource instance pointing to the given child branch.\n     */\n    child(childName, options = {}) {\n        return new FirebaseDataSource(`${this.path()}/${childName}`, { customFirebase: this.options.customFirebase, ...options });\n    }\n\n    /**\n     * Returns the full URL to the path on the dataSource. Functionally identical to toString().\n     * @returns {String} Full resource path.\n     */\n    path() {\n        let rootUrl = this.root();\n        let parentUrl = this.parent();\n\n        let relativePath = parentUrl.replace(rootUrl, '');\n        return `${relativePath}/${this.key()}`;\n    }\n\n    /**\n     * Returns the name of the current branch in the path on the dataSource.\n     * @returns {String} Current branch name.\n     */\n    key() {\n        return (this._dataReference.key || '').toString();\n    }\n\n    /**\n     * Returns the full URL to the parent of the current branch on the dataSource.\n     * @returns {String} Full resource path of parent.\n     */\n    parent() {\n        return (this._dataReference.parent || '').toString();\n    }\n\n    /**\n     * Returns the full URL to the root on the dataSource.\n     * @returns {String} Full resource path of root.\n     */\n    root() {\n        return (this._dataReference.root || '').toString();\n    }\n\n    /**\n     * Writes newData to the path this dataSource was constructed with.\n     * @param {Object} newData Data to write to dataSource.\n     * @returns {Promise} Resolves when write to server is complete.\n     */\n    set(newData) {\n        let completionPromise = this._dataReference.set(newData).catch((error) => this._rethrowFirebaseError(error, newData));\n\n        /* Append another promise to the chain to keep track of whether it's still synchronized */\n        this._synced = this._synced.then(() => completionPromise);\n        return completionPromise;\n    }\n\n    /**\n     * Removes the object and all underlying children that this dataSource points to.\n     * @returns {Promise}\n     */\n    remove() {\n        return this._dataReference.remove().catch((error) => this._rethrowFirebaseError(error, null))\n    }\n\n    /**\n     * Sets data at the specified path(s) without touching unspecified paths\n     * @returns {Promise}\n     */\n    update(data) {\n        return this._dataReference.update(data).catch((error) => this._rethrowFirebaseError(error, data));\n    }\n\n    /**\n     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by\n     * the dataSource.\n     * @param {Object} newData New data to append to dataSource.\n     * @returns {FirebaseDataSource} A new FirebaseDataSource pointing to the injected data.\n     */\n    push(newData = {}) {\n        newData = (newData === undefined || newData === null) ? {} : newData;\n        let pushResult = this._dataReference.push(newData);\n        pushResult.catch((error) => this._rethrowFirebaseError(error, newData));\n        return new FirebaseDataSource(`${this.path()}/${pushResult.key}`, {\n            synced: pushResult,\n            customFirebase: this.options.customFirebase\n        });\n    }\n\n    /**\n     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.\n     * @param {Object} newData New data to set.\n     * @param {String|Number} priority Priority value by which the data should be ordered.\n     * @returns {Promise} Resolves when write to server is complete.\n     */\n    setWithPriority(newData, priority) {\n        /* Rethrow the error in order to be able to catch it higher up */\n        let completionPromise = this.dataReference.setWithPriority(newData, priority).catch((error) =>\n            this._rethrowFirebaseError(error, newData)\n        );\n        /* Append another promise to the chain to keep track of whether it's still synchronized. Fail silently\n         * since we already have error handling above */\n        this._synced = this._synced.then(() => completionPromise).catch(() => {\n        });\n        return completionPromise;\n    }\n\n    /**\n     * Sets the priority (ordering) of an object on a given dataSource.\n     * @param {String|Number} newPriority New priority value to order data by.\n     * @returns {void}\n     */\n    setPriority(newPriority) {\n        return this.dataReference.setPriority(newPriority);\n    }\n\n    /**\n     * Orders the DataSource's childs by the value in child[key].\n     * @param {String} childKey Key of the field to order by.\n     * @returns {DataSource} New dataSource instance.\n     */\n    orderByChild(childKey) {\n        return new FirebaseDataSource(this.path(), merge({}, this.options, {\n            orderBy: childKey,\n            customFirebase: this.options.customFirebase\n        }));\n    }\n\n    /**\n     * Orders the DataSource's childs by their key names, ignoring their priority.\n     * @returns {DataSource} New dataSource instance.\n     */\n    orderByKey() {\n        return new FirebaseDataSource(this.path(), merge({}, this.options, {\n            orderBy: '.key',\n            customFirebase: this.options.customFirebase\n        }));\n    }\n\n    /**\n     * Orders the DataSource's childs by their values, ignoring their priority.\n     * @returns {DataSource} New dataSource instance.\n     */\n    orderByValue() {\n        return new FirebaseDataSource(this.path(), merge({}, this.options, {\n            orderBy: '.value',\n            customFirebase: this.options.customFirebase\n        }));\n    }\n\n    /**\n     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.\n     * @param {Number} amount Amount of items to limit the dataSource to.\n     * @returns {DataSource} New dataSource instance.\n     */\n    limitToFirst(amount) {\n        return new FirebaseDataSource(this.path(), merge({}, this.options, {\n            limitToFirst: amount,\n            customFirebase: this.options.customFirebase\n        }));\n    }\n\n    /**\n     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.\n     * @param {Number} amount Amount of items to limit the dataSource to.\n     * @returns {DataSource} New dataSource instance.\n     */\n    limitToLast(amount) {\n        return new FirebaseDataSource(this.path(), merge({}, this.options, { limitToLast: amount }));\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.\n     * @param {String} provider google, facebook, github, or twitter\n     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @returns {Promise} A promise that resolves after successful authentication.\n     */\n    authWithOAuthToken(provider, credentials, onComplete) {\n        let providerObject = this.createProviderFromCredential(provider, credentials);\n        return this._firebase.auth().signInWithCredential(providerObject).then((user) => {\n            if (onComplete) {\n                onComplete(user);\n            }\n            return user;\n        });\n    }\n\n    /**\n     * Creates a provider with the specified type\n     *\n     * @param {String} providerType Can be 'password' or 'facebook'\n     * @param {String|Object} credential if 'password' providerType, then an object {email:String,password:String}. If\n     * 'facebook' providerType, then a string containing the API token.\n     * @returns {Provider}\n     */\n    createProviderFromCredential(providerType, credential) {\n        let providerObject;\n        switch (providerType) {\n            case 'password':\n                providerObject = this._firebase.auth.EmailAuthProvider.credential(credential.email, credential.password);\n                break;\n            case 'facebook':\n                providerObject = this._firebase.auth.FacebookAuthProvider.credential(credential);\n                break;\n            //TODO: Add more here\n        }\n        return providerObject;\n    }\n\n    /**\n     * Merges the current user with the specified provider.\n     * @param {Provider} provider\n     * @returns {Authentication}\n     */\n    linkCurrentUserWithProvider(provider) {\n        return this._firebase.auth().currentUser.link(provider);\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with a custom auth token or secret.\n     * @param {String} authToken Authentication token or secret.\n     * @param {Function} onCxomplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @returns {Promise} A promise that resolves after successful authentication.\n     */\n    authWithCustomToken(authToken, onComplete) {\n        return this._firebase.auth().signInWithCustomToken(authToken).then((user) => {\n            if (onComplete) {\n                onComplete(user);\n            }\n            return user;\n        });\n    }\n\n    /**\n     * Registers a user with instances of this DataSource with the given email/password credentials.\n     * @param {String|Object} credentials Object with key/value pairs {email: \"value\", password:\"value\"}.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @returns {Promise}\n     */\n    registerWithPassword(credentials, onComplete) {\n        return this._firebase.auth().createUserWithEmailAndPassword(credentials.email, credentials.password);\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with the given email/password credentials.\n     * @param {String|Object} credentials Object with key/value pairs {email: \"value\", password:\"value\"}.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @returns {Promise} A promise that resolves after successful authentication.\n     */\n    authWithPassword(credentials, onComplete) {\n        return this._firebase.auth().signInWithEmailAndPassword(credentials.email, credentials.password).then((user) => {\n            if (onComplete) {\n                onComplete(user);\n            }\n            return user;\n        });\n    }\n\n    /**\n     * Authenticates all instances of this DataSource as an anonymous user.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {Promise} A promise that resolves after successful authentication.\n     */\n    authAnonymously(options) {\n        return this._firebase.auth().signInAnonymously();\n    }\n\n    /**\n     * Send a password reset to the email adress\n     * @param emailAddress\n     * @returns {Promise}\n     */\n    sendPasswordResetEmail(emailAddress) {\n        return this._firebase.auth().sendPasswordResetEmail(emailAddress);\n    }\n\n    /**\n     * Fetches the current user's authentication state.\n     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.\n     * If the user is not authenticated, returns null.\n     * @returns {Object|null} User auth object.\n     */\n    getAuth() {\n        let firebaseAuth = this._firebase.auth();\n        let { currentUser } = firebaseAuth;\n        if (!this._authDataPresent) {\n            if (currentUser) {\n                this._authDataPresent = true;\n                return Promise.resolve(currentUser);\n            } else {\n                return new Promise((resolve) => {\n                    firebaseAuth.onAuthStateChanged((newUser) => {\n                        this._authDataPresent = true;\n                        resolve(newUser);\n                    });\n                });\n            }\n        } else {\n            return Promise.resolve(currentUser);\n        }\n    }\n\n    /**\n     * Logs out from the datasource, allowing to re-authenticate at a later time.\n     * @returns {void}\n     */\n    unauth() {\n        return this._firebase.auth().signOut();\n    }\n\n    /**\n     * Subscribe to an event emitted by the DataSource.\n     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.\n     * @param {Function} handler Function to call when the subscribed event is emitted.\n     * @param {Object} context Context to set 'this' to when calling the handler function.\n     * @returns {void}\n     */\n    on(event, handler, context = this) {\n        let boundHandler = this.handlers[handler] = handler.bind(this);\n        this._orderedDataReference.on(event, boundHandler, (reasonForFailure) => {\n            console.log(`Read failed: ${reasonForFailure}`);\n        });\n    }\n\n    /**\n     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe again once it has been emitted a single time.\n     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.\n     * @param {Function} handler Function to call when the subscribed event is emitted.\n     * @param {Object} context Context to set 'this' to when calling the handler function.\n     * @returns {Promise}\n     */\n    once(event, handler, context = this) {\n        return new Promise((resolve) => {\n            function onceWrapper() {\n                this.off(event, onceWrapper);\n                handler && handler.call(context, ...arguments);\n                resolve(...arguments);\n            }\n            this.on(event, onceWrapper, this);\n        });\n    }\n\n\n    /**\n     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for\n     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.\n     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'.\n     * @param {Function} handler Optional: Function that was used in previous subscription.\n     * @returns {void}\n     */\n    off(event, handler) {\n        let boundHandler = this.handlers[handler];\n        this._orderedDataReference.off(event, boundHandler);\n    }\n\n    /**\n     * Sets the callback triggered when dataSource updates the data.\n     * @param {Function} callback Callback function to call when the subscribed data value changes.\n     * @deprecated Use the on() method instead.\n     * @returns {void}\n     **/\n    setValueChangedCallback(callback) {\n        this._onValueCallback = callback;\n        this.on('value', callback);\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource updates the data.\n     * @deprecated Use the off() method instead.\n     * @returns {void}\n     **/\n    removeValueChangedCallback() {\n        if (this._onValueCallback) {\n            this.off('value', this._onValueCallback);\n            this._onValueCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource adds a data element.\n     * @param {Function} callback Callback function to call when a new data child is added.\n     * @deprecated Use the on() method instead.\n     * @returns {void}\n     **/\n    setChildAddedCallback(callback) {\n        this._onAddCallback = callback;\n        this.on('child_added', callback);\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource adds a data element.\n     * @deprecated Use the off() method instead.\n     * @returns {void}\n     **/\n    removeChildAddedCallback() {\n        if (this._onAddCallback) {\n            this.off('child_added', this._onAddCallback);\n            this._onAddCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource changes a data element.\n     * @param {Function} callback Callback function to call when a child is changed.\n     * @deprecated Use the on() method instead.\n     * @returns {void}\n     **/\n    setChildChangedCallback(callback) {\n        this._onChangeCallback = callback;\n        this.on('child_changed', callback);\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource changes a data element.\n     * @deprecated Use the off() method instead.\n     * @returns {void}\n     **/\n    removeChildChangedCallback() {\n        if (this._onChangeCallback) {\n            this.off('child_changed', this._onChangeCallback);\n            this._onChangeCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource moves a data element.\n     * @param {Function} callback Callback function to call when a child is moved.\n     * @deprecated Use the on() method instead.\n     * @returns {void}\n     **/\n    setChildMovedCallback(callback) {\n        this._onMoveCallback = callback;\n        this.on('child_moved', callback);\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource moves a data element.\n     * @deprecated Use the off() method instead.\n     * @returns {void}\n     **/\n    removeChildMovedCallback() {\n        if (this._onMoveCallback) {\n            this.off('child_moved', this._onMoveCallback);\n            this._onMoveCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource removes a data element.\n     * @param {Function} callback Callback function to call when a child is removed.\n     * @deprecated Use the on() method instead.\n     * @returns {void}\n     **/\n    setChildRemovedCallback(callback) {\n        this._onRemoveCallback = callback;\n        this.on('child_removed', this._onRemoveCallback.bind(this));\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource removes a data element.\n     * @deprecated Use the off() method instead.\n     * @returns {void}\n     **/\n    removeChildRemovedCallback() {\n        if (this._onRemoveCallback) {\n            this.off('child_removed', this._onRemoveCallback);\n            this._onRemoveCallback = null;\n        }\n    }\n\n\n    /**\n     * Performs an atomic transaction\n     * @param {Function} transactionFunction A function that takes the current value as a single argument, and\n     * returns the new value.\n     * @returns {Promise} Resolves the new value when the transaction is finished\n     */\n    atomicTransaction(transactionFunction) {\n        return new Promise((resolve, reject) => {\n            this._dataReference.transaction(transactionFunction, (error, wasSuccessfullyCommited, snapshot) => {\n                if (error) {\n                    return this._rethrowFirebaseError(error, {}).catch(reject);\n                }\n                if (!wasSuccessfullyCommited) {\n                    console.log(`Transaction failed, retrying`);\n                    return this.atomicTransaction(transactionFunction);\n                }\n                resolve(snapshot.val());\n            });\n        });\n    }\n\n    /**\n     * Rethrows a an error in Firebase to contain some more data to better be able to see the cause of the error\n     * @param error\n     * @param newData\n     * @private\n     */\n    _rethrowFirebaseError(error, newData) {\n        error.data = newData;\n        error.path = this.path();\n        return Promise.reject(error);\n    }\n\n    /**\n     * Gets a symbolic representation of a timestamp as being run on the server-side\n     * @returns {*}\n     */\n    getTimestampSymbol() {\n        return this._firebase.database.ServerValue.TIMESTAMP;\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/FirebaseDataSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 541,
    "kind": "class",
    "name": "FirebaseDataSource",
    "memberof": "src/data/datasources/FirebaseDataSource.js",
    "static": true,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/FirebaseDataSource.js",
    "importStyle": "{FirebaseDataSource}",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "decorators": [
      {
        "name": "provide",
        "arguments": "(DataSource)"
      }
    ],
    "interface": false,
    "extends": [
      "src/data/DataSource.js~DataSource"
    ]
  },
  {
    "__docId__": 542,
    "kind": "get",
    "name": "dataReference",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#dataReference",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 543,
    "kind": "set",
    "name": "dataReference",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#dataReference",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true
  },
  {
    "__docId__": 544,
    "kind": "member",
    "name": "_orderedDataReference",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_orderedDataReference",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 545,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 44,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Full path to resource in remote data storage."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional: options to construct the DataSource with."
      },
      {
        "nullable": null,
        "types": [
          "[key: String, value: String]"
        ],
        "spread": false,
        "optional": true,
        "name": "options.equalTo",
        "description": "Optional, only subscribe to items with a certain value."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.orderBy",
        "description": "Optional, order all items received through the dataSource.\n                                  Options are: '.priority', '.value', or a string containing the child key to order by (e.g. 'MyModelProperty')"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.limitToFirst",
        "description": "Optional, only subscribe to the first amount of entries."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.limitToLast",
        "description": "Optional, only subscribe to the last amount of entries."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.startAt",
        "description": "Optional, only subscribe to the entries from a certain value onwards"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.endAt",
        "description": "Optional, only subscribe to the entries towards a certain value"
      },
      {
        "nullable": null,
        "types": [
          "Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.synced",
        "description": "Optional, a promise to tell the data source that it is only synchronized after this promise is resolved"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FirebaseDataSource"
      ],
      "spread": false,
      "description": "FirebaseDataSource instance."
    }
  },
  {
    "__docId__": 546,
    "kind": "member",
    "name": "_onValueCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_onValueCallback",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 547,
    "kind": "member",
    "name": "_onAddCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_onAddCallback",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 548,
    "kind": "member",
    "name": "_onChangeCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_onChangeCallback",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 549,
    "kind": "member",
    "name": "_onMoveCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_onMoveCallback",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 550,
    "kind": "member",
    "name": "_onRemoveCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_onRemoveCallback",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 551,
    "kind": "member",
    "name": "_firebase",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_firebase",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 552,
    "kind": "member",
    "name": "_dataReference",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_dataReference",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 553,
    "kind": "member",
    "name": "handlers",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#handlers",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 554,
    "kind": "member",
    "name": "options",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#options",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 555,
    "kind": "member",
    "name": "_synced",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_synced",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 567,
    "kind": "method",
    "name": "dataExists",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#dataExists",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "method",
    "name": "toString",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#toString",
    "access": "public",
    "description": "Returns the full path to this dataSource's source on the remote storage provider.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path."
    },
    "params": []
  },
  {
    "__docId__": 569,
    "kind": "method",
    "name": "synced",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#synced",
    "access": "public",
    "description": "Resolves when the DataSource is synchronized to the server",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the DataSource is synchronized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the DataSource is synchronized"
    },
    "params": []
  },
  {
    "__docId__": 570,
    "kind": "method",
    "name": "child",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#child",
    "access": "public",
    "description": "Returns a dataSource reference to the given child branch of the current datasource.",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance pointing to the given child branch."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "childName",
        "description": "Child branch name."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional: additional options to pass to new DataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance pointing to the given child branch."
    }
  },
  {
    "__docId__": 571,
    "kind": "method",
    "name": "path",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#path",
    "access": "public",
    "description": "Returns the full URL to the path on the dataSource. Functionally identical to toString().",
    "lineNumber": 143,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path."
    },
    "params": []
  },
  {
    "__docId__": 572,
    "kind": "method",
    "name": "key",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#key",
    "access": "public",
    "description": "Returns the name of the current branch in the path on the dataSource.",
    "lineNumber": 155,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Current branch name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Current branch name."
    },
    "params": []
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "parent",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#parent",
    "access": "public",
    "description": "Returns the full URL to the parent of the current branch on the dataSource.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path of parent."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path of parent."
    },
    "params": []
  },
  {
    "__docId__": 574,
    "kind": "method",
    "name": "root",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#root",
    "access": "public",
    "description": "Returns the full URL to the root on the dataSource.",
    "lineNumber": 171,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path of root."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path of root."
    },
    "params": []
  },
  {
    "__docId__": 575,
    "kind": "method",
    "name": "set",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#set",
    "access": "public",
    "description": "Writes newData to the path this dataSource was constructed with.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when write to server is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to write to dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when write to server is complete."
    }
  },
  {
    "__docId__": 577,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#remove",
    "access": "public",
    "description": "Removes the object and all underlying children that this dataSource points to.",
    "lineNumber": 192,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 578,
    "kind": "method",
    "name": "update",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#update",
    "access": "public",
    "description": "Sets data at the specified path(s) without touching unspecified paths",
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    },
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 579,
    "kind": "method",
    "name": "push",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#push",
    "access": "public",
    "description": "Writes newData to the path this dataSource was constructed with, appended by a random UID generated by\nthe dataSource.",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{FirebaseDataSource} A new FirebaseDataSource pointing to the injected data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to append to dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "FirebaseDataSource"
      ],
      "spread": false,
      "description": "A new FirebaseDataSource pointing to the injected data."
    }
  },
  {
    "__docId__": 580,
    "kind": "method",
    "name": "setWithPriority",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setWithPriority",
    "access": "public",
    "description": "Writes newData with given priority (ordering) to the path this dataSource was constructed with.",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when write to server is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to set."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "priority",
        "description": "Priority value by which the data should be ordered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when write to server is complete."
    }
  },
  {
    "__docId__": 582,
    "kind": "method",
    "name": "setPriority",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setPriority",
    "access": "public",
    "description": "Sets the priority (ordering) of an object on a given dataSource.",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPriority",
        "description": "New priority value to order data by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 583,
    "kind": "method",
    "name": "orderByChild",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#orderByChild",
    "access": "public",
    "description": "Orders the DataSource's childs by the value in child[key].",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "childKey",
        "description": "Key of the field to order by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 584,
    "kind": "method",
    "name": "orderByKey",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#orderByKey",
    "access": "public",
    "description": "Orders the DataSource's childs by their key names, ignoring their priority.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    },
    "params": []
  },
  {
    "__docId__": 585,
    "kind": "method",
    "name": "orderByValue",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#orderByValue",
    "access": "public",
    "description": "Orders the DataSource's childs by their values, ignoring their priority.",
    "lineNumber": 274,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    },
    "params": []
  },
  {
    "__docId__": 586,
    "kind": "method",
    "name": "limitToFirst",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#limitToFirst",
    "access": "public",
    "description": "Returns a new dataSource reference that will limit the subscription to only the first given amount items.",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of items to limit the dataSource to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 587,
    "kind": "method",
    "name": "limitToLast",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#limitToLast",
    "access": "public",
    "description": "Returns a new dataSource reference that will limit the subscription to only the last given amount items.",
    "lineNumber": 298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of items to limit the dataSource to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 588,
    "kind": "method",
    "name": "authWithOAuthToken",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#authWithOAuthToken",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with the given OAuth provider and credentials.",
    "lineNumber": 311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that resolves after successful authentication."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "google, facebook, github, or twitter"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that resolves after successful authentication."
    }
  },
  {
    "__docId__": 589,
    "kind": "method",
    "name": "createProviderFromCredential",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#createProviderFromCredential",
    "access": "public",
    "description": "Creates a provider with the specified type",
    "lineNumber": 329,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Provider}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "providerType",
        "description": "Can be 'password' or 'facebook'"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credential",
        "description": "if 'password' providerType, then an object {email:String,password:String}. If\n'facebook' providerType, then a string containing the API token."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 590,
    "kind": "method",
    "name": "linkCurrentUserWithProvider",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#linkCurrentUserWithProvider",
    "access": "public",
    "description": "Merges the current user with the specified provider.",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Authentication}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Provider"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Authentication"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 591,
    "kind": "method",
    "name": "authWithCustomToken",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#authWithCustomToken",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with a custom auth token or secret.",
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that resolves after successful authentication."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "authToken",
        "description": "Authentication token or secret."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onCxomplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that resolves after successful authentication."
    }
  },
  {
    "__docId__": 592,
    "kind": "method",
    "name": "registerWithPassword",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#registerWithPassword",
    "access": "public",
    "description": "Registers a user with instances of this DataSource with the given email/password credentials.",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Object with key/value pairs {email: \"value\", password:\"value\"}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 593,
    "kind": "method",
    "name": "authWithPassword",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#authWithPassword",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with the given email/password credentials.",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that resolves after successful authentication."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Object with key/value pairs {email: \"value\", password:\"value\"}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that resolves after successful authentication."
    }
  },
  {
    "__docId__": 594,
    "kind": "method",
    "name": "authAnonymously",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#authAnonymously",
    "access": "public",
    "description": "Authenticates all instances of this DataSource as an anonymous user.",
    "lineNumber": 406,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} A promise that resolves after successful authentication."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "A promise that resolves after successful authentication."
    }
  },
  {
    "__docId__": 595,
    "kind": "method",
    "name": "sendPasswordResetEmail",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#sendPasswordResetEmail",
    "access": "public",
    "description": "Send a password reset to the email adress",
    "lineNumber": 415,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emailAddress",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 596,
    "kind": "method",
    "name": "getAuth",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#getAuth",
    "access": "public",
    "description": "Fetches the current user's authentication state.\nIf the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.\nIf the user is not authenticated, returns null.",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null} User auth object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": "User auth object."
    },
    "params": []
  },
  {
    "__docId__": 597,
    "kind": "member",
    "name": "_authDataPresent",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_authDataPresent",
    "access": "private",
    "description": null,
    "lineNumber": 430,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 599,
    "kind": "method",
    "name": "unauth",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#unauth",
    "access": "public",
    "description": "Logs out from the datasource, allowing to re-authenticate at a later time.",
    "lineNumber": 449,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 600,
    "kind": "method",
    "name": "on",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#on",
    "access": "public",
    "description": "Subscribe to an event emitted by the DataSource.",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call when the subscribed event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Context to set 'this' to when calling the handler function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 601,
    "kind": "method",
    "name": "once",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#once",
    "access": "public",
    "description": "Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe again once it has been emitted a single time.",
    "lineNumber": 474,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call when the subscribed event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Context to set 'this' to when calling the handler function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 602,
    "kind": "method",
    "name": "off",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#off",
    "access": "public",
    "description": "Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for\nthe given event are removed. If no parameters are given at all, all event types will have their handlers removed.",
    "lineNumber": 493,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed', 'child_moved'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Optional: Function that was used in previous subscription."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 603,
    "kind": "method",
    "name": "setValueChangedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setValueChangedCallback",
    "access": "public",
    "description": "Sets the callback triggered when dataSource updates the data.",
    "lineNumber": 504,
    "deprecated": "Use the on() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when the subscribed data value changes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 605,
    "kind": "method",
    "name": "removeValueChangedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#removeValueChangedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource updates the data.",
    "lineNumber": 514,
    "deprecated": "Use the off() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 607,
    "kind": "method",
    "name": "setChildAddedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setChildAddedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource adds a data element.",
    "lineNumber": 527,
    "deprecated": "Use the on() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a new data child is added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 609,
    "kind": "method",
    "name": "removeChildAddedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#removeChildAddedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource adds a data element.",
    "lineNumber": 537,
    "deprecated": "Use the off() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 611,
    "kind": "method",
    "name": "setChildChangedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setChildChangedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource changes a data element.",
    "lineNumber": 550,
    "deprecated": "Use the on() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is changed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 613,
    "kind": "method",
    "name": "removeChildChangedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#removeChildChangedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource changes a data element.",
    "lineNumber": 560,
    "deprecated": "Use the off() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 615,
    "kind": "method",
    "name": "setChildMovedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setChildMovedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource moves a data element.",
    "lineNumber": 573,
    "deprecated": "Use the on() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is moved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 617,
    "kind": "method",
    "name": "removeChildMovedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#removeChildMovedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource moves a data element.",
    "lineNumber": 583,
    "deprecated": "Use the off() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 619,
    "kind": "method",
    "name": "setChildRemovedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#setChildRemovedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource removes a data element.",
    "lineNumber": 596,
    "deprecated": "Use the on() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 621,
    "kind": "method",
    "name": "removeChildRemovedCallback",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#removeChildRemovedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource removes a data element.",
    "lineNumber": 606,
    "deprecated": "Use the off() method instead.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 623,
    "kind": "method",
    "name": "atomicTransaction",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#atomicTransaction",
    "access": "public",
    "description": "Performs an atomic transaction",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves the new value when the transaction is finished"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transactionFunction",
        "description": "A function that takes the current value as a single argument, and\nreturns the new value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves the new value when the transaction is finished"
    }
  },
  {
    "__docId__": 624,
    "kind": "method",
    "name": "_rethrowFirebaseError",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#_rethrowFirebaseError",
    "access": "private",
    "description": "Rethrows a an error in Firebase to contain some more data to better be able to see the cause of the error",
    "lineNumber": 641,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "method",
    "name": "getTimestampSymbol",
    "memberof": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/FirebaseDataSource.js~FirebaseDataSource#getTimestampSymbol",
    "access": "public",
    "description": "Gets a symbolic representation of a timestamp as being run on the server-side",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 626,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/DataModelGenerator.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport XML2JS               from './xml2js.js';\nimport template             from 'lodash/template.js';\nimport {PostRequest}        from '../../../utils/request/RequestClient.js';\nimport {ObjectHelper}       from '../../../utils/ObjectHelper.js';\nimport {UrlParser}          from '../../../utils/request/UrlParser.js';\nimport {ParseStringToXml}   from '../../../utils/request/XmlParser.js';\n\n\n/**\n * @ignore\n */\nexport class DataModelGenerator {\n\n    constructor(originalPath, schema) {\n\n        // initialize the arguments\n        if (!schema) throw 'Schema wasn\\'t provided.';\n        if (schema && schema.Prefix) {\n            this._applicationId = schema.Prefix;\n        }\n\n        this.hidden = 'TRUE';\n        this._originalPath = originalPath;\n        this._Schema = schema.Schema;\n        this._Seed = schema.Seed;\n\n        // if the dataspec contains an instruction 'hidden' have this setting override the default\n        if (schema &&\n            typeof schema.hidden == 'boolean') {\n            this.hidden = schema.hidden.toString().toUpperCase();\n        }\n\n        /* Bind all local methods to the current object instance, so we can refer to 'this'\n         * in the methods as expected, even when they're called from event handlers.        */\n\n        /* Hide all private properties (starting with '_') and methods from enumeration,\n         * so when you do for( in ), only actual data properties show up. */\n        ObjectHelper.hideMethodsAndPrivatePropertiesFromObject(this);\n    }\n\n\n    Deploy() {\n        if (!this._Schema) throw 'There is no schema to deploy.';\n        //var listOfPromisesToFullfill = [];\n\n        return new Promise(async function (resolve, reject) {\n\n            // iterate through all tables listed.\n            for (let table in this._Schema) {\n\n                try {\n                    let listCreated = await this._GetOrCreateList(table);\n                    var fields = this._Schema[table];\n                    if (fields && fields.length > 0) {\n                        let modelCreated = await this._GetOrCreateModel(table, fields, listCreated);\n                        let viewCreated = await this._UpdateDefaultView(table, fields, listCreated);\n                    }\n\n                } catch (ex) {\n                    console.log(ex);\n                }\n            }\n\n            resolve();\n\n        }.bind(this));\n    }\n\n    Seed() {\n        if (!this._Seed) throw 'There is no seed to deploy.';\n\n\n    }\n\n\n    _UpdateDefaultView(listName, fields, listCreated) {\n\n        return new Promise(async function (resolve, reject) {\n\n            try {\n\n                // resolve correct info\n                let firstRequest = this._getDefaultViewRequest(listName);\n                let viewResult = await PostRequest(firstRequest);\n\n                // update\n                let viewId = this._ResolveViewID(viewResult.response);\n                let updateRequest = this._getUpdateViewRequest(listName, viewId, fields);\n                let updateResult = await PostRequest(updateRequest);\n\n                resolve(updateResult.response);\n            }\n            catch (ex) {\n                console.log(ex);\n                reject(ex);\n            }\n        }.bind(this));\n    }\n\n\n    _ResolveViewID(response) {\n\n        let data = ParseStringToXml(response);\n        let idNode;\n\n        if (typeof(data.selectSingleNode) != 'undefined')\n            idNode = data.selectSingleNode('//View[@DefaultView=\\'TRUE\\']');\n        else\n            idNode = data.querySelector('View[DefaultView=\\'TRUE\\']');\n\n        let idAttribute = '';\n        if (idNode) idAttribute = idNode.getAttribute('Name');\n\n        return idAttribute;\n    }\n\n    _getUpdateViewRequest(listName, viewName, fieldNames) {\n\n        // rough configuration object\n        let params = {\n            listName: listName,\n            viewName: viewName,\n            viewFields: {\n                ViewFields: {\n                    FieldRef: []\n                }\n            },\n            rowLimit: {RowLimit: 100}\n        };\n\n        for (let fn = 0; fn < fieldNames.length; fn++) {\n            params.viewFields.ViewFields.FieldRef.push({\n                '_Name': fieldNames[fn].name\n            });\n        }\n\n        return {\n            url: this._ParsePath(this._originalPath, this._GetViewService),\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/UpdateView'],\n                ['Content-Type', 'text/xml']\n            ]),\n            data: this._applySoapTemplate({\n                method: 'UpdateView',\n                params: this._serializeParams(params)\n            })\n        };\n    }\n\n    _getDefaultViewRequest(listName) {\n        // rough configuration object\n        let params = {\n            listName: listName\n        };\n\n        return {\n            url: this._ParsePath(this._originalPath, this._GetViewService),\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/GetView'],\n                ['Content-Type', 'text/xml']\n            ]),\n            data: this._applySoapTemplate({\n                method: 'GetView',\n                params: this._serializeParams(params)\n            })\n        };\n    }\n\n    _getListExistRequest(listName) {\n        // rough configuration object\n        let params = {\n            listName: listName\n        };\n\n        return {\n            url: this._ParsePath(this._originalPath, this._GetListService),\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/GetList'],\n                ['Content-Type', 'text/xml']\n            ]),\n            data: this._applySoapTemplate({\n                method: 'GetList',\n                params: this._serializeParams(params)\n            })\n        };\n    }\n\n    _getListCreationRequest(listName, listDescription) {\n        // rough configuration object\n        let params = {\n            listName: listName,\n            description: listDescription,\n            templateID: '100'\n        };\n\n        return {\n            url: this._ParsePath(this._originalPath, this._GetListService),\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/AddList'],\n                ['Content-Type', 'text/xml']\n            ]),\n            data: this._applySoapTemplate({\n                method: 'AddList',\n                params: this._serializeParams(params)\n            })\n        };\n    }\n\n    _getListUpdateRequest(params) {\n\n        return {\n            url: this._ParsePath(this._originalPath, this._GetListService),\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/UpdateList'],\n                ['Content-Type', 'text/xml']\n            ]),\n            data: this._applySoapTemplate({\n                method: 'UpdateList',\n                params: this._serializeParams(params)\n            })\n        };\n    }\n\n    /**\n     *\n     * @param listName\n     * @param description\n     * @returns {Promise}\n     * @constructor\n     */\n    _GetOrCreateList(listName, description = '') {\n\n        return new Promise(async function (resolve, reject) {\n\n            try {\n                let existingListRequest = this._getListExistRequest(listName);\n                let existingResult = await PostRequest(existingListRequest);\n                resolve(existingResult.response);\n            }\n            catch (ex) {\n                let newListRequest = this._getListCreationRequest(listName, description);\n                let creationResult = await PostRequest(newListRequest);\n                resolve(creationResult.response);\n            }\n        }.bind(this));\n    }\n\n    async _GetOrCreateModel(listName, modelDescription, listData) {\n\n        let listOfLookups = [];\n        let fieldsAdded = 0;\n        // rough configuration object\n        let params = {\n            listName: listName,\n            updateFields: {\n                Fields: {\n                    Method: [{\n                        '_ID': 0, /* We automatically add an id field of our own, so we can push our own IDs to SharePoint. */\n                        Field: {\n                            '_Type': 'Text',\n                            '_Name': 'Title',\n                            '_DisplayName': 'Title',\n                            '_Required': 'FALSE'\n                        }\n                    }]\n                }\n            },\n            listProperties: {\n                List: {\n                    _Hidden: this.hidden,\n                    _EnableAttachments: 'FALSE'\n                }\n            }\n        };\n\n        if (listData.indexOf(`StaticName=\"__id\"`)) {\n            params.newFields = {\n                Fields: {\n                    Method: [{\n                        '_ID': 0, /* We automatically add an id field of our own, so we can push our own IDs to SharePoint. */\n                        Field: {\n                            '_Type': 'Integer',\n                            '_DisplayName': '__id',\n                            '_FromBaseType': 'TRUE',\n                            '_Hidden': 'TRUE'\n                        }\n                    }]\n                }\n            };\n        }\n\n        for (let i = 1; i < modelDescription.length; i++) {\n            let internalName = modelDescription[i].name;\n            if (this._applicationId) internalName = this._applicationId + '_' + internalName;\n            if (listData.indexOf(`StaticName=\"${internalName}\"`) != -1) continue;\n\n            // handle Lookups differently\n            if (modelDescription[i].type == 'Lookup' || modelDescription[i].type == 'LookupMulti') {\n                listOfLookups.push([listName, internalName, modelDescription[i].type, modelDescription[i].source, modelDescription[i].showField]);\n            }\n            else {\n                // handle primitives\n\n                var modelData = {\n                    '_ID': i,\n                    Field: {\n                        '_Type': modelDescription[i].type,\n                        '_DisplayName': internalName,\n                        '_FromBaseType': 'TRUE'\n                    }\n                };\n                params.newFields.Fields.Method.push(modelData);\n            }\n        }\n\n        return new Promise(async function (resolve, reject) {\n\n            try {\n                // update list with settings and simple fields\n                let updateListRequest = this._getListUpdateRequest(params);\n                let updateResult = await PostRequest(updateListRequest);\n\n                // go add lookups\n                for (let lf = 0; lf < listOfLookups.length; lf++) {\n                    try {\n                        let lookupResult = await this._CreateLookup(...listOfLookups[lf]);\n                    }\n                    catch (ex) {\n                        console.error('Error creating lookup field');\n                    }\n                }\n                resolve(updateResult.response);\n            }\n            catch (ex) {\n                reject(ex);\n            }\n\n        }.bind(this));\n    }\n\n\n    async _CreateLookup(listName, fieldName, type, sourceName, showField) {\n\n        let listResult = await this._GetOrCreateList(sourceName);\n\n        let listId = this._ResolveListID(listResult);\n\n        // rough configuration object\n        let params = {\n            listName: listName,\n            newFields: {\n                Fields: {\n                    Method: [{\n                        '_ID': 1,\n                        Field: {\n                            '_Type': type,\n                            '_DisplayName': fieldName,\n                            '_FromBaseType': 'TRUE',\n                            '_List': listId,\n                            '_Mult': type === 'LookupMulti' ? 'TRUE' : 'FALSE',\n                            '_ShowField': showField || 'ID'\n                        }\n                    }]\n                }\n            }\n        };\n\n        let updateListRequest = this._getListUpdateRequest(params);\n        try {\n            let updateListResult = await PostRequest(updateListRequest);\n            return updateListResult;\n        }\n        catch (ex) {\n            return '';\n        }\n    }\n\n\n    _ResolveListID(response) {\n\n        let data = ParseStringToXml(response);\n        let idNode;\n\n\n        if (typeof(data.selectSingleNode) != 'undefined')\n            idNode = data.selectSingleNode('//List');\n        else\n            idNode = data.querySelector('List');\n\n        let idAttribute = '';\n        if (idNode) idAttribute = idNode.getAttribute('ID');\n\n        return idAttribute;\n    }\n\n\n    _applySoapTemplate(properties) {\n        return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n              <soap:Envelope\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n                xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n                xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n              <soap:Body>\n              <${properties.method} xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\">\n                ${properties.params}\n              </${properties.method}>\n              </soap:Body>\n              </soap:Envelope>`;\n        /*\n         return template(\n         '<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n         '<soap:Envelope ' +\n         '  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n         '  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' +\n         '  xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">' +\n         '<soap:Body>' +\n         '<<%= method %> xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\">' +\n         '<%= params %>' +\n         '</<%= method %>>' +\n         '</soap:Body>' +\n         '</soap:Envelope>')(properties);*/\n    }\n\n    get _GetListService() {\n        return '_vti_bin/Lists.asmx';\n    }\n\n    get _GetViewService() {\n        return '_vti_bin/Views.asmx';\n    }\n\n\n    _ParsePath(path, endPoint) {\n        var url = UrlParser(path);\n        if (!url) console.log('Invalid datasource path provided!');\n\n        var pathParts = url.path.split('/');\n        var newPath = url.protocol + '://' + url.host + '/';\n        for (var i = 0; i < pathParts.length; i++)\n            newPath += pathParts[i] + '/';\n        newPath += endPoint;\n        return newPath;\n    }\n\n    _serializeParams(params) {\n        if (!params || params.length == 0) return '';\n        var data = {root: params};\n        var creator = new XML2JS();\n        var payload = creator.json2xml_str(data);\n\n        return payload.replace('<root>', '').replace('</root>', '');\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/DataModelGenerator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 627,
    "kind": "class",
    "name": "DataModelGenerator",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePoint/DataModelGenerator.js",
    "importStyle": "{DataModelGenerator}",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 628,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 629,
    "kind": "member",
    "name": "_applicationId",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_applicationId",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 630,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#hidden",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 631,
    "kind": "member",
    "name": "_originalPath",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_originalPath",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 632,
    "kind": "member",
    "name": "_Schema",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_Schema",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 633,
    "kind": "member",
    "name": "_Seed",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_Seed",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "Deploy",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#Deploy",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 636,
    "kind": "method",
    "name": "Seed",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#Seed",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 637,
    "kind": "method",
    "name": "_UpdateDefaultView",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_UpdateDefaultView",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fields",
        "types": [
          "*"
        ]
      },
      {
        "name": "listCreated",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "_ResolveViewID",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_ResolveViewID",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 639,
    "kind": "method",
    "name": "_getUpdateViewRequest",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_getUpdateViewRequest",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      },
      {
        "name": "viewName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"url\": *, \"headers\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 640,
    "kind": "method",
    "name": "_getDefaultViewRequest",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_getDefaultViewRequest",
    "access": "private",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"url\": *, \"headers\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "_getListExistRequest",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_getListExistRequest",
    "access": "private",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"url\": *, \"headers\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 642,
    "kind": "method",
    "name": "_getListCreationRequest",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_getListCreationRequest",
    "access": "private",
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      },
      {
        "name": "listDescription",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"url\": *, \"headers\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 643,
    "kind": "method",
    "name": "_getListUpdateRequest",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_getListUpdateRequest",
    "access": "private",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"url\": *, \"headers\": *, \"data\": *}"
      ]
    }
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "_GetOrCreateList",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_GetOrCreateList",
    "access": "private",
    "description": "",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "listName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "description",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 645,
    "kind": "method",
    "name": "_GetOrCreateModel",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_GetOrCreateModel",
    "access": "private",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      },
      {
        "name": "modelDescription",
        "types": [
          "*"
        ]
      },
      {
        "name": "listData",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 646,
    "kind": "method",
    "name": "_CreateLookup",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_CreateLookup",
    "access": "private",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "params": [
      {
        "name": "listName",
        "types": [
          "*"
        ]
      },
      {
        "name": "fieldName",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "sourceName",
        "types": [
          "*"
        ]
      },
      {
        "name": "showField",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "_ResolveListID",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_ResolveListID",
    "access": "private",
    "description": null,
    "lineNumber": 388,
    "undocument": true,
    "params": [
      {
        "name": "response",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 648,
    "kind": "method",
    "name": "_applySoapTemplate",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_applySoapTemplate",
    "access": "private",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 649,
    "kind": "get",
    "name": "_GetListService",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_GetListService",
    "access": "private",
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 650,
    "kind": "get",
    "name": "_GetViewService",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_GetViewService",
    "access": "private",
    "description": null,
    "lineNumber": 437,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 651,
    "kind": "method",
    "name": "_ParsePath",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_ParsePath",
    "access": "private",
    "description": null,
    "lineNumber": 442,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "endPoint",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 652,
    "kind": "method",
    "name": "_serializeParams",
    "memberof": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/DataModelGenerator.js~DataModelGenerator#_serializeParams",
    "access": "private",
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 653,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SPSoapAdapter/Settings.js",
    "content": "/**\n * Created by tom on 20/11/15.\n */\n\n/**\n * @ignore\n */\nexport class Settings {\n    static get localKeyPrefix() {\n        return '_local_';\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Settings.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 654,
    "kind": "class",
    "name": "Settings",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Settings.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Settings.js~Settings",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Settings.js",
    "importStyle": "{Settings}",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 655,
    "kind": "get",
    "name": "localKeyPrefix",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Settings.js~Settings",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Settings.js~Settings.localKeyPrefix",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "content": "/**\n * Created by mysim1 on 13/06/15.\n */\n\nimport extend           from 'lodash/extend.js';\nimport EventEmitter     from 'eventemitter3';\nimport {Settings}       from './Settings.js';\nimport {UrlParser}      from '../../../../utils/request/UrlParser.js';\nimport {ObjectHelper}   from '../../../../utils/ObjectHelper.js';\nimport {BlobHelper}     from '../../../../utils/BlobHelper.js';\n\nlet DEBUG_WORKER = true;\nlet SPWorker = new Worker('worker.js');\nlet workerEvents = new EventEmitter();\nSPWorker.onmessage = (messageEvent) => {\n    workerEvents.emit('message', messageEvent);\n};\n\n\n/**\n * @ignore\n * The SharePoint class will utilize a Web Worker to perform data operations. Running the data interfacing in a\n * seperate thread from the UI thread will ensure there is minimal interruption of the user interaction.\n */\n\nexport class SharePoint extends EventEmitter {\n\n    constructor(options = {}) {\n        super();\n\n\n        let endpoint = UrlParser(options.endPoint);\n        if (!endpoint) throw Error('Invalid configuration.');\n\n        this.subscriberID = SharePoint.hashCode(endpoint.path + JSON.stringify(options.query) + options.orderBy + options.limit);\n        this.options = options;\n        this.cache = null;\n\n        workerEvents.on('message', this._onMessage.bind(this));\n    }\n\n    getAuth(callback, context = this) {\n        super.once('auth_result', (authData) => this._handleAuthResult(authData, callback, context));\n\n        /* Grab any existing cached data for this path. There will be data if there are other\n         * subscribers on the same path already. */\n        SPWorker.postMessage(extend({}, this.options, {\n            subscriberID: this.subscriberID,\n            endPoint: this.options.endPoint,\n            operation: 'get_auth'\n        }));\n    }\n\n    once(event, handler, context = this) {\n        this.on(event, function () {\n            handler.call(context, ...arguments);\n            this.off(event, handler, context);\n        }.bind(this), context);\n    }\n\n    on(event, handler, context = this) {\n        /* Hold off on initialising the actual SharePoint connection until someone actually subscribes to data changes. */\n        if (!this._initialised) {\n            this._initialise();\n            this._initialised = true;\n        }\n\n        /* Fix to make Arva-ds PrioArray.add() work, by immediately returning the model data with an ID when the model is created. */\n        if (!this._ready && this.cache && event === 'value') {\n            handler.call(context, this.cache);\n        }\n\n        if (this._ready && event === 'value') {\n            this.once('cache_data', (cacheData) => this._handleCacheData(cacheData, event, handler, context));\n\n            /* Grab any existing cached data for this path. There will be data if there are other\n             * subscribers on the same path already. */\n            SPWorker.postMessage(extend({}, this.options, {\n                subscriberID: this.subscriberID,\n                operation: 'get_cache'\n            }));\n        }\n\n        /* Tell the SharePoint worker that we want to be subscribed to changes from now on (can be called multiple times) */\n        SPWorker.postMessage(extend({}, this.options, {\n            subscriberID: this.subscriberID,\n            operation: 'subscribe'\n        }));\n\n        super.on(event, handler, context);\n    }\n\n    off(event, handler) {\n        let amountRemoved;\n        if (event && handler) {\n            this.removeListener(event, handler);\n            amountRemoved = 1;\n        } else {\n            this.removeAllListeners(event);\n            amountRemoved = this.listeners(event).length;\n        }\n\n        for (let i = 0; i < amountRemoved; i++) {\n            /* Tell the Manager that this subscription is cancelled and no longer requires refreshed data from SharePoint. */\n            SPWorker.postMessage(extend({}, this.options, {\n                subscriberID: this.subscriberID,\n                operation: 'dispose'\n            }));\n        }\n    }\n\n    set(model) {\n        /* Hold off on initialising the actual SharePoint connection until someone actually subscribes to data changes. */\n        if (!this._initialised) {\n            this._initialise();\n            this._initialised = true;\n        }\n\n        /* If there is no ID, make a temporary ID for reference in the main thread for the session scope. */\n        let modelId = model.id;\n        if (!modelId || modelId === 0) {\n            model['_temporary-identifier'] = `${Settings.localKeyPrefix}${Math.floor((Math.random() * 2000000000))}`;\n        }\n\n        SPWorker.postMessage({\n            subscriberID: this.subscriberID,\n            endPoint: this.options.endPoint,\n            listName: this.options.listName,\n            operation: 'set',\n            model: model\n        });\n\n        if (model['_temporary-identifier']) {\n            /* Set the model's ID to the temporary one so it can be used to query the dataSource with. */\n            if (model.disableChangeListener) {\n                model.disableChangeListener();\n            }\n            model.id = model['_temporary-identifier'];\n            if (model.enableChangeListener) {\n                model.enableChangeListener();\n            }\n        }\n\n        /* Cache is used to immediately trigger the value callback if a new model was created and subscribes to its own changes. */\n        this.cache = model;\n        return model;\n    }\n\n    remove(model) {\n        SPWorker.postMessage({\n            subscriberID: this.subscriberID,\n            endPoint: this.options.endPoint,\n            listName: this.options.listName,\n            operation: 'remove',\n            model: model\n        });\n    }\n\n    _initialise() {\n\n        super.once('value', () => {\n            this._ready = true;\n        });\n\n        /* Initialise the worker */\n        SPWorker.postMessage(extend({}, this.options, {\n            subscriberID: this.subscriberID,\n            operation: 'init'\n        }));\n    }\n\n    _onMessage(messageEvent) {\n        let message = messageEvent.data;\n        /* Ignore messages not meant for this SharePoint instance. */\n        if (message.subscriberID !== this.subscriberID) {\n            return;\n        }\n\n        if (message.event === 'cache_data') {\n            this.emit('cache_data', message.cache);\n        } else if (message.event === 'auth_result') {\n            this.emit('auth_result', message.auth);\n        } else if (message.event !== 'INVALIDSTATE') {\n            this.emit(message.event, message.result, message.previousSiblingId);\n        } else {\n            console.log(\"Worker Error:\", message.result);\n        }\n    }\n\n    _handleCacheData(cacheData, event, handler, context) {\n        if (!cacheData) {\n            cacheData = [];\n        }\n\n        if (event === 'child_added') {\n            for (let index = 0; index < cacheData.length; index++) {\n                let child = cacheData[index];\n                let previousChildID = index > 0 ? cacheData[index - 1] : null;\n                handler.call(context, child, previousChildID);\n            }\n        } else if (event === 'value') {\n            handler.call(context, cacheData.length ? cacheData : null);\n        }\n    }\n\n    _handleAuthResult(authData, handler, context = this) {\n        if (!authData) {\n            authData = {};\n        }\n\n        handler.call(context, authData);\n\n    }\n\n    static hashCode(s) {\n        return s.split(\"\").reduce(function (a, b) {\n            a = ((a << 5) - a) + b.charCodeAt(0);\n            return a & a\n        }, 0);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 657,
    "kind": "variable",
    "name": "DEBUG_WORKER",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~DEBUG_WORKER",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 658,
    "kind": "variable",
    "name": "SPWorker",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SPWorker",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 659,
    "kind": "variable",
    "name": "workerEvents",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~workerEvents",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 660,
    "kind": "class",
    "name": "SharePoint",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js",
    "importStyle": "{SharePoint}",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 661,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true
  },
  {
    "__docId__": 662,
    "kind": "member",
    "name": "subscriberID",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#subscriberID",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "member",
    "name": "options",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#options",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 664,
    "kind": "member",
    "name": "cache",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#cache",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 665,
    "kind": "method",
    "name": "getAuth",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#getAuth",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 666,
    "kind": "method",
    "name": "once",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#once",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 667,
    "kind": "method",
    "name": "on",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#on",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 668,
    "kind": "member",
    "name": "_initialised",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#_initialised",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "method",
    "name": "off",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#off",
    "access": "public",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 670,
    "kind": "method",
    "name": "set",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#set",
    "access": "public",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 673,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#remove",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 674,
    "kind": "method",
    "name": "_initialise",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#_initialise",
    "access": "private",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 675,
    "kind": "member",
    "name": "_ready",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#_ready",
    "access": "private",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 676,
    "kind": "method",
    "name": "_onMessage",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#_onMessage",
    "access": "private",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "messageEvent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 677,
    "kind": "method",
    "name": "_handleCacheData",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#_handleCacheData",
    "access": "private",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "params": [
      {
        "name": "cacheData",
        "types": [
          "*"
        ]
      },
      {
        "name": "event",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 678,
    "kind": "method",
    "name": "_handleAuthResult",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint#_handleAuthResult",
    "access": "private",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "params": [
      {
        "name": "authData",
        "types": [
          "*"
        ]
      },
      {
        "name": "handler",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 679,
    "kind": "method",
    "name": "hashCode",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/SharePoint.js~SharePoint.hashCode",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [
      {
        "name": "s",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 680,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js",
    "content": "/**\n * Created by tom on 28/08/15.\n */\nimport '../../../../../utils/hotfixes/polyfills/FunctionName.js';\nimport '../../../../../utils/hotfixes/polyfills/ObjectKeys.js';\nimport '../../../../../utils/hotfixes/polyfills/StartsWith.js';\nimport {SharePointClient}               from './SharePointClient.js';\n\nlet clients = {};\n\nlet onmessage = async function (messageEvent) {\n    let message = messageEvent.data;\n    let {subscriberID, operation} = message;\n    let client = clients[subscriberID];\n    let clientExisted = !!client;\n\n    /* If the requested client doesn't exist yet, create a new instance. */\n    if (!clientExisted) {\n        /* This automatically subscribes to changes, so for a set/remove operation that\n         * isn't interested in listening to changes we'll need to unsubscribe again after the operation. */\n        client = clients[subscriberID] = new SharePointClient(message);\n        client.referenceCount = 0;\n    }\n\n    switch (operation) {\n        case 'init':\n            if (!client.initialised) {\n                client.init();\n                client.initialised = true;\n                client.on('message', (message) => {\n                    message.subscriberID = subscriberID;\n                    postMessage(message);\n                });\n            }\n            break;\n        case 'subscribe':\n            client.subscribeToChanges();\n            client.referenceCount++;\n            break;\n        case 'dispose':\n            client.referenceCount--;\n            if (client.referenceCount <= 0) {\n                client.dispose();\n            }\n            break;\n        case 'set':\n            client.set(message.model);\n            /* If the client was created for this set operation,\n             * cancel all subscriptions that were automatically created on instantiation. */\n            if (!clientExisted) {\n                client.dispose();\n            }\n            break;\n        case 'remove':\n            client.remove(message.model);\n            /* If the client was created for this remove operation,\n             * cancel all subscriptions that were automatically created on instantiation. */\n            if (!clientExisted) {\n                client.dispose();\n            }\n            break;\n        case 'get_cache':\n            let cacheData = client.cache;\n            postMessage({\n                subscriberID: subscriberID,\n                event: 'cache_data',\n                cache: cacheData\n            });\n            break;\n        case 'get_auth':\n            try {\n                let authData = await client.getAuth();\n                postMessage({\n                    subscriberID: subscriberID,\n                    event: 'auth_result',\n                    auth: authData\n                });\n            } catch (error) {\n                console.log('Error whilst fetching user auth data: ', error);\n            }\n            break;\n    }\n};\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 681,
    "kind": "variable",
    "name": "clients",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js~clients",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 682,
    "kind": "function",
    "name": "onmessage",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js~onmessage",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/Manager.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "messageEvent",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 683,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "content": "/**\n * Created by mysim1 on 13/06/15.\n */\nimport pick             from 'lodash/pick.js';\nimport pluck            from 'lodash/pluck.js';\nimport extend           from 'lodash/extend.js';\nimport findIndex        from 'lodash/findIndex.js';\nimport EventEmitter     from 'eventemitter3';\nimport {SoapClient}     from './SoapClient.js';\nimport {Settings}       from '../Settings.js';\nimport {ExistsRequest}  from '../../../../../utils/request/RequestClient.js';\nimport {UrlParser}      from '../../../../../utils/request/UrlParser.js';\n\n// setup the soapClient.\nvar soapClient = new SoapClient();\nvar window = this;\nvar global = this;\nvar tempKeys = [];\n\n/**\n * @ignore\n */\nexport class SharePointClient extends EventEmitter {\n\n    get refreshTimer() {\n        return this._refreshTimer;\n    }\n\n    set refreshTimer(value) {\n        this._refreshTimer = value;\n    }\n\n    constructor(options) {\n        super();\n\n        this.settings = options;\n        this.interval = 3000;\n        this.retriever = null;\n        this.cache = [];\n        this.hasNoServerResponse = true;\n        this._active = false;\n    }\n\n    init() {\n        try {\n            let {settings, isChild} = this._initializeSettings(this.settings);\n            this.settings = settings;\n            this.isChild = isChild;\n\n            this._handleInit(this.settings);\n        } catch (exception) {\n            this.dispose();\n        }\n    }\n\n    set(options) {\n        return this._handleSet(options);\n    }\n\n    remove(options) {\n        return this._handleRemove(options);\n    }\n\n    dispose() {\n        clearTimeout(this.refreshTimer);\n        this.refreshTimer = null;\n        this._active = false;\n    }\n\n    getAuth() {\n        return new Promise((resolve, reject) => {\n            /* initialize with SharePoint configuration */\n            let configuration = this._getUserGroupDefaultConfiguration();\n\n            /* Append the listName to the URL for easy debugging */\n            configuration.url = `${this.settings.endPoint}/${this._getUserGroupService()}?view=getUserGroup`;\n\n            soapClient.call(configuration).then((result) => {\n                let data = result.data[\"soap:Envelope\"][\"soap:Body\"][0].GetCurrentUserInfoResponse[0].GetCurrentUserInfoResult[0].GetUserInfo[0].User[0].$;\n                let user = {\n                    uid: data.ID,\n                    name: data.Name,\n                    email: data.Email\n                };\n                resolve(user);\n            }).catch((error) => reject(error));\n        });\n    }\n\n    subscribeToChanges() {\n        if (!this.isChild) {\n            /* Don't monitor child item updates/removes. We only do that on parent arrays. */\n            if (!this._active) {\n                this._active = true;\n                this._refresh();\n            }\n        }\n    }\n\n    _initializeSettings(args) {\n\n        // rebuild endpoint from polling server and interpreting response\n        let url = UrlParser(args.endPoint);\n        if (!url) throw new Error('Invalid DataSource path provided!');\n\n        let newPath = url.protocol + '://' + url.host + '/';\n        let pathParts = url.path.split('/');\n        let identifiedParts = [];\n\n        let isChild = this._isChildItem(url.path);\n\n        if (!isChild) {\n            /* We can always remove the last part of the path, since it will be a list name (which we don't need in the sharepoint URL). */\n            identifiedParts.unshift(pathParts.splice(pathParts.length - 1, 1)[0]);\n\n            try {\n                while (!ExistsRequest(newPath + pathParts.join('/') + '/' + this._getListService())) {\n                    identifiedParts.unshift(pathParts.splice(pathParts.length - 1, 1)[0]);\n                }\n            } catch (error) {\n                console.log('SharePoint URL detection error:', error);\n            }\n        } else {\n            /* We're initializing a child element that has an array-based parent.\n             * This means we can't automatically find the correct SharePoint path, and we'll have to assume the listName and itemId. */\n            identifiedParts[0] = pathParts[pathParts.length - 2];\n            identifiedParts[1] = pathParts[pathParts.length - 1];\n            pathParts.splice(pathParts.length - 2, 2);\n            /* Remove the child ID from the endpoint so we can modify its value through the parent endpoint. */\n        }\n\n        if (identifiedParts.length < 1) {\n            throw {\n                endPoint: pathParts.join('/') + '/' + identifiedParts[0],\n                message: 'Parameters could not be correctly extracted for polling. Assuming invalid state.'\n            }\n        }\n        else {\n            let resultconfig = {\n                endPoint: newPath + pathParts.join('/'),\n                listName: identifiedParts[0],\n                itemId: identifiedParts[1]\n            };\n\n\n            extend(resultconfig, pick(args, ['query', 'limit', 'orderBy', 'pageSize']));\n\n            return {settings: resultconfig, isChild: isChild};\n        }\n    }\n\n    /**\n     * Start reading the list from SharePoint and only retrieve changes from last polling timestamp.\n     * @param args\n     * @private\n     */\n    _handleInit(args) {\n\n        if (!args.listName) return;\n\n        // initialize with SharePoint configuration\n        this.retriever = this._getListItemsDefaultConfiguration();\n\n        /* Append the listName to the URL for easy debugging */\n        this.retriever.url = this._parsePath(args.endPoint, this._getListService()) + `?view=${args.listName}`;\n        this.retriever.params = {\n            'listName': args.listName,\n            'viewFields': {\n                'ViewFields': ''\n            },\n            //'since': new Date(0).toISOString(),\n            'queryOptions': {\n                'QueryOptions': {\n                    'IncludeMandatoryColumns': 'FALSE',\n                    'ViewAttributes': {\n                        '_Scope': 'RecursiveAll'\n                    }\n                }\n            }\n        };\n\n        if (args.query) {\n            this.retriever.params.query = args.query;\n        }\n\n        if (args.orderBy) {\n            if (this.retriever.params.query) {\n                this.retriever.params.query.OrderBy = {\n                    \"FieldRef\": {\n                        \"_Ascending\": \"TRUE\",\n                        \"_Name\": args.orderBy\n                    }\n                };\n            }\n            else {\n                this.retriever.params.query = {\n                    Query: {\n                        OrderBy: {\n                            \"FieldRef\": {\n                                \"_Ascending\": \"TRUE\",\n                                \"_Name\": args.orderBy\n                            }\n                        }\n                    }\n                };\n            }\n        }\n\n\n        let rowLimit;\n        this.explicitRowLimit = args.limit !== undefined;\n        if (this.explicitRowLimit) {\n            rowLimit = this.explicitRowLimit = args.limit;\n        }\n        if (args.pageSize) {\n            rowLimit = args.pageSize;\n            this.pageSize = args.pageSize;\n        }\n        if (rowLimit) {\n            this.retriever.params.rowLimit = rowLimit;\n        }\n    }\n\n    _isLimitExceeded() {\n        return this.explicitRowLimit !== false && this.cache.length >= this.explicitRowLimit;\n    }\n\n\n    /**\n     *\n     * Refresh SharePoint with latest changes.\n     * @param {Boolean} calledManually If set to false, ignores any existing timer in this.refreshTimer and executes the refresh regardless.\n     * @private\n     */\n    _refresh() {\n        if (this.retriever) {\n            if (this._isLimitExceeded()) {\n                this.retriever.params.rowLimit = this.explicitRowLimit;\n            }\n            soapClient.call(this.retriever, tempKeys)\n                .then((result) => {\n\n\n                    let listItem = result.data[\"soap:Envelope\"][\"soap:Body\"][0].GetListItemChangesSinceTokenResponse[0].GetListItemChangesSinceTokenResult[0].listitems[0];\n                    let hasDeletions = false;\n                    if (listItem.Changes) {\n                        let changes = listItem.Changes[0];\n                        hasDeletions = this._handleDeleted(changes);\n                    }\n\n                    let data = this._getResults(result.data);\n                    let messages = this._updateCache(data);\n\n                    this._handleNextToken(listItem);\n\n                    /* If any data is new or modified, emit a 'value' event. */\n                    if (hasDeletions || data.length > 0) {\n                        this.emit('message', {event: 'value', result: this.cache});\n\n                    } else if (this.hasNoServerResponse) {\n                        /* If there is no data, and this is the first time we get a response from the server,\n                         * emit a value event that shows subscribers that there is no data at this path. */\n                        this.emit('message', {event: 'value', result: null});\n                    }\n\n                    if (!this.hasNoServerResponse) {\n                        /* Emit any added/changed events. */\n                        for (let message of messages) {\n                            this.emit('message', message);\n                        }\n                    }\n                    this.hasNoServerResponse = false;\n                    if (this._active) {\n                        this.refreshTimer = setTimeout(this._refresh.bind(this), this.interval);\n                    }\n\n                }).catch((err) => {\n                this.emit('error', err);\n                if (this._active) {\n\n                    this.refreshTimer = setTimeout(this._refresh.bind(this), this.interval);\n                }\n\n            });\n        }\n    }\n\n\n    /**\n     * Add or Update a data record.\n     * @private\n     */\n    _handleSet(newData) {\n        var configuration = this._updateListItemsDefaultConfiguration();\n        /* Append the listName to the URL for easy debugging */\n        configuration.url = this._parsePath(this.settings.endPoint, this._getListService()) + `?update=${this.settings.listName}`;\n        var fieldCollection = [];\n        var method = '';\n\n        let isLocal = findIndex(tempKeys, function (key) {\n            return key.localId == newData.id;\n        });\n\n        if (isLocal > -1) {\n            newData.id = tempKeys[isLocal].remoteId;\n        }\n\n        if (!newData.id && this.childID) {\n            newData.id = this.childID;\n        }\n\n        // assume existing record to be updated.\n        if (newData.id) {\n\n            fieldCollection.push({\n                \"_Name\": \"ID\",\n                \"__text\": newData.id\n            });\n\n            method = \"Update\";\n        }\n        // create a new record, because there is no id.\n        else {\n            fieldCollection.push({\n                \"_Name\": \"ID\",\n                \"__text\": 'New'\n            });\n            method = 'New';\n        }\n\n        for (var prop in newData) {\n            let fieldValue = newData[prop];\n            if (prop == \"id\" || typeof(fieldValue) == \"undefined\") continue;\n            if (prop == \"priority\" || prop == \"_temporary-identifier\" || prop == \"remoteId\") continue;\n            if (typeof fieldValue === 'object') {\n                if (fieldValue.id && fieldValue.value) {\n                    /* This is a SharePoint lookup type field. We must write it as a specially formatted value instead of an id/value object. */\n                    fieldValue = `${fieldValue.id};#`;\n                } else if (fieldValue.length !== undefined && fieldValue[0] && fieldValue[0].id && fieldValue[0].value) {\n                    /* This is a SharePoint LookupMulti field. It is specially formatted like above. */\n                    let IDs = pluck(fieldValue, 'id');\n                    fieldValue = IDs.join(';#;#');\n                } else {\n                    continue;\n                }\n            }\n\n\n            fieldCollection.push({\n                \"_Name\": prop,\n                \"__text\": fieldValue\n            });\n        }\n\n        configuration.params = {\n            \"listName\": this.settings.listName,\n            \"updates\": {\n                \"Batch\": {\n                    \"Method\": {\n                        \"Field\": fieldCollection,\n\n                        \"_ID\": \"1\",\n                        \"_Cmd\": method\n                    },\n\n                    \"_OnError\": \"Continue\",\n                    \"_ListVersion\": \"1\",\n                    \"_ViewName\": \"\"\n                }\n            }\n        };\n\n        // initial initialisation of the datasource\n        (function (newData) {\n            soapClient.call(configuration, tempKeys)\n                .then((result)=> {\n\n                    let data = this._getResults(result.data);\n                    if (data.length == 1) {\n                        let remoteId = data[0].id;\n\n                        // push ID mapping for given session to collection of temp keys\n                        if (newData['_temporary-identifier']) {\n                            tempKeys.push({\n                                localId: newData['_temporary-identifier'],\n                                remoteId: remoteId,\n                                client: this\n                            });\n                        }\n                        let messages = this._updateCache(data);\n                        for (let message of messages) {\n                            this.emit('message', message);\n                        }\n\n                        /* Fire a value/child_changed event with the now available remoteId present */\n                        let model = newData;\n                        model.id = model['_temporary-identifier'] || model.id;\n                        model.remoteId = remoteId;\n                        if (this.isChild) {\n                            /* TODO: re-enable value emit on children when child subscriptions are implemented */\n                            //this.emit('message', {event: 'value', result: model});\n                        } else {\n                            this.emit('message', {event: 'child_changed', result: model});\n                            this.emit('message', {event: 'value', result: this.cache});\n                        }\n                    }\n                }, (error) => {\n                    console.log(error);\n                });\n        }.bind(this))(newData);\n    }\n\n    /**\n     * Remove a record from SharePoint\n     * @param record\n     * @private\n     */\n    _handleRemove(record) {\n        var configuration = this._updateListItemsDefaultConfiguration();\n        /* Append the listName to the URL for easy debugging */\n        configuration.url = this._parsePath(this.settings.endPoint, this._getListService()) + `?remove=${this.settings.listName}`;\n        var fieldCollection = [];\n\n        record.remoteId = record.id;\n\n        let isLocal = findIndex(tempKeys, function (key) {\n            return key.localId == record.id;\n        });\n\n        if (isLocal > -1) {\n            record.id = tempKeys[isLocal].remoteId;\n        }\n\n        fieldCollection.push({\n            \"_Name\": \"ID\",\n            \"__text\": record.id\n        });\n\n        configuration.params = {\n            \"listName\": this.settings.listName,\n            \"updates\": {\n                \"Batch\": {\n                    \"Method\": {\n                        \"Field\": fieldCollection,\n\n                        \"_ID\": '1',\n                        \"_Cmd\": 'Delete'\n                    },\n\n                    \"_OnError\": 'Continue',\n                    \"_ListVersion\": '1',\n                    \"_ViewName\": ''\n                }\n            }\n        };\n\n        // initial initialisation of the datasource\n        soapClient.call(configuration, tempKeys)\n            .then(()=> {\n                this.emit('message', {event: 'child_removed', result: record});\n            }, (error) => {\n                console.log(error);\n            });\n    }\n\n\n    /**\n     * Update our cache and bubble child_added or child_changed events\n     * @param data\n     * @private\n     */\n    _updateCache(data) {\n        let messages = [];\n        for (let record in data) {\n            let shouldUseRemoteId = false;\n            let model = data[record];\n            model.remoteId = model.id;\n\n            let localIndex = findIndex(tempKeys, function (key) {\n                return key.remoteId == model.id;\n            });\n\n            if (localIndex > -1) {\n                let tempKey = tempKeys[localIndex];\n\n                /* If this SPClient instance created the temp ID, we need to use it in our events.\n                 * Otherwise, we should use the remote ID that SharePoint generated. */\n                shouldUseRemoteId = tempKey.client !== this;\n                model.id = shouldUseRemoteId ? model.remoteId : tempKey.localId;\n            }\n\n            let cacheIndex = findIndex(this.cache, function (item) {\n                return model.id == item.id;\n            });\n\n            if (cacheIndex === -1) {\n                this.cache.push(model);\n\n                let previousSiblingId = this.cache.length == 0 ? null : this.cache[this.cache.length - 1];\n                messages.push({\n                    event: 'child_added',\n                    result: model,\n                    previousSiblingId: previousSiblingId ? previousSiblingId.id : null\n                });\n            }\n            else {\n                if (!_.isEqual(model, this.cache[cacheIndex])) {\n                    this.cache[cacheIndex] = model;\n\n                    let previousSibling = cacheIndex == 0 ? null : this.cache[cacheIndex - 1];\n                    messages.push({\n                        event: 'child_changed',\n                        result: model,\n                        previousSiblingId: previousSibling ? previousSibling.id : null\n                    });\n                }\n            }\n        }\n        return messages;\n    }\n\n\n    /**\n     * Update the last polling timestamp so we only get the latest changes.\n     * @param newDate\n     * @private\n     */\n    _activateChangeToken(lastChangeToken) {\n        this.retriever.params.changeToken = lastChangeToken;\n    }\n\n    _setNextPage(nextPaginationToken) {\n        this.retriever.params.queryOptions.QueryOptions.Paging = {_ListItemCollectionPositionNext: nextPaginationToken};\n    }\n\n    _clearNextPage() {\n        delete this.retriever.params.queryOptions.QueryOptions.Paging;\n    }\n\n    _deactivateChangeToken() {\n        delete this.retriever.params.changeToken;\n    }\n\n\n    _handleNextToken(listItem) {\n        let lastQueryHadPagination = this.retriever.params.queryOptions.QueryOptions.Paging;\n\n        if (!lastQueryHadPagination && listItem.Changes) {\n            this.lastChangeToken = listItem.Changes[0].$.LastChangeToken;\n        }\n\n        if (this._isLimitExceeded()) {\n            this._clearNextPage();\n            this._activateChangeToken(this.lastChangeToken);\n        } else {\n            let {ListItemCollectionPositionNext: nextPaginationToken} = listItem[\"rs:data\"][0].$;\n\n            if (nextPaginationToken !== undefined) {\n                this._setNextPage(nextPaginationToken);\n                this._deactivateChangeToken();\n            } else {\n                this._clearNextPage();\n                this._activateChangeToken(this.lastChangeToken);\n            }\n        }\n    }\n\n\n    _handleDeleted(result) {\n\n        let changes = result.Id || null;\n\n        if (changes && changes.length > 0) {\n\n            for (let change in changes) {\n\n                if (changes[change].$.ChangeType == \"Delete\") {\n\n                    let recordId = changes[change]._;\n\n                    let localIndex = findIndex(tempKeys, function (key) {\n                        return key.remoteId == recordId;\n                    });\n\n                    if (localIndex > -1) {\n                        let tempKey = tempKeys[localIndex];\n                        let isOurTempKey = tempKey.client === this;\n                        recordId = isOurTempKey ? tempKey.localId : tempKey.remoteId;\n                    }\n\n                    let cacheItem = findIndex(this.cache, function (item) {\n                        return item.id == recordId;\n                    });\n\n                    this.emit('message', {\n                        event: 'child_removed',\n                        result: this.cache[cacheItem]\n                    });\n                    this.cache.splice(cacheItem, 1);\n                }\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Parse SharePoint response into formatted records\n     * @param result\n     * @returns {Array}\n     * @private\n     */\n    _getResults(result) {\n\n        let arrayOfObjects = [];\n        let node = null;\n\n\n        if (result[\"soap:Envelope\"][\"soap:Body\"][0].GetListItemChangesSinceTokenResponse) {\n\n            node = result[\"soap:Envelope\"][\"soap:Body\"][0].GetListItemChangesSinceTokenResponse[0].GetListItemChangesSinceTokenResult[0].listitems[0][\"rs:data\"][0];\n\n            if (node) {\n                if (node.$.ItemCount !== '0') {\n                    for (let row in node['z:row']) {\n                        let raw = node['z:row'][row].$;\n                        let record = this._formatRecord(raw);\n                        arrayOfObjects.push(record);\n                    }\n                }\n            }\n        }\n        else if (result[\"soap:Envelope\"][\"soap:Body\"][0].UpdateListItemsResponse) {\n\n            // check for error\n            let error = result[\"soap:Envelope\"][\"soap:Body\"][0].UpdateListItemsResponse[0].UpdateListItemsResult[0].Results[0].Result[0].ErrorCode;\n            if (error == '0x00000000') {\n                node = result[\"soap:Envelope\"][\"soap:Body\"][0].UpdateListItemsResponse[0].UpdateListItemsResult[0].Results[0];\n                if (node) {\n                    for (let row in node.Result) {\n                        let raw = node.Result[row][\"z:row\"][0].$;\n                        let record = this._formatRecord(raw);\n                        arrayOfObjects.push(record);\n                    }\n                }\n            }\n        }\n\n        return arrayOfObjects;\n    }\n\n    /**\n     * Strip SharePoint record from SharePoint specifics\n     * @param record\n     * @returns {{}}\n     * @private\n     */\n    _formatRecord(record) {\n        let result = {};\n        for (let attribute in record) {\n\n            let name = attribute.replace('ows_', '');\n            if (name == 'xmlns:z') {\n                continue;\n            }\n\n            let value = record[attribute];\n            if (value === '') {\n                continue;\n            }\n\n            if (name == \"ID\") {\n                name = \"id\";\n                result[name] = value;\n            } else if (value.indexOf(\";#\") > -1) {\n                var keys = value.split(\";#\");\n                var pairs = keys.length / 2;\n                var assignable = pairs > 1 ? [] : {};\n                for (var pair = 0; pair < keys.length; pair += 2) {\n                    if (pairs > 1) assignable.push({id: keys[pair], value: keys[pair + 1]});\n                    else assignable = {id: keys[pair], value: keys[pair + 1]};\n                }\n                result[name] = assignable;\n            } else if (!isNaN(value)) {\n                /* Map a number when that number is detected */\n                result[name] = parseFloat(value);\n            } else {\n                /* By default map the attribute 1:1 */\n                result[name] = value;\n            }\n        }\n\n        return result;\n    }\n\n\n    /**\n     * Double check if given path is a valid path\n     * @param path\n     * @param endPoint\n     * @returns {string}\n     * @private\n     */\n    _parsePath(path = '', endPoint = '') {\n\n        var url = UrlParser(path);\n        if (!url) console.log('Invalid datasource path provided!');\n\n        var pathParts = url.path.split('/');\n        var newPath = url.protocol + '://' + url.host + '/';\n        for (var i = 0; i < pathParts.length; i++)\n            newPath += pathParts[i] + '/';\n        newPath += endPoint;\n        return newPath;\n    }\n\n\n    /**\n     * Get Default resource for Updating Lists\n     * @returns {{url: string, service: string, method: string, params: string, headers: (Map|*)}}\n     * @private\n     */\n    _updateListItemsDefaultConfiguration() {\n        return {\n            url: '',\n            service: 'Lists',\n            method: 'UpdateListItems',\n            params: '',\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/UpdateListItems'],\n                ['Content-Type', 'text/xml']\n            ])\n        };\n    }\n\n\n    /**\n     * Get Default resource for Reading Lists\n     * @returns {{url: string, service: string, method: string, params: string, headers: (Map|*)}}\n     * @private\n     */\n    _getListItemsDefaultConfiguration() {\n        return {\n            url: '',\n            service: 'Lists',\n            method: 'GetListItemChangesSinceToken',\n            params: '',\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/GetListItemChangesSinceToken'],\n                ['Content-Type', 'text/xml']\n            ])\n        };\n    }\n\n\n    /**\n     * Get Default resource for Reading Lists\n     * @returns {{url: string, service: string, method: string, params: string, headers: (Map|*)}}\n     * @private\n     */\n    _getUserGroupDefaultConfiguration() {\n        return {\n            url: '',\n            service: 'UserGroup',\n            method: 'GetCurrentUserInfo',\n            params: '',\n            headers: new Map([\n                ['SOAPAction', 'http://schemas.microsoft.com/sharepoint/soap/directory/GetCurrentUserInfo'],\n                ['Content-Type', 'text/xml']\n            ])\n        };\n    }\n\n\n    /**\n     * Default interface for Get list\n     * @returns {string}\n     * @private\n     */\n    _getListService() {\n        return '_vti_bin/Lists.asmx';\n    }\n\n\n    /**\n     * Default interface for Update list\n     * @returns {string}\n     * @private\n     */\n    _getUserGroupService() {\n        return '_vti_bin/UserGroup.asmx';\n    }\n\n    /* Ignores all paths ending in a numeric value. These paths don't contain an array, but rather a specific child.\n     * Binding to specific children is not supported by the SharePoint interface, and shouldn't be necessary either\n     * because there is a subscription to child_changed events on the parent array containing this child. */\n    _isChildItem(path) {\n        if (path[path.length - 1] === '/') {\n            path = path.substring(0, path.length - 2);\n        }\n\n        let parts = path.split('/');\n        if (parts.length) {\n            let lastArgument = parts[parts.length - 1];\n\n            let isNumeric = (n) => !isNaN(parseFloat(n)) && isFinite(n);\n\n            if (isNumeric(lastArgument) || lastArgument.indexOf(Settings.localKeyPrefix) === 0) {\n                this.childID = lastArgument;\n                return true;\n            } else {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 684,
    "kind": "variable",
    "name": "soapClient",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~soapClient",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 685,
    "kind": "variable",
    "name": "window",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~window",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 686,
    "kind": "variable",
    "name": "global",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~global",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 687,
    "kind": "variable",
    "name": "tempKeys",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~tempKeys",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 688,
    "kind": "class",
    "name": "SharePointClient",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js",
    "importStyle": "{SharePointClient}",
    "description": "",
    "lineNumber": 23,
    "ignore": true,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 689,
    "kind": "get",
    "name": "refreshTimer",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#refreshTimer",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "set",
    "name": "refreshTimer",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#refreshTimer",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 691,
    "kind": "member",
    "name": "_refreshTimer",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_refreshTimer",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true
  },
  {
    "__docId__": 693,
    "kind": "member",
    "name": "settings",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#settings",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 694,
    "kind": "member",
    "name": "interval",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#interval",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 695,
    "kind": "member",
    "name": "retriever",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#retriever",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 696,
    "kind": "member",
    "name": "cache",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#cache",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 697,
    "kind": "member",
    "name": "hasNoServerResponse",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#hasNoServerResponse",
    "access": "public",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "member",
    "name": "_active",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_active",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 699,
    "kind": "method",
    "name": "init",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#init",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 701,
    "kind": "member",
    "name": "isChild",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#isChild",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 702,
    "kind": "method",
    "name": "set",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#set",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 703,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#remove",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 704,
    "kind": "method",
    "name": "dispose",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#dispose",
    "access": "public",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 707,
    "kind": "method",
    "name": "getAuth",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#getAuth",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 708,
    "kind": "method",
    "name": "subscribeToChanges",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#subscribeToChanges",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 710,
    "kind": "method",
    "name": "_initializeSettings",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_initializeSettings",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"settings\": *, \"isChild\": *}"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "method",
    "name": "_handleInit",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_handleInit",
    "access": "private",
    "description": "Start reading the list from SharePoint and only retrieve changes from last polling timestamp.",
    "lineNumber": 157,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 713,
    "kind": "member",
    "name": "explicitRowLimit",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#explicitRowLimit",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "member",
    "name": "pageSize",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#pageSize",
    "access": "public",
    "description": null,
    "lineNumber": 217,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "method",
    "name": "_isLimitExceeded",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_isLimitExceeded",
    "access": "private",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 716,
    "kind": "method",
    "name": "_refresh",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_refresh",
    "access": "private",
    "description": "\nRefresh SharePoint with latest changes.",
    "lineNumber": 235,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "calledManually",
        "description": "If set to false, ignores any existing timer in this.refreshTimer and executes the refresh regardless."
      }
    ],
    "return": null
  },
  {
    "__docId__": 720,
    "kind": "method",
    "name": "_handleSet",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_handleSet",
    "access": "private",
    "description": "Add or Update a data record.",
    "lineNumber": 293,
    "params": [
      {
        "name": "newData",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 721,
    "kind": "method",
    "name": "_handleRemove",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_handleRemove",
    "access": "private",
    "description": "Remove a record from SharePoint",
    "lineNumber": 418,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "record",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 722,
    "kind": "method",
    "name": "_updateCache",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_updateCache",
    "access": "private",
    "description": "Update our cache and bubble child_added or child_changed events",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "method",
    "name": "_activateChangeToken",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_activateChangeToken",
    "access": "private",
    "description": "Update the last polling timestamp so we only get the latest changes.",
    "lineNumber": 528,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newDate",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 724,
    "kind": "method",
    "name": "_setNextPage",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_setNextPage",
    "access": "private",
    "description": null,
    "lineNumber": 532,
    "undocument": true,
    "params": [
      {
        "name": "nextPaginationToken",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 725,
    "kind": "method",
    "name": "_clearNextPage",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_clearNextPage",
    "access": "private",
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 726,
    "kind": "method",
    "name": "_deactivateChangeToken",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_deactivateChangeToken",
    "access": "private",
    "description": null,
    "lineNumber": 540,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 727,
    "kind": "method",
    "name": "_handleNextToken",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_handleNextToken",
    "access": "private",
    "description": null,
    "lineNumber": 545,
    "undocument": true,
    "params": [
      {
        "name": "listItem",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 728,
    "kind": "member",
    "name": "lastChangeToken",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#lastChangeToken",
    "access": "public",
    "description": null,
    "lineNumber": 549,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "method",
    "name": "_handleDeleted",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_handleDeleted",
    "access": "private",
    "description": null,
    "lineNumber": 569,
    "undocument": true,
    "params": [
      {
        "name": "result",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 730,
    "kind": "method",
    "name": "_getResults",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_getResults",
    "access": "private",
    "description": "Parse SharePoint response into formatted records",
    "lineNumber": 615,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 731,
    "kind": "method",
    "name": "_formatRecord",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_formatRecord",
    "access": "private",
    "description": "Strip SharePoint record from SharePoint specifics",
    "lineNumber": 660,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "record",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 732,
    "kind": "method",
    "name": "_parsePath",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_parsePath",
    "access": "private",
    "description": "Double check if given path is a valid path",
    "lineNumber": 706,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "endPoint",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 733,
    "kind": "method",
    "name": "_updateListItemsDefaultConfiguration",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_updateListItemsDefaultConfiguration",
    "access": "private",
    "description": "Get Default resource for Updating Lists",
    "lineNumber": 725,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{url: string, service: string, method: string, params: string, headers: (Map|*)}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{url: string, service: string, method: string, params: string, headers: (Map|*)}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 734,
    "kind": "method",
    "name": "_getListItemsDefaultConfiguration",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_getListItemsDefaultConfiguration",
    "access": "private",
    "description": "Get Default resource for Reading Lists",
    "lineNumber": 744,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{url: string, service: string, method: string, params: string, headers: (Map|*)}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{url: string, service: string, method: string, params: string, headers: (Map|*)}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 735,
    "kind": "method",
    "name": "_getUserGroupDefaultConfiguration",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_getUserGroupDefaultConfiguration",
    "access": "private",
    "description": "Get Default resource for Reading Lists",
    "lineNumber": 763,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{url: string, service: string, method: string, params: string, headers: (Map|*)}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{url: string, service: string, method: string, params: string, headers: (Map|*)}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 736,
    "kind": "method",
    "name": "_getListService",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_getListService",
    "access": "private",
    "description": "Default interface for Get list",
    "lineNumber": 782,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 737,
    "kind": "method",
    "name": "_getUserGroupService",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_getUserGroupService",
    "access": "private",
    "description": "Default interface for Update list",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "_isChildItem",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#_isChildItem",
    "access": "private",
    "description": null,
    "lineNumber": 799,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 739,
    "kind": "member",
    "name": "childID",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SharePointClient.js~SharePointClient#childID",
    "access": "public",
    "description": null,
    "lineNumber": 811,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 740,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js",
    "content": "/**\n This Source Code is licensed under the MIT license. If a copy of the\n MIT-license was not distributed with this file, You can obtain one at:\n http://opensource.org/licenses/mit-license.html.\n\n @author: Hans van den Akker (mysim1)\n @license MIT\n @copyright Bizboard, 2015\n\n */\n\nimport XML2JS               from './xmljs';\nimport xmljs                from 'xml2js';\nimport template             from 'lodash/template.js';\nimport {ObjectHelper}       from '../../../../../utils/ObjectHelper';\nimport {PostRequest}        from '../../../../../utils/request/RequestClient';\nimport {ParseStringToXml}   from '../../../../../utils/request/XmlParser';\n\n/**\n * @ignore\n */\nexport class SoapClient {\n\n    constructor() {\n\n\n        /* Hide all private properties (starting with '_') and methods from enumeration,\n         * so when you do for( in ), only actual data properties show up. */\n        ObjectHelper.hideMethodsAndPrivatePropertiesFromObject(this);\n\n        /* Hide the priority field from enumeration, so we don't save it to the dataSource. */\n        ObjectHelper.hidePropertyFromObject(Object.getPrototypeOf(this), 'length');\n    }\n\n\n    _applySoapTemplate(properties) {\n        return template('<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n            '<soap:Envelope ' +\n            '  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n            '  xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' +\n            '  xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">' +\n            '<soap:Body>' +\n            '<<%= method %> xmlns=\"http://schemas.microsoft.com/sharepoint/soap/\">' +\n            '<%= params %>' +\n            '</<%= method %>>' +\n            '</soap:Body>' +\n            '</soap:Envelope>')(properties);\n    }\n\n\n    _serializeParams(params) {\n        if (!params || params.length == 0) return \"\";\n        var data = {\"root\": params};\n        var creator = new XML2JS();\n        var payload = creator.json2xml_str(data);\n\n        return payload.replace(\"<root>\", \"\").replace(\"</root>\", \"\");\n    }\n\n    _handleError(error) {\n        return \"Error!\";\n    }\n\n    /**\n     * Replaces locally generated item IDs with their remote SharePoint counterparts.\n     * @param {String} text Text to replace the IDs in.\n     * @param {Array} tempKeys Array of {localId:x, remoteId:y} pairs.\n     * @returns {string} Text with the replaced IDs\n     * @private\n     */\n    _replaceTempKeys(text = '', tempKeys = []) {\n        for (let tempKey of tempKeys) {\n            /* Split/join is faster than doing a regex replace:\n             * http://stackoverflow.com/questions/1144783/replacing-all-occurrences-of-a-string-in-javascript#comment27942520_1145525 */\n            text = text.split(tempKey.localId).join(tempKey.remoteId);\n        }\n\n        return text;\n    }\n\n    call(config, tempKeys = []) {\n\n        var request;\n        config = config || {};\n\n        request = {\n            url: config.url,\n            headers: config.headers,\n            data: this._applySoapTemplate({\n                method: config.method,\n                params: this._replaceTempKeys(this._serializeParams(config.params), tempKeys)\n            })\n        };\n\n        var context = this;\n        // Make the request.\n        return new Promise(function (resolve, reject) {\n\n            PostRequest(request)\n                .then(function (soapresult) {\n\n                    var parseString = xmljs.parseString;\n                    parseString(soapresult.response, function (err, result) {\n                        resolve({data: result, timestamp: soapresult.timestamp});\n                    });\n\n                }, function (error) {\n                    reject(context._handleError(error));\n                });\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 741,
    "kind": "class",
    "name": "SoapClient",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js",
    "importStyle": "{SoapClient}",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 742,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true
  },
  {
    "__docId__": 743,
    "kind": "method",
    "name": "_applySoapTemplate",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient#_applySoapTemplate",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 744,
    "kind": "method",
    "name": "_serializeParams",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient#_serializeParams",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 745,
    "kind": "method",
    "name": "_handleError",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient#_handleError",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 746,
    "kind": "method",
    "name": "_replaceTempKeys",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient#_replaceTempKeys",
    "access": "private",
    "description": "Replaces locally generated item IDs with their remote SharePoint counterparts.",
    "lineNumber": 71,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Text with the replaced IDs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Text to replace the IDs in."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "tempKeys",
        "description": "Array of {localId:x, remoteId:y} pairs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Text with the replaced IDs"
    }
  },
  {
    "__docId__": 747,
    "kind": "method",
    "name": "call",
    "memberof": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/SoapClient.js~SoapClient#call",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "config",
        "types": [
          "*"
        ]
      },
      {
        "name": "tempKeys",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 748,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SPSoapAdapter/Worker/xmljs.js",
    "content": "/*\n Copyright 2011-2013 Abdulla Abdurakhmanov\n Original sources are available at https://code.google.com/p/x2js/\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\ndefine(function (require) {\n\n    return function (config) {\n        'use strict';\n\n        var VERSION = \"1.1.6\";\n\n        config = config || {};\n        initConfigDefaults();\n        initRequiredPolyfills();\n\n        function initConfigDefaults() {\n            if (config.escapeMode === undefined) {\n                config.escapeMode = true;\n            }\n            config.attributePrefix = config.attributePrefix || \"_\";\n            config.arrayAccessForm = config.arrayAccessForm || \"none\";\n            config.emptyNodeForm = config.emptyNodeForm || \"text\";\n            if (config.enableToStringFunc === undefined) {\n                config.enableToStringFunc = true;\n            }\n            config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];\n            if (config.skipEmptyTextNodesForObj === undefined) {\n                config.skipEmptyTextNodesForObj = true;\n            }\n            if (config.stripWhitespaces === undefined) {\n                config.stripWhitespaces = true;\n            }\n            config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];\n        }\n\n        var DOMNodeTypes = {\n            ELEMENT_NODE: 1,\n            TEXT_NODE: 3,\n            CDATA_SECTION_NODE: 4,\n            COMMENT_NODE: 8,\n            DOCUMENT_NODE: 9\n        };\n\n        function initRequiredPolyfills() {\n            function pad(number) {\n                var r = String(number);\n                if (r.length === 1) {\n                    r = '0' + r;\n                }\n                return r;\n            }\n\n            // Hello IE8-\n            if (typeof String.prototype.trim !== 'function') {\n                String.prototype.trim = function () {\n                    return this.replace(/^\\s+|^\\n+|(\\s|\\n)+$/g, '');\n                }\n            }\n            if (typeof Date.prototype.toISOString !== 'function') {\n                // Implementation from http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript\n                Date.prototype.toISOString = function () {\n                    return this.getUTCFullYear()\n                        + '-' + pad(this.getUTCMonth() + 1)\n                        + '-' + pad(this.getUTCDate())\n                        + 'T' + pad(this.getUTCHours())\n                        + ':' + pad(this.getUTCMinutes())\n                        + ':' + pad(this.getUTCSeconds())\n                        + '.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                        + 'Z';\n                };\n            }\n        }\n\n        function getNodeLocalName(node) {\n            var nodeLocalName = node.localName;\n            if (nodeLocalName == null) // Yeah, this is IE!!\n                nodeLocalName = node.baseName;\n            if (nodeLocalName == null || nodeLocalName == \"\") // ==\"\" is IE too\n                nodeLocalName = node.nodeName;\n            return nodeLocalName;\n        }\n\n        function getNodePrefix(node) {\n            return node.prefix;\n        }\n\n        function escapeXmlChars(str) {\n            if (typeof(str) == \"string\")\n                return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;');\n            else\n                return str;\n        }\n\n        function unescapeXmlChars(str) {\n            return str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\");\n        }\n\n        function toArrayAccessForm(obj, childName, path) {\n            switch (config.arrayAccessForm) {\n                case \"property\":\n                    if (!(obj[childName] instanceof Array))\n                        obj[childName + \"_asArray\"] = [obj[childName]];\n                    else\n                        obj[childName + \"_asArray\"] = obj[childName];\n                    break;\n                /*case \"none\":\n                 break;*/\n            }\n\n            if (!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\n                var idx = 0;\n                for (; idx < config.arrayAccessFormPaths.length; idx++) {\n                    var arrayPath = config.arrayAccessFormPaths[idx];\n                    if (typeof arrayPath === \"string\") {\n                        if (arrayPath == path)\n                            break;\n                    }\n                    else if (arrayPath instanceof RegExp) {\n                        if (arrayPath.test(path))\n                            break;\n                    }\n                    else if (typeof arrayPath === \"function\") {\n                        if (arrayPath(obj, childName, path))\n                            break;\n                    }\n                }\n                if (idx != config.arrayAccessFormPaths.length) {\n                    obj[childName] = [obj[childName]];\n                }\n            }\n        }\n\n        function fromXmlDateTime(prop) {\n            // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\n            // Improved to support full spec and optional parts\n            var bits = prop.split(/[-T:+Z]/g);\n\n            var d = new Date(bits[0], bits[1] - 1, bits[2]);\n            var secondBits = bits[5].split(\"\\.\");\n            d.setHours(bits[3], bits[4], secondBits[0]);\n            if (secondBits.length > 1)\n                d.setMilliseconds(secondBits[1]);\n\n            // Get supplied time zone offset in minutes\n            if (bits[6] && bits[7]) {\n                var offsetMinutes = bits[6] * 60 + Number(bits[7]);\n                var sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop) ? '-' : '+';\n\n                // Apply the sign\n                offsetMinutes = 0 + (sign == '-' ? -1 * offsetMinutes : offsetMinutes);\n\n                // Apply offset and local timezone\n                d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())\n            }\n            else if (prop.indexOf(\"Z\", prop.length - 1) !== -1) {\n                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\n            }\n\n            // d is now a local time equivalent to the supplied time\n            return d;\n        }\n\n        function checkFromXmlDateTimePaths(value, childName, fullPath) {\n            if (config.datetimeAccessFormPaths.length > 0) {\n                var path = fullPath.split(\"\\.#\")[0];\n                var idx = 0;\n                for (; idx < config.datetimeAccessFormPaths.length; idx++) {\n                    var dtPath = config.datetimeAccessFormPaths[idx];\n                    if (typeof dtPath === \"string\") {\n                        if (dtPath == path)\n                            break;\n                    }\n                    else if (dtPath instanceof RegExp) {\n                        if (dtPath.test(path))\n                            break;\n                    }\n                    else if (typeof dtPath === \"function\") {\n                        if (dtPath(obj, childName, path))\n                            break;\n                    }\n                }\n                if (idx != config.datetimeAccessFormPaths.length) {\n                    return fromXmlDateTime(value);\n                }\n                else\n                    return value;\n            }\n            else\n                return value;\n        }\n\n        function parseDOMChildren(node, path) {\n            if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\n                var result = new Object;\n                var nodeChildren = node.childNodes;\n                // Alternative for firstElementChild which is not supported in some environments\n                for (var cidx = 0; cidx < nodeChildren.length; cidx++) {\n                    var child = nodeChildren.item(cidx);\n                    if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n                        var childName = getNodeLocalName(child);\n                        result[childName] = parseDOMChildren(child, childName);\n                    }\n                }\n                return result;\n            }\n            else if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n                var result = new Object;\n                result.__cnt = 0;\n\n                var nodeChildren = node.childNodes;\n\n                // Children nodes\n                for (var cidx = 0; cidx < nodeChildren.length; cidx++) {\n                    var child = nodeChildren.item(cidx); // nodeChildren[cidx];\n                    var childName = getNodeLocalName(child);\n\n                    if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {\n                        result.__cnt++;\n                        if (result[childName] == null) {\n                            result[childName] = parseDOMChildren(child, path + \".\" + childName);\n                            toArrayAccessForm(result, childName, path + \".\" + childName);\n                        }\n                        else {\n                            if (result[childName] != null) {\n                                if (!(result[childName] instanceof Array)) {\n                                    result[childName] = [result[childName]];\n                                    toArrayAccessForm(result, childName, path + \".\" + childName);\n                                }\n                            }\n                            (result[childName])[result[childName].length] = parseDOMChildren(child, path + \".\" + childName);\n                        }\n                    }\n                }\n\n                // Attributes\n                for (var aidx = 0; aidx < node.attributes.length; aidx++) {\n                    var attr = node.attributes.item(aidx); // [aidx];\n                    result.__cnt++;\n                    result[config.attributePrefix + attr.name] = attr.value;\n                }\n\n                // Node namespace prefix\n                var nodePrefix = getNodePrefix(node);\n                if (nodePrefix != null && nodePrefix != \"\") {\n                    result.__cnt++;\n                    result.__prefix = nodePrefix;\n                }\n\n                if (result[\"#text\"] != null) {\n                    result.__text = result[\"#text\"];\n                    if (result.__text instanceof Array) {\n                        result.__text = result.__text.join(\"\\n\");\n                    }\n                    if (config.escapeMode)\n                        result.__text = unescapeXmlChars(result.__text);\n                    if (config.stripWhitespaces)\n                        result.__text = result.__text.trim();\n                    delete result[\"#text\"];\n                    if (config.arrayAccessForm == \"property\")\n                        delete result[\"#text_asArray\"];\n                    result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + \".\" + childName);\n                }\n                if (result[\"#cdata-section\"] != null) {\n                    result.__cdata = result[\"#cdata-section\"];\n                    delete result[\"#cdata-section\"];\n                    if (config.arrayAccessForm == \"property\")\n                        delete result[\"#cdata-section_asArray\"];\n                }\n\n                if (result.__cnt == 1 && result.__text != null) {\n                    result = result.__text;\n                }\n                else if (result.__cnt == 0 && config.emptyNodeForm == \"text\") {\n                    result = '';\n                }\n                else if (result.__cnt > 1 && result.__text != null && config.skipEmptyTextNodesForObj) {\n                    if ((config.stripWhitespaces && result.__text == \"\") || (result.__text.trim() == \"\")) {\n                        delete result.__text;\n                    }\n                }\n                delete result.__cnt;\n\n                if (config.enableToStringFunc && (result.__text != null || result.__cdata != null )) {\n                    result.toString = function () {\n                        return (this.__text != null ? this.__text : '') + ( this.__cdata != null ? this.__cdata : '');\n                    };\n                }\n\n                return result;\n            }\n            else if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\n                return node.nodeValue;\n            }\n        }\n\n        function startTag(jsonObj, element, attrList, closed) {\n            var resultStr = \"<\" + ( (jsonObj != null && jsonObj.__prefix != null) ? (jsonObj.__prefix + \":\") : \"\") + element;\n            if (attrList != null) {\n                for (var aidx = 0; aidx < attrList.length; aidx++) {\n                    var attrName = attrList[aidx];\n                    var attrVal = jsonObj[attrName];\n                    if (config.escapeMode)\n                        attrVal = escapeXmlChars(attrVal);\n                    resultStr += \" \" + attrName.substr(config.attributePrefix.length) + \"='\" + attrVal + \"'\";\n                }\n            }\n            if (!closed)\n                resultStr += \">\";\n            else\n                resultStr += \"/>\";\n            return resultStr;\n        }\n\n        function endTag(jsonObj, elementName) {\n            return \"</\" + (jsonObj.__prefix != null ? (jsonObj.__prefix + \":\") : \"\") + elementName + \">\";\n        }\n\n        function endsWith(str, suffix) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function jsonXmlSpecialElem(jsonObj, jsonObjField) {\n            if ((config.arrayAccessForm == \"property\" && endsWith(jsonObjField.toString(), (\"_asArray\")))\n                || jsonObjField.toString().indexOf(config.attributePrefix) == 0\n                || jsonObjField.toString().indexOf(\"__\") == 0\n                || (jsonObj[jsonObjField] instanceof Function))\n                return true;\n            else\n                return false;\n        }\n\n        function jsonXmlElemCount(jsonObj) {\n            var elementsCnt = 0;\n            if (jsonObj instanceof Object) {\n                for (var it in jsonObj) {\n                    if (jsonXmlSpecialElem(jsonObj, it))\n                        continue;\n                    elementsCnt++;\n                }\n            }\n            return elementsCnt;\n        }\n\n        function parseJSONAttributes(jsonObj) {\n            var attrList = [];\n            if (jsonObj instanceof Object) {\n                for (var ait in jsonObj) {\n                    if (ait.toString().indexOf(\"__\") == -1 && ait.toString().indexOf(config.attributePrefix) == 0) {\n                        attrList.push(ait);\n                    }\n                }\n            }\n            return attrList;\n        }\n\n        function parseJSONTextAttrs(jsonTxtObj) {\n            var result = \"\";\n\n            if (jsonTxtObj.__cdata != null) {\n                result += \"<![CDATA[\" + jsonTxtObj.__cdata + \"]]>\";\n            }\n\n            if (jsonTxtObj.__text != null) {\n                if (config.escapeMode)\n                    result += escapeXmlChars(jsonTxtObj.__text);\n                else\n                    result += jsonTxtObj.__text;\n            }\n            return result;\n        }\n\n        function parseJSONTextObject(jsonTxtObj) {\n            var result = \"\";\n\n            if (jsonTxtObj instanceof Object) {\n                result += parseJSONTextAttrs(jsonTxtObj);\n            }\n            else if (jsonTxtObj != null) {\n                if (config.escapeMode)\n                    result += escapeXmlChars(jsonTxtObj);\n                else\n                    result += jsonTxtObj;\n            }\n\n            return result;\n        }\n\n        function parseJSONArray(jsonArrRoot, jsonArrObj, attrList) {\n            var result = \"\";\n            if (jsonArrRoot.length == 0) {\n                result += startTag(jsonArrRoot, jsonArrObj, attrList, true);\n            }\n            else {\n                for (var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {\n                    result += startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);\n                    result += parseJSONObject(jsonArrRoot[arIdx]);\n                    result += endTag(jsonArrRoot[arIdx], jsonArrObj);\n                }\n            }\n            return result;\n        }\n\n        function parseJSONObject(jsonObj) {\n            var result = \"\";\n\n            var elementsCnt = jsonXmlElemCount(jsonObj);\n\n            if (elementsCnt > 0) {\n                for (var it in jsonObj) {\n\n                    if (jsonXmlSpecialElem(jsonObj, it))\n                        continue;\n\n                    var subObj = jsonObj[it];\n\n                    var attrList = parseJSONAttributes(subObj)\n\n                    if (subObj == null || subObj == undefined) {\n                        result += startTag(subObj, it, attrList, true);\n                    }\n                    else if (subObj instanceof Object) {\n\n                        if (subObj instanceof Array) {\n                            result += parseJSONArray(subObj, it, attrList);\n                        }\n                        else if (subObj instanceof Date) {\n                            result += startTag(subObj, it, attrList, false);\n                            result += subObj.toISOString();\n                            result += endTag(subObj, it);\n                        }\n                        else {\n                            var subObjElementsCnt = jsonXmlElemCount(subObj);\n                            if (subObjElementsCnt > 0 || subObj.__text != null || subObj.__cdata != null) {\n                                result += startTag(subObj, it, attrList, false);\n                                result += parseJSONObject(subObj);\n                                result += endTag(subObj, it);\n                            }\n                            else {\n                                result += startTag(subObj, it, attrList, true);\n                            }\n                        }\n                    }\n                    else {\n                        result += startTag(subObj, it, attrList, false);\n                        result += parseJSONTextObject(subObj);\n                        result += endTag(subObj, it);\n                    }\n                }\n            }\n            result += parseJSONTextObject(jsonObj);\n\n            return result;\n        }\n\n        this.parseXmlString = function (xmlDocStr) {\n            var isIEParser = window.ActiveXObject || \"ActiveXObject\" in window;\n            if (xmlDocStr === undefined) {\n                return null;\n            }\n            var xmlDoc;\n            if (window.DOMParser) {\n                var parser = new window.DOMParser();\n                var parsererrorNS = null;\n                // IE9+ now is here\n                if (!isIEParser) {\n                    try {\n                        parsererrorNS = parser.parseFromString(\"INVALID\", \"text/xml\").childNodes[0].namespaceURI;\n                    }\n                    catch (err) {\n                        parsererrorNS = null;\n                    }\n                }\n                try {\n                    xmlDoc = parser.parseFromString(xmlDocStr, \"text/xml\");\n                    if (parsererrorNS != null && xmlDoc.getElementsByTagNameNS(parsererrorNS, \"parsererror\").length > 0) {\n                        //throw new Error('Error parsing XML: '+xmlDocStr);\n                        xmlDoc = null;\n                    }\n                }\n                catch (err) {\n                    xmlDoc = null;\n                }\n            }\n            else {\n                // IE :(\n                if (xmlDocStr.indexOf(\"<?\") == 0) {\n                    xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf(\"?>\") + 2);\n                }\n                xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                xmlDoc.async = \"false\";\n                xmlDoc.loadXML(xmlDocStr);\n            }\n            return xmlDoc;\n        };\n\n        this.asArray = function (prop) {\n            if (prop instanceof Array)\n                return prop;\n            else\n                return [prop];\n        };\n\n        this.toXmlDateTime = function (dt) {\n            if (dt instanceof Date)\n                return dt.toISOString();\n            else if (typeof(dt) === 'number')\n                return new Date(dt).toISOString();\n            else\n                return null;\n        };\n\n        this.asDateTime = function (prop) {\n            if (typeof(prop) == \"string\") {\n                return fromXmlDateTime(prop);\n            }\n            else\n                return prop;\n        };\n\n        this.xml2json = function (xmlDoc) {\n            return parseDOMChildren(xmlDoc);\n        };\n\n        this.xml_str2json = function (xmlDocStr) {\n            var xmlDoc = this.parseXmlString(xmlDocStr);\n            if (xmlDoc != null)\n                return this.xml2json(xmlDoc);\n            else\n                return null;\n        };\n\n        this.json2xml_str = function (jsonObj) {\n            return parseJSONObject(jsonObj);\n        };\n\n        this.json2xml = function (jsonObj) {\n            var xmlDocStr = this.json2xml_str(jsonObj);\n            return this.parseXmlString(xmlDocStr);\n        };\n\n        this.getVersion = function () {\n            return VERSION;\n        };\n    }\n});\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SPSoapAdapter/Worker/xmljs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 749,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/SharePointSnapshot.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport {ObjectHelper}               from '../../../utils/ObjectHelper.js';\nimport {Snapshot}                   from '../../Snapshot.js';\n\n/**\n * @ignore\n * An implementation of a snapshot made through SharePoint\n */\nexport class SharePointSnapshot extends Snapshot {\n\n    constructor(dataSnapshot, dataSource = null, kvpair = null) {\n        super();\n        this._data = dataSnapshot;\n        this._dataSource = dataSource;\n        this._kvpair = kvpair;\n\n    }\n\n    get key() {\n\n        if (this._kvpair) return this._kvpair.key;\n\n        else if (this._data instanceof Array && this._data.length == 1)\n            return this._data[0].id;\n        else if (this._data instanceof Object)\n            return this._data.id;\n\n        //return this._data.id ? this._data.id : this._dataSource.key();\n    }\n\n    val() {\n        if (this._kvpair) return this._kvpair.value;\n        else return this._data;\n    }\n\n    get ref() {\n        return this._dataSource;\n    }\n\n    getPriority() { /* Not implemented for SharePoint */\n        //TODO: have priority be part of list schema. and makes ordering super easy\n    }\n\n\n    forEach(callback) {\n\n        if (this._data instanceof Array) {\n            for (let object of this._data) {\n                callback(new SharePointSnapshot(object, this._dataSource));\n            }\n        }\n        else if (this._data instanceof Object) {\n            for (let key in this._data) {\n                callback(new SharePointSnapshot(object, this._dataSource, {key: key, value: this._data[key]}));\n            }\n        }\n    }\n\n    numChildren() {\n        if (this._data instanceof Array) {\n            return this._data.length;\n        } else if (this._data instanceof Object) {\n            return ObjectHelper.getEnumerableProperties(this._data).length;\n        } else {\n            return 0;\n        }\n    }\n}\n\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/SharePointSnapshot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 750,
    "kind": "class",
    "name": "SharePointSnapshot",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js",
    "static": true,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePoint/SharePointSnapshot.js",
    "importStyle": "{SharePointSnapshot}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "interface": false,
    "extends": [
      "src/data/Snapshot.js~Snapshot"
    ]
  },
  {
    "__docId__": 751,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 752,
    "kind": "member",
    "name": "_data",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#_data",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 753,
    "kind": "member",
    "name": "_dataSource",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#_dataSource",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 754,
    "kind": "member",
    "name": "_kvpair",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#_kvpair",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "get",
    "name": "key",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#key",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "method",
    "name": "val",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#val",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "get",
    "name": "ref",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#ref",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "method",
    "name": "getPriority",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#getPriority",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 759,
    "kind": "method",
    "name": "forEach",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#forEach",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 760,
    "kind": "method",
    "name": "numChildren",
    "memberof": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePoint/SharePointSnapshot.js~SharePointSnapshot#numChildren",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "file",
    "name": "src/data/datasources/SharePoint/xml2js.js",
    "content": "/*\n Copyright 2011-2013 Abdulla Abdurakhmanov\n Original sources are available at https://code.google.com/p/x2js/\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\ndefine(function (require) {\n\n    return function (config) {\n        'use strict';\n\n        var VERSION = \"1.1.6\";\n\n        config = config || {};\n        initConfigDefaults();\n        initRequiredPolyfills();\n\n        function initConfigDefaults() {\n            if (config.escapeMode === undefined) {\n                config.escapeMode = true;\n            }\n            config.attributePrefix = config.attributePrefix || \"_\";\n            config.arrayAccessForm = config.arrayAccessForm || \"none\";\n            config.emptyNodeForm = config.emptyNodeForm || \"text\";\n            if (config.enableToStringFunc === undefined) {\n                config.enableToStringFunc = true;\n            }\n            config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];\n            if (config.skipEmptyTextNodesForObj === undefined) {\n                config.skipEmptyTextNodesForObj = true;\n            }\n            if (config.stripWhitespaces === undefined) {\n                config.stripWhitespaces = true;\n            }\n            config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];\n        }\n\n        var DOMNodeTypes = {\n            ELEMENT_NODE: 1,\n            TEXT_NODE: 3,\n            CDATA_SECTION_NODE: 4,\n            COMMENT_NODE: 8,\n            DOCUMENT_NODE: 9\n        };\n\n        function initRequiredPolyfills() {\n            function pad(number) {\n                var r = String(number);\n                if (r.length === 1) {\n                    r = '0' + r;\n                }\n                return r;\n            }\n\n            // Hello IE8-\n            if (typeof String.prototype.trim !== 'function') {\n                String.prototype.trim = function () {\n                    return this.replace(/^\\s+|^\\n+|(\\s|\\n)+$/g, '');\n                }\n            }\n            if (typeof Date.prototype.toISOString !== 'function') {\n                // Implementation from http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript\n                Date.prototype.toISOString = function () {\n                    return this.getUTCFullYear()\n                        + '-' + pad(this.getUTCMonth() + 1)\n                        + '-' + pad(this.getUTCDate())\n                        + 'T' + pad(this.getUTCHours())\n                        + ':' + pad(this.getUTCMinutes())\n                        + ':' + pad(this.getUTCSeconds())\n                        + '.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5)\n                        + 'Z';\n                };\n            }\n        }\n\n        function getNodeLocalName(node) {\n            var nodeLocalName = node.localName;\n            if (nodeLocalName == null) // Yeah, this is IE!! \n                nodeLocalName = node.baseName;\n            if (nodeLocalName == null || nodeLocalName == \"\") // ==\"\" is IE too\n                nodeLocalName = node.nodeName;\n            return nodeLocalName;\n        }\n\n        function getNodePrefix(node) {\n            return node.prefix;\n        }\n\n        function escapeXmlChars(str) {\n            if (typeof(str) == \"string\")\n                return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;');\n            else\n                return str;\n        }\n\n        function unescapeXmlChars(str) {\n            return str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\");\n        }\n\n        function toArrayAccessForm(obj, childName, path) {\n            switch (config.arrayAccessForm) {\n                case \"property\":\n                    if (!(obj[childName] instanceof Array))\n                        obj[childName + \"_asArray\"] = [obj[childName]];\n                    else\n                        obj[childName + \"_asArray\"] = obj[childName];\n                    break;\n                /*case \"none\":\n                 break;*/\n            }\n\n            if (!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {\n                var idx = 0;\n                for (; idx < config.arrayAccessFormPaths.length; idx++) {\n                    var arrayPath = config.arrayAccessFormPaths[idx];\n                    if (typeof arrayPath === \"string\") {\n                        if (arrayPath == path)\n                            break;\n                    }\n                    else if (arrayPath instanceof RegExp) {\n                        if (arrayPath.test(path))\n                            break;\n                    }\n                    else if (typeof arrayPath === \"function\") {\n                        if (arrayPath(obj, childName, path))\n                            break;\n                    }\n                }\n                if (idx != config.arrayAccessFormPaths.length) {\n                    obj[childName] = [obj[childName]];\n                }\n            }\n        }\n\n        function fromXmlDateTime(prop) {\n            // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object\n            // Improved to support full spec and optional parts\n            var bits = prop.split(/[-T:+Z]/g);\n\n            var d = new Date(bits[0], bits[1] - 1, bits[2]);\n            var secondBits = bits[5].split(\"\\.\");\n            d.setHours(bits[3], bits[4], secondBits[0]);\n            if (secondBits.length > 1)\n                d.setMilliseconds(secondBits[1]);\n\n            // Get supplied time zone offset in minutes\n            if (bits[6] && bits[7]) {\n                var offsetMinutes = bits[6] * 60 + Number(bits[7]);\n                var sign = /\\d\\d-\\d\\d:\\d\\d$/.test(prop) ? '-' : '+';\n\n                // Apply the sign\n                offsetMinutes = 0 + (sign == '-' ? -1 * offsetMinutes : offsetMinutes);\n\n                // Apply offset and local timezone\n                d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())\n            }\n            else if (prop.indexOf(\"Z\", prop.length - 1) !== -1) {\n                d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));\n            }\n\n            // d is now a local time equivalent to the supplied time\n            return d;\n        }\n\n        function checkFromXmlDateTimePaths(value, childName, fullPath) {\n            if (config.datetimeAccessFormPaths.length > 0) {\n                var path = fullPath.split(\"\\.#\")[0];\n                var idx = 0;\n                for (; idx < config.datetimeAccessFormPaths.length; idx++) {\n                    var dtPath = config.datetimeAccessFormPaths[idx];\n                    if (typeof dtPath === \"string\") {\n                        if (dtPath == path)\n                            break;\n                    }\n                    else if (dtPath instanceof RegExp) {\n                        if (dtPath.test(path))\n                            break;\n                    }\n                    else if (typeof dtPath === \"function\") {\n                        if (dtPath(obj, childName, path))\n                            break;\n                    }\n                }\n                if (idx != config.datetimeAccessFormPaths.length) {\n                    return fromXmlDateTime(value);\n                }\n                else\n                    return value;\n            }\n            else\n                return value;\n        }\n\n        function parseDOMChildren(node, path) {\n            if (node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {\n                var result = new Object;\n                var nodeChildren = node.childNodes;\n                // Alternative for firstElementChild which is not supported in some environments\n                for (var cidx = 0; cidx < nodeChildren.length; cidx++) {\n                    var child = nodeChildren.item(cidx);\n                    if (child.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n                        var childName = getNodeLocalName(child);\n                        result[childName] = parseDOMChildren(child, childName);\n                    }\n                }\n                return result;\n            }\n            else if (node.nodeType == DOMNodeTypes.ELEMENT_NODE) {\n                var result = new Object;\n                result.__cnt = 0;\n\n                var nodeChildren = node.childNodes;\n\n                // Children nodes\n                for (var cidx = 0; cidx < nodeChildren.length; cidx++) {\n                    var child = nodeChildren.item(cidx); // nodeChildren[cidx];\n                    var childName = getNodeLocalName(child);\n\n                    if (child.nodeType != DOMNodeTypes.COMMENT_NODE) {\n                        result.__cnt++;\n                        if (result[childName] == null) {\n                            result[childName] = parseDOMChildren(child, path + \".\" + childName);\n                            toArrayAccessForm(result, childName, path + \".\" + childName);\n                        }\n                        else {\n                            if (result[childName] != null) {\n                                if (!(result[childName] instanceof Array)) {\n                                    result[childName] = [result[childName]];\n                                    toArrayAccessForm(result, childName, path + \".\" + childName);\n                                }\n                            }\n                            (result[childName])[result[childName].length] = parseDOMChildren(child, path + \".\" + childName);\n                        }\n                    }\n                }\n\n                // Attributes\n                for (var aidx = 0; aidx < node.attributes.length; aidx++) {\n                    var attr = node.attributes.item(aidx); // [aidx];\n                    result.__cnt++;\n                    result[config.attributePrefix + attr.name] = attr.value;\n                }\n\n                // Node namespace prefix\n                var nodePrefix = getNodePrefix(node);\n                if (nodePrefix != null && nodePrefix != \"\") {\n                    result.__cnt++;\n                    result.__prefix = nodePrefix;\n                }\n\n                if (result[\"#text\"] != null) {\n                    result.__text = result[\"#text\"];\n                    if (result.__text instanceof Array) {\n                        result.__text = result.__text.join(\"\\n\");\n                    }\n                    if (config.escapeMode)\n                        result.__text = unescapeXmlChars(result.__text);\n                    if (config.stripWhitespaces)\n                        result.__text = result.__text.trim();\n                    delete result[\"#text\"];\n                    if (config.arrayAccessForm == \"property\")\n                        delete result[\"#text_asArray\"];\n                    result.__text = checkFromXmlDateTimePaths(result.__text, childName, path + \".\" + childName);\n                }\n                if (result[\"#cdata-section\"] != null) {\n                    result.__cdata = result[\"#cdata-section\"];\n                    delete result[\"#cdata-section\"];\n                    if (config.arrayAccessForm == \"property\")\n                        delete result[\"#cdata-section_asArray\"];\n                }\n\n                if (result.__cnt == 1 && result.__text != null) {\n                    result = result.__text;\n                }\n                else if (result.__cnt == 0 && config.emptyNodeForm == \"text\") {\n                    result = '';\n                }\n                else if (result.__cnt > 1 && result.__text != null && config.skipEmptyTextNodesForObj) {\n                    if ((config.stripWhitespaces && result.__text == \"\") || (result.__text.trim() == \"\")) {\n                        delete result.__text;\n                    }\n                }\n                delete result.__cnt;\n\n                if (config.enableToStringFunc && (result.__text != null || result.__cdata != null )) {\n                    result.toString = function () {\n                        return (this.__text != null ? this.__text : '') + ( this.__cdata != null ? this.__cdata : '');\n                    };\n                }\n\n                return result;\n            }\n            else if (node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {\n                return node.nodeValue;\n            }\n        }\n\n        function startTag(jsonObj, element, attrList, closed) {\n            var resultStr = \"<\" + ( (jsonObj != null && jsonObj.__prefix != null) ? (jsonObj.__prefix + \":\") : \"\") + element;\n            if (attrList != null) {\n                for (var aidx = 0; aidx < attrList.length; aidx++) {\n                    var attrName = attrList[aidx];\n                    var attrVal = jsonObj[attrName];\n                    if (config.escapeMode)\n                        attrVal = escapeXmlChars(attrVal);\n                    resultStr += \" \" + attrName.substr(config.attributePrefix.length) + \"='\" + attrVal + \"'\";\n                }\n            }\n            if (!closed)\n                resultStr += \">\";\n            else\n                resultStr += \"/>\";\n            return resultStr;\n        }\n\n        function endTag(jsonObj, elementName) {\n            return \"</\" + (jsonObj.__prefix != null ? (jsonObj.__prefix + \":\") : \"\") + elementName + \">\";\n        }\n\n        function endsWith(str, suffix) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function jsonXmlSpecialElem(jsonObj, jsonObjField) {\n            if ((config.arrayAccessForm == \"property\" && endsWith(jsonObjField.toString(), (\"_asArray\")))\n                || jsonObjField.toString().indexOf(config.attributePrefix) == 0\n                || jsonObjField.toString().indexOf(\"__\") == 0\n                || (jsonObj[jsonObjField] instanceof Function))\n                return true;\n            else\n                return false;\n        }\n\n        function jsonXmlElemCount(jsonObj) {\n            var elementsCnt = 0;\n            if (jsonObj instanceof Object) {\n                for (var it in jsonObj) {\n                    if (jsonXmlSpecialElem(jsonObj, it))\n                        continue;\n                    elementsCnt++;\n                }\n            }\n            return elementsCnt;\n        }\n\n        function parseJSONAttributes(jsonObj) {\n            var attrList = [];\n            if (jsonObj instanceof Object) {\n                for (var ait in jsonObj) {\n                    if (ait.toString().indexOf(\"__\") == -1 && ait.toString().indexOf(config.attributePrefix) == 0) {\n                        attrList.push(ait);\n                    }\n                }\n            }\n            return attrList;\n        }\n\n        function parseJSONTextAttrs(jsonTxtObj) {\n            var result = \"\";\n\n            if (jsonTxtObj.__cdata != null) {\n                result += \"<![CDATA[\" + jsonTxtObj.__cdata + \"]]>\";\n            }\n\n            if (jsonTxtObj.__text != null) {\n                if (config.escapeMode)\n                    result += escapeXmlChars(jsonTxtObj.__text);\n                else\n                    result += jsonTxtObj.__text;\n            }\n            return result;\n        }\n\n        function parseJSONTextObject(jsonTxtObj) {\n            var result = \"\";\n\n            if (jsonTxtObj instanceof Object) {\n                result += parseJSONTextAttrs(jsonTxtObj);\n            }\n            else if (jsonTxtObj != null) {\n                if (config.escapeMode)\n                    result += escapeXmlChars(jsonTxtObj);\n                else\n                    result += jsonTxtObj;\n            }\n\n            return result;\n        }\n\n        function parseJSONArray(jsonArrRoot, jsonArrObj, attrList) {\n            var result = \"\";\n            if (jsonArrRoot.length == 0) {\n                result += startTag(jsonArrRoot, jsonArrObj, attrList, true);\n            }\n            else {\n                for (var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {\n                    result += startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);\n                    result += parseJSONObject(jsonArrRoot[arIdx]);\n                    result += endTag(jsonArrRoot[arIdx], jsonArrObj);\n                }\n            }\n            return result;\n        }\n\n        function parseJSONObject(jsonObj) {\n            var result = \"\";\n\n            var elementsCnt = jsonXmlElemCount(jsonObj);\n\n            if (elementsCnt > 0) {\n                for (var it in jsonObj) {\n\n                    if (jsonXmlSpecialElem(jsonObj, it))\n                        continue;\n\n                    var subObj = jsonObj[it];\n\n                    var attrList = parseJSONAttributes(subObj)\n\n                    if (subObj == null || subObj == undefined) {\n                        result += startTag(subObj, it, attrList, true);\n                    }\n                    else if (subObj instanceof Object) {\n\n                        if (subObj instanceof Array) {\n                            result += parseJSONArray(subObj, it, attrList);\n                        }\n                        else if (subObj instanceof Date) {\n                            result += startTag(subObj, it, attrList, false);\n                            result += subObj.toISOString();\n                            result += endTag(subObj, it);\n                        }\n                        else {\n                            var subObjElementsCnt = jsonXmlElemCount(subObj);\n                            if (subObjElementsCnt > 0 || subObj.__text != null || subObj.__cdata != null) {\n                                result += startTag(subObj, it, attrList, false);\n                                result += parseJSONObject(subObj);\n                                result += endTag(subObj, it);\n                            }\n                            else {\n                                result += startTag(subObj, it, attrList, true);\n                            }\n                        }\n                    }\n                    else {\n                        result += startTag(subObj, it, attrList, false);\n                        result += parseJSONTextObject(subObj);\n                        result += endTag(subObj, it);\n                    }\n                }\n            }\n            result += parseJSONTextObject(jsonObj);\n\n            return result;\n        }\n\n        this.parseXmlString = function (xmlDocStr) {\n            var isIEParser = window.ActiveXObject || \"ActiveXObject\" in window;\n            if (xmlDocStr === undefined) {\n                return null;\n            }\n            var xmlDoc;\n            if (window.DOMParser) {\n                var parser = new window.DOMParser();\n                var parsererrorNS = null;\n                // IE9+ now is here\n                if (!isIEParser) {\n                    try {\n                        parsererrorNS = parser.parseFromString(\"INVALID\", \"text/xml\").childNodes[0].namespaceURI;\n                    }\n                    catch (err) {\n                        parsererrorNS = null;\n                    }\n                }\n                try {\n                    xmlDoc = parser.parseFromString(xmlDocStr, \"text/xml\");\n                    if (parsererrorNS != null && xmlDoc.getElementsByTagNameNS(parsererrorNS, \"parsererror\").length > 0) {\n                        //throw new Error('Error parsing XML: '+xmlDocStr);\n                        xmlDoc = null;\n                    }\n                }\n                catch (err) {\n                    xmlDoc = null;\n                }\n            }\n            else {\n                // IE :(\n                if (xmlDocStr.indexOf(\"<?\") == 0) {\n                    xmlDocStr = xmlDocStr.substr(xmlDocStr.indexOf(\"?>\") + 2);\n                }\n                xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n                xmlDoc.async = \"false\";\n                xmlDoc.loadXML(xmlDocStr);\n            }\n            return xmlDoc;\n        };\n\n        this.asArray = function (prop) {\n            if (prop instanceof Array)\n                return prop;\n            else\n                return [prop];\n        };\n\n        this.toXmlDateTime = function (dt) {\n            if (dt instanceof Date)\n                return dt.toISOString();\n            else if (typeof(dt) === 'number')\n                return new Date(dt).toISOString();\n            else\n                return null;\n        };\n\n        this.asDateTime = function (prop) {\n            if (typeof(prop) == \"string\") {\n                return fromXmlDateTime(prop);\n            }\n            else\n                return prop;\n        };\n\n        this.xml2json = function (xmlDoc) {\n            return parseDOMChildren(xmlDoc);\n        };\n\n        this.xml_str2json = function (xmlDocStr) {\n            var xmlDoc = this.parseXmlString(xmlDocStr);\n            if (xmlDoc != null)\n                return this.xml2json(xmlDoc);\n            else\n                return null;\n        };\n\n        this.json2xml_str = function (jsonObj) {\n            return parseJSONObject(jsonObj);\n        };\n\n        this.json2xml = function (jsonObj) {\n            var xmlDocStr = this.json2xml_str(jsonObj);\n            return this.parseXmlString(xmlDocStr);\n        };\n\n        this.getVersion = function () {\n            return VERSION;\n        };\n    }\n});\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePoint/xml2js.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 762,
    "kind": "file",
    "name": "src/data/datasources/SharePointDataSource.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\nimport extend                       from 'lodash';\nimport _                            from 'lodash';\nimport {provide}                    from '../../utils/di/Decorators.js';\nimport {ObjectHelper}               from '../../utils/ObjectHelper.js';\nimport {UrlParser}                  from '../../utils/request/UrlParser.js';\nimport {DataSource}                 from '../DataSource.js';\nimport {SharePoint}                 from './SharePoint/SPSoapAdapter/SharePoint.js';\nimport {SharePointSnapshot}         from './SharePoint/SharePointSnapshot.js';\n\nlet _currentUser;\n\n/**\n * @ignore\n * An implementation of the DataSource allowing Sharepoint integration\n */\n@provide(DataSource)\nexport class SharePointDataSource extends DataSource {\n\n    static get currentUser() {\n        return _currentUser;\n    }\n\n    static set currentUser(value) {\n        _currentUser = value;\n    }\n\n    /**\n     * @param {String} path Full path to resource in remote data storage.\n     * @return {SharePointDataSource} SharePointDataSource instance.\n     **/\n    constructor(path, options = {}) {\n        super(path);\n\n        this._dataReference = null;\n        this._callbacks = [];\n        this._onValueCallback = null;\n        this._onAddCallback = null;\n        this._onChangeCallback = null;\n        this._onMoveCallback = null;\n        this._onRemoveCallback = null;\n        this._originalPath = path;\n        this.options = options;\n\n\n        /* Don't initialize this datasource when there is no path selected to retrieve data from. */\n        if (this.key().length > 0) {\n            let configuration = {\n                endPoint: this._originalPath,\n                listName: this.key()\n            };\n\n            let sharePointOptions = _.merge({}, this.options, configuration);\n\n            /* Bind the soap adapter against the datasource with given configuration */\n            this._dataReference = new SharePoint(sharePointOptions);\n        }\n    }\n\n    /**\n     * Indicate that the DataSource can be inherited when instantiating a list of models. By\n     * default we indicate false, which should trigger data model instantiation to create unique\n     * DataSource references to each model either in array or directly.\n     *\n     * If set to false, model updates trigger creation of a new DataSource instance. (default)\n     *\n     * @returns {Boolean} Whether the DataSource is inheritable.\n     */\n    get inheritable() {\n        return true;\n    }\n\n    /**\n     * Returns the full path to this dataSource's source on the remote storage provider.\n     * @returns {String} Full resource path.\n     */\n    toString() {\n        return this._originalPath;\n    }\n\n    /**\n     * Returns a dataSource reference to the given child branch of the current dataSource.\n     * @param {String} childName Child branch name.\n     * @param {Object} options Optional: additional options to pass to new DataSource instance.\n     * @returns {DataSource} New dataSource instance pointing to the given child branch.\n     */\n    child(childName, options = this.options) {\n        return SharePointDataSource.createFromChild(this._originalPath, childName, options);\n    }\n\n    static createFromChild(path, childName, options = {}) {\n        let childPath = '';\n        if (childName.indexOf('http') !== -1) {\n            childPath = childName.substring(1);\n        } else {\n            childPath += path + '/' + childName;\n        }\n        return new SharePointDataSource(childPath, options);\n    }\n\n    /**\n     * Returns the full URL to the path on the dataSource. Functionally identical to toString().\n     * @returns {String} Full resource path.\n     */\n    path() {\n        return this._originalPath;\n    }\n\n    /**\n     * Returns the name of the current branch in the path on the dataSource.\n     * @returns {String} Current branch name.\n     */\n    key() {\n        var url = UrlParser(this._originalPath);\n        if (!url) {\n            console.log('Invalid datasource path provided!');\n        }\n\n        if (url.path.length === 0) {\n            return '';\n        }\n        var pathElements = url.path.split('/');\n        if (pathElements.length === 1) {\n            return url.path;\n        } else {\n            return url.path.split('/').pop();\n        }\n    }\n\n    /**\n     * Writes newData to the path this dataSource was constructed with.\n     * @param {Object} newData Data to write to dataSource.\n     * @returns {Promise} Resolves when write to server is complete.\n     */\n    set(newData) {\n        this._dataReference.set(newData);\n        /* For now, we return a resolved promise in lack of better knowledge of when the data is synchronized */\n        return Promise.resolve();\n    }\n\n    /**\n     * Removes the object and all underlying children that this dataSource points to.\n     * @param {Object} object The current object, needed because of a SharePointDataSource-specific issue. Will be refactored out in the future.\n     * @returns {Promise}\n     */\n    remove(object) {\n        return this._dataReference.remove(object);\n    }\n\n    /**\n     * Writes newData to the path this dataSource was constructed with, appended by a random UID generated by\n     * the dataSource.\n     * @param {Object} newData New data to append to dataSource.\n     * @returns {SharePointDataSource}\n     */\n    push(newData) {\n        let pushedData = this._dataReference.set(newData);\n        let newDataReference = SharePointDataSource.createFromChild(this._originalPath, `${pushedData['_temporary-identifier']}`);\n\n        /* We need to set the SharePoint data reference's cache to the data we just pushed, so it can immediately emit a value\n         * once the newly created model subscribes to its own changes. This is needed to make Arva-ds' PrioArray.add() method work. */\n        newDataReference._dataReference.cache = pushedData;\n        return newDataReference;\n    }\n\n    /**\n     * Writes newData with given priority (ordering) to the path this dataSource was constructed with.\n     * @param {Object} newData New data to set.\n     * @param {String|Number} priority Priority value by which the data should be ordered.\n     * @returns {Promise} Resolves when write to server is complete.\n     */\n    setWithPriority(newData, priority) {\n        newData.priority = priority;\n        this.set(newData);\n        /* For now, we return a resolved promise in lack of better knowledge of when the data is synchronized */\n        return Promise.resolve();\n    }\n\n    /**\n     * Sets the priority (ordering) of an object on a given dataSource.\n     * @param {String|Number} newPriority New priority value to order data by.\n     * @returns {void}\n     */\n    setPriority(newPriority) {\n        throw new Promise.reject('Not implemented');\n    }\n\n\n    /**\n     * Sets data at the specified path(s) without touching unspecified paths\n     * @param {JSON} data The object to push\n     * @returns {Promise}\n     **/\n    update(data) {\n        return Promise.reject('Not implemented');\n    }\n\n    /**\n     * Returns a new dataSource reference that will limit the subscription to only the first given amount items.\n     * @param {Number} amount Amount of items to limit the dataSource to.\n     * @returns {DataSource} New dataSource instance.\n     */\n    limitToFirst(amount) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Returns a new dataSource reference that will limit the subscription to only the last given amount items.\n     * @param {Number} amount Amount of items to limit the dataSource to.\n     * @returns {DataSource} New dataSource instance.\n     */\n    limitToLast(amount) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with the given OAuth provider and credentials.\n     * @param {String} provider google, facebook, github, or twitter\n     * @param {String|Object} credentials Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authWithOAuthToken(provider, credentials, onComplete, options) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with a custom auth token or secret.\n     * @param {String} authToken Authentication token or secret.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authWithCustomToken(authToken, onComplete, options) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Authenticates all instances of this DataSource with the given email/password credentials.\n     * @param {String|Object} credentials Object with key/value pairs {email: 'value', password:'value'}.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authWithPassword(credentials, onComplete, options) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Authenticates all instances of this DataSource as an anonymous user.\n     * @param {Function} onComplete Callback, executed when login is completed either successfully or erroneously.\n     * On error, first argument is error message.\n     * On success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires.\n     * @param {Object} options Optional, additional client arguments, such as configuring session persistence.\n     * @returns {void}\n     */\n    authAnonymously(onComplete, options) {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Fetches the current user's authentication state.\n     * If the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.\n     * If the user is not authenticated, returns null.\n     * @returns {Object|null} User auth object.\n     */\n    getAuth() {\n        return new Promise((resolve)=> {\n            if (!SharePointDataSource.currentUser) {\n                this._dataReference.getAuth((authData) => {\n                    SharePointDataSource.currentUser = authData;\n                    resolve(SharePointDataSource.currentUser);\n                });\n            } else {\n                resolve(SharePointDataSource.currentUser);\n            }\n        });\n    }\n\n    /**\n     * Logs out from the datasource, allowing to re-authenticate at a later time.\n     * @returns {void}\n     */\n    unauth() {\n        throw new Error('Not implemented');\n    }\n\n    /**\n     * Subscribe to an event emitted by the DataSource.\n     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed'.\n     * @param {Function} handler Function to call when the subscribed event is emitted.\n     * @param {Object} context Context to set 'this' to when calling the handler function.\n     */\n    on(event, handler, context) {\n        let callback = this._callbacks[handler] = (data) => {\n            let newChildSnapshot = new SharePointSnapshot(data, this);\n            handler(newChildSnapshot);\n        };\n        this._dataReference.on(event, callback, context);\n    }\n\n    /**\n     * Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe.\n     * @param {String} event Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed'.\n     * @param {Function} handler Function to call when the subscribed event is emitted.\n     * @param {Object} context Context to set 'this' to when calling the handler function.\n     * @returns {Promise}\n     */\n    once(event, handler, context = this) {\n        //todo fix so that it returns a promise\n        let onceWrapper = function () {\n            handler.call(context, ...arguments);\n            this.off(event, onceWrapper);\n        }.bind(this);\n\n        return this.on(event, onceWrapper, this);\n    }\n\n    /**\n     * Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for\n     * the given event are removed. If no parameters are given at all, all event types will have their handlers removed.\n     * @param {String} event Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed'.\n     * @param {Function} handler Optional: Function that was used in previous subscription.\n     */\n    off(event, handler) {\n        let callback = this._callbacks[handler];\n        this._dataReference.off(event, callback);\n    }\n\n    /**\n     * Sets the callback triggered when dataSource updates the data.\n     * @param {Function} callback Callback function to call when the subscribed data value changes.\n     * @returns {void}\n     **/\n    setValueChangedCallback(callback) {\n        this._onValueCallback = (data) => {\n            let newChildSnapshot = new SharePointSnapshot(data, this);\n            callback(newChildSnapshot);\n        };\n        this._dataReference.on('value', this._onValueCallback.bind(this));\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource updates the data.\n     * @returns {void}\n     **/\n    removeValueChangedCallback() {\n        if (this._onValueCallback) {\n            this._dataReference.off('value', this._onValueCallback);\n            this._onValueCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource adds a data element.\n     * @param {Function} callback Callback function to call when a new data child is added.\n     * @returns {void}\n     **/\n    setChildAddedCallback(callback) {\n        this._onAddCallback = (data, previousSiblingId) => {\n            let newChildSnapshot = new SharePointSnapshot(data, this);\n            callback(newChildSnapshot, previousSiblingId);\n        };\n        this._dataReference.on('child_added', this._onAddCallback.bind(this));\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource adds a data element.\n     * @returns {void}\n     **/\n    removeChildAddedCallback() {\n        if (this._onAddCallback) {\n            this._dataReference.off('child_added', this._onAddCallback);\n            this._onAddCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource changes a data element.\n     * @param {Function} callback Callback function to call when a child is changed.\n     * @returns {void}\n     **/\n    setChildChangedCallback(callback) {\n        this._onChangeCallback = (data, previousSiblingId) => {\n            let newChildSnapshot = new SharePointSnapshot(data, this);\n            callback(newChildSnapshot, previousSiblingId);\n        };\n        this._dataReference.on('child_changed', this._onChangeCallback.bind(this));\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource changes a data element.\n     * @returns {void}\n     **/\n    removeChildChangedCallback() {\n        if (this._onChangeCallback) {\n            this._dataReference.off('child_changed', this._onChangeCallback);\n            this._onChangeCallback = null;\n        }\n    }\n\n    /**\n     * Set the callback triggered when dataSource moves a data element.\n     * @param {Function} callback Callback function to call when a child is moved.\n     * @returns {void}\n     **/\n    setChildMovedCallback(callback) {\n        console.warn('Not implemented');\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource moves a data element.\n     * @returns {void}\n     **/\n    removeChildMovedCallback() {\n        console.warn('Not implemented');\n    }\n\n    /**\n     * Resolves when the DataSource is synchronized to the server\n     * @returns {Promise} Resolves when the DataSource is synchronized\n     */\n    synced() {\n        console.warn('Not implemented.');\n    }\n\n    /**\n     * Set the callback triggered when dataSource removes a data element.\n     * @param {Function} callback Callback function to call when a child is removed.\n     * @returns {void}\n     **/\n    setChildRemovedCallback(callback) {\n        this._onRemoveCallback = (data) => {\n            let removedChildSnapshot = new SharePointSnapshot(data, this);\n            callback(removedChildSnapshot);\n        };\n\n        this._dataReference.on('child_removed', this._onRemoveCallback.bind(this));\n    }\n\n    /**\n     * Removes the callback set to trigger when dataSource removes a data element.\n     * @returns {void}\n     **/\n    removeChildRemovedCallback() {\n        if (this._onRemoveCallback) {\n            this._dataReference.off('child_removed', this._onRemoveCallback);\n            this._onRemoveCallback = null;\n        }\n    }\n\n    /**\n     * Dummy method that just returns an empty string.\n     * @returns {String} Empty string.\n     */\n    root() {\n        return '';\n    }\n\n    _notifyOnValue(snapshot) {\n        if (this._onValueCallback) {\n            this._onValueCallback(snapshot);\n        }\n    }\n\n    _ParseSelector(path, endPoint) {\n\n    }\n\n    _ParsePath(path, endPoint) {\n\n        var url = UrlParser(path);\n        if (!url) {\n            console.log('Invalid datasource path provided!');\n        }\n\n        var pathParts = url.path.split('/');\n        var newPath = url.protocol + '://' + url.host + '/';\n        for (var i = 0; i < pathParts.length; i++) {\n            newPath += pathParts[i] + '/';\n        }\n        newPath += endPoint;\n        return newPath;\n    }\n    /**\n     * Performs an atomic transaction\n     * @param {Function} transactionFunction A function that takes the current value as a single argument, and\n     * returns the new value.\n     * @returns {Promise} Resolves the new value when the transaction is finished\n     */\n    atomicTransaction(transactionFunction) {\n        throw new Error(\"Not supported\");\n    }\n\n    /**\n     * Merges the current user with the specified provider.\n     * @param provider\n     * @returns {Authentication}\n     */\n    linkCurrentUserWithProvider(provider) {\n        throw new Error(\"Not supported\");\n    }\n\n    /**\n     * Creates a provider with the specified type\n     *\n     * @param {String} providerType Can be 'password' or 'facebook'\n     * @param {String|Object} credential if 'password' providerType, then an object {email:String,password:String}. If\n     * 'facebook' providerType, then a string containing the API token.\n     * @returns {Provider}\n     */\n    createProviderFromCredential(providerType, credential) {\n        throw new Error(\"Not supported\");\n    }\n\n    registerWithPassword(credentials, onComplete, options) {\n        throw new Error(\"Not Supported\")\n    }\n\n    /**\n     * Gets a symbolic representation of a timestamp as being run on the server-side\n     * @returns {*}\n     */\n    getTimestampSymbol() {\n        throw new Error(\"Not Supported\")\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/datasources/SharePointDataSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 763,
    "kind": "class",
    "name": "SharePointDataSource",
    "memberof": "src/data/datasources/SharePointDataSource.js",
    "static": true,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/datasources/SharePointDataSource.js",
    "importStyle": "{SharePointDataSource}",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "decorators": [
      {
        "name": "provide",
        "arguments": "(DataSource)"
      }
    ],
    "interface": false,
    "extends": [
      "src/data/DataSource.js~DataSource"
    ]
  },
  {
    "__docId__": 764,
    "kind": "get",
    "name": "currentUser",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource.currentUser",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "set",
    "name": "currentUser",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource.currentUser",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 766,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Full path to resource in remote data storage."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SharePointDataSource"
      ],
      "spread": false,
      "description": "SharePointDataSource instance."
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "_dataReference",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_dataReference",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "_callbacks",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_callbacks",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "_onValueCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_onValueCallback",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "member",
    "name": "_onAddCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_onAddCallback",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 771,
    "kind": "member",
    "name": "_onChangeCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_onChangeCallback",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 772,
    "kind": "member",
    "name": "_onMoveCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_onMoveCallback",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 773,
    "kind": "member",
    "name": "_onRemoveCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_onRemoveCallback",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 774,
    "kind": "member",
    "name": "_originalPath",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_originalPath",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "member",
    "name": "options",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#options",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 777,
    "kind": "get",
    "name": "inheritable",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#inheritable",
    "access": "public",
    "description": "Indicate that the DataSource can be inherited when instantiating a list of models. By\ndefault we indicate false, which should trigger data model instantiation to create unique\nDataSource references to each model either in array or directly.\n\nIf set to false, model updates trigger creation of a new DataSource instance. (default)",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the DataSource is inheritable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the DataSource is inheritable."
    },
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 778,
    "kind": "method",
    "name": "toString",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#toString",
    "access": "public",
    "description": "Returns the full path to this dataSource's source on the remote storage provider.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path."
    },
    "params": []
  },
  {
    "__docId__": 779,
    "kind": "method",
    "name": "child",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#child",
    "access": "public",
    "description": "Returns a dataSource reference to the given child branch of the current dataSource.",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance pointing to the given child branch."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "childName",
        "description": "Child branch name."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional: additional options to pass to new DataSource instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance pointing to the given child branch."
    }
  },
  {
    "__docId__": 780,
    "kind": "method",
    "name": "createFromChild",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource.createFromChild",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "childName",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 781,
    "kind": "method",
    "name": "path",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#path",
    "access": "public",
    "description": "Returns the full URL to the path on the dataSource. Functionally identical to toString().",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Full resource path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Full resource path."
    },
    "params": []
  },
  {
    "__docId__": 782,
    "kind": "method",
    "name": "key",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#key",
    "access": "public",
    "description": "Returns the name of the current branch in the path on the dataSource.",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Current branch name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Current branch name."
    },
    "params": []
  },
  {
    "__docId__": 783,
    "kind": "method",
    "name": "set",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#set",
    "access": "public",
    "description": "Writes newData to the path this dataSource was constructed with.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when write to server is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "Data to write to dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when write to server is complete."
    }
  },
  {
    "__docId__": 784,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#remove",
    "access": "public",
    "description": "Removes the object and all underlying children that this dataSource points to.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The current object, needed because of a SharePointDataSource-specific issue. Will be refactored out in the future."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 785,
    "kind": "method",
    "name": "push",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#push",
    "access": "public",
    "description": "Writes newData to the path this dataSource was constructed with, appended by a random UID generated by\nthe dataSource.",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{SharePointDataSource}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to append to dataSource."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "SharePointDataSource"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 786,
    "kind": "method",
    "name": "setWithPriority",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setWithPriority",
    "access": "public",
    "description": "Writes newData with given priority (ordering) to the path this dataSource was constructed with.",
    "lineNumber": 179,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when write to server is complete."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "newData",
        "description": "New data to set."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "priority",
        "description": "Priority value by which the data should be ordered."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when write to server is complete."
    }
  },
  {
    "__docId__": 787,
    "kind": "method",
    "name": "setPriority",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setPriority",
    "access": "public",
    "description": "Sets the priority (ordering) of an object on a given dataSource.",
    "lineNumber": 191,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "newPriority",
        "description": "New priority value to order data by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 788,
    "kind": "method",
    "name": "update",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#update",
    "access": "public",
    "description": "Sets data at the specified path(s) without touching unspecified paths",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "JSON"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "The object to push"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 789,
    "kind": "method",
    "name": "limitToFirst",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#limitToFirst",
    "access": "public",
    "description": "Returns a new dataSource reference that will limit the subscription to only the first given amount items.",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of items to limit the dataSource to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "limitToLast",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#limitToLast",
    "access": "public",
    "description": "Returns a new dataSource reference that will limit the subscription to only the last given amount items.",
    "lineNumber": 219,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{DataSource} New dataSource instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "amount",
        "description": "Amount of items to limit the dataSource to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "New dataSource instance."
    }
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "authWithOAuthToken",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#authWithOAuthToken",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with the given OAuth provider and credentials.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": "google, facebook, github, or twitter"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Access token string, or object with key/value pairs with e.g. OAuth 1.1 credentials."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "authWithCustomToken",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#authWithCustomToken",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with a custom auth token or secret.",
    "lineNumber": 246,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "authToken",
        "description": "Authentication token or secret."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "authWithPassword",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#authWithPassword",
    "access": "public",
    "description": "Authenticates all instances of this DataSource with the given email/password credentials.",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credentials",
        "description": "Object with key/value pairs {email: 'value', password:'value'}."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "authAnonymously",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#authAnonymously",
    "access": "public",
    "description": "Authenticates all instances of this DataSource as an anonymous user.",
    "lineNumber": 271,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "onComplete",
        "description": "Callback, executed when login is completed either successfully or erroneously.\nOn error, first argument is error message.\nOn success, the first argument is null, and the second argument is an object containing the fields uid, provider, auth, and expires."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Optional, additional client arguments, such as configuring session persistence."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 795,
    "kind": "method",
    "name": "getAuth",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#getAuth",
    "access": "public",
    "description": "Fetches the current user's authentication state.\nIf the user is authenticated, returns an object containing at least the fields uid, provider, auth, and expires.\nIf the user is not authenticated, returns null.",
    "lineNumber": 281,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object|null} User auth object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "null"
      ],
      "spread": false,
      "description": "User auth object."
    },
    "params": []
  },
  {
    "__docId__": 796,
    "kind": "method",
    "name": "unauth",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#unauth",
    "access": "public",
    "description": "Logs out from the datasource, allowing to re-authenticate at a later time.",
    "lineNumber": 298,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 797,
    "kind": "method",
    "name": "on",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#on",
    "access": "public",
    "description": "Subscribe to an event emitted by the DataSource.",
    "lineNumber": 308,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call when the subscribed event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Context to set 'this' to when calling the handler function."
      }
    ],
    "return": null
  },
  {
    "__docId__": 798,
    "kind": "method",
    "name": "once",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#once",
    "access": "public",
    "description": "Subscribe to an event emitted by the DataSource once, and then immediately unsubscribe.",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to subscribe to. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Function to call when the subscribed event is emitted."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "Context to set 'this' to when calling the handler function."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "off",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#off",
    "access": "public",
    "description": "Unsubscribe to a previously subscribed event. If no handler or context is given, all handlers for\nthe given event are removed. If no parameters are given at all, all event types will have their handlers removed.",
    "lineNumber": 339,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Event type to unsubscribe from. Allowed values are: 'value', 'child_changed', 'child_added', 'child_removed'."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler",
        "description": "Optional: Function that was used in previous subscription."
      }
    ],
    "return": null
  },
  {
    "__docId__": 800,
    "kind": "method",
    "name": "setValueChangedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setValueChangedCallback",
    "access": "public",
    "description": "Sets the callback triggered when dataSource updates the data.",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when the subscribed data value changes."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 802,
    "kind": "method",
    "name": "removeValueChangedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#removeValueChangedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource updates the data.",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 804,
    "kind": "method",
    "name": "setChildAddedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setChildAddedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource adds a data element.",
    "lineNumber": 373,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a new data child is added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 806,
    "kind": "method",
    "name": "removeChildAddedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#removeChildAddedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource adds a data element.",
    "lineNumber": 385,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 808,
    "kind": "method",
    "name": "setChildChangedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setChildChangedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource changes a data element.",
    "lineNumber": 397,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is changed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 810,
    "kind": "method",
    "name": "removeChildChangedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#removeChildChangedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource changes a data element.",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 812,
    "kind": "method",
    "name": "setChildMovedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setChildMovedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource moves a data element.",
    "lineNumber": 421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is moved."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 813,
    "kind": "method",
    "name": "removeChildMovedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#removeChildMovedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource moves a data element.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 814,
    "kind": "method",
    "name": "synced",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#synced",
    "access": "public",
    "description": "Resolves when the DataSource is synchronized to the server",
    "lineNumber": 437,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves when the DataSource is synchronized"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves when the DataSource is synchronized"
    },
    "params": []
  },
  {
    "__docId__": 815,
    "kind": "method",
    "name": "setChildRemovedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#setChildRemovedCallback",
    "access": "public",
    "description": "Set the callback triggered when dataSource removes a data element.",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Callback function to call when a child is removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 817,
    "kind": "method",
    "name": "removeChildRemovedCallback",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#removeChildRemovedCallback",
    "access": "public",
    "description": "Removes the callback set to trigger when dataSource removes a data element.",
    "lineNumber": 459,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 819,
    "kind": "method",
    "name": "root",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#root",
    "access": "public",
    "description": "Dummy method that just returns an empty string.",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Empty string."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Empty string."
    },
    "params": []
  },
  {
    "__docId__": 820,
    "kind": "method",
    "name": "_notifyOnValue",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_notifyOnValue",
    "access": "private",
    "description": null,
    "lineNumber": 474,
    "undocument": true,
    "params": [
      {
        "name": "snapshot",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 821,
    "kind": "method",
    "name": "_ParseSelector",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_ParseSelector",
    "access": "private",
    "description": null,
    "lineNumber": 480,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "endPoint",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 822,
    "kind": "method",
    "name": "_ParsePath",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#_ParsePath",
    "access": "private",
    "description": null,
    "lineNumber": 484,
    "undocument": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "endPoint",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "method",
    "name": "atomicTransaction",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#atomicTransaction",
    "access": "public",
    "description": "Performs an atomic transaction",
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise} Resolves the new value when the transaction is finished"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transactionFunction",
        "description": "A function that takes the current value as a single argument, and\nreturns the new value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "Resolves the new value when the transaction is finished"
    }
  },
  {
    "__docId__": 824,
    "kind": "method",
    "name": "linkCurrentUserWithProvider",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#linkCurrentUserWithProvider",
    "access": "public",
    "description": "Merges the current user with the specified provider.",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Authentication}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "provider",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Authentication"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 825,
    "kind": "method",
    "name": "createProviderFromCredential",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#createProviderFromCredential",
    "access": "public",
    "description": "Creates a provider with the specified type",
    "lineNumber": 526,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Provider}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "providerType",
        "description": "Can be 'password' or 'facebook'"
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "credential",
        "description": "if 'password' providerType, then an object {email:String,password:String}. If\n'facebook' providerType, then a string containing the API token."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 826,
    "kind": "method",
    "name": "registerWithPassword",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#registerWithPassword",
    "access": "public",
    "description": null,
    "lineNumber": 530,
    "undocument": true,
    "params": [
      {
        "name": "credentials",
        "types": [
          "*"
        ]
      },
      {
        "name": "onComplete",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 827,
    "kind": "method",
    "name": "getTimestampSymbol",
    "memberof": "src/data/datasources/SharePointDataSource.js~SharePointDataSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/datasources/SharePointDataSource.js~SharePointDataSource#getTimestampSymbol",
    "access": "public",
    "description": "Gets a symbolic representation of a timestamp as being run on the server-side",
    "lineNumber": 538,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 828,
    "kind": "file",
    "name": "src/data/local/LocalModel.js",
    "content": "/**\n * Created by Manuel on 22/07/16.\n */\nimport cloneDeep        from 'lodash/cloneDeep.js'\nimport omit             from 'lodash/omit.js';\nimport {Model}          from '../../core/Model';\nimport {DataSource}     from '../DataSource.js';\nimport {ObjectHelper}   from 'arva-js/utils/ObjectHelper.js';\n\n/**\n * A model where data is not synchronized to any back-end\n */\nexport class LocalModel extends Model {\n\n    get id() {\n        return this._id;\n    }\n\n    set id(value) {\n        this._id = value;\n    }\n\n    _buildFromDataSource() {\n    }\n\n    constructor(id, data) {\n        if(id === null) { id = `${Math.random() * 100000}`; }\n        let dataSource = new DataSource();\n        super(id, data, {dataSource});\n        this.id = id;\n        this._dataSource = dataSource;\n        this._dataSource.ready = true;\n    }\n\n    static fromModel(model) {\n        return LocalModel.fromModelClass(model.constructor, model.id, LocalModel.cloneModelProperties(model));\n    }\n\n    static fromModelClass(modelClass, modelID = null, constructionArguments = []) {\n        let LocalizedModel = LocalModel.createClassFromModel(modelClass);\n        let localizedModel = new LocalizedModel(modelID, ...constructionArguments);\n        return localizedModel;\n    }\n\n    static createClassFromModel(modelClass) {\n        return this.createMergedModelClass(modelClass);\n    }\n\n    static createMergedModelClass(...modelClasses) {\n        class LocalizedModel extends LocalModel{}\n        for(let modelPrototype of modelClasses.map(({prototype}) => prototype)){\n            /* Define the properties that was defined on the modelClass, but omit things that would mess up the construction */\n            Object.defineProperties(LocalizedModel.prototype, omit(ObjectHelper.getMethodDescriptors(modelPrototype),\n                ['constructor', 'id', 'dataSource', 'priority', '_inheritable']));\n        }\n        return LocalizedModel;\n    }\n\n    static cloneModelProperties(model) {\n        return cloneDeep(ObjectHelper.getEnumerableProperties(model));\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/local/LocalModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 829,
    "kind": "class",
    "name": "LocalModel",
    "memberof": "src/data/local/LocalModel.js",
    "static": true,
    "longname": "src/data/local/LocalModel.js~LocalModel",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/local/LocalModel.js",
    "importStyle": "{LocalModel}",
    "description": "A model where data is not synchronized to any back-end",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/core/Model.js~Model"
    ]
  },
  {
    "__docId__": 830,
    "kind": "get",
    "name": "id",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalModel.js~LocalModel#id",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 831,
    "kind": "set",
    "name": "id",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalModel.js~LocalModel#id",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 832,
    "kind": "member",
    "name": "_id",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "static": false,
    "longname": "src/data/local/LocalModel.js~LocalModel#_id",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "_buildFromDataSource",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalModel.js~LocalModel#_buildFromDataSource",
    "access": "private",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 834,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalModel.js~LocalModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true
  },
  {
    "__docId__": 836,
    "kind": "member",
    "name": "_dataSource",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "static": false,
    "longname": "src/data/local/LocalModel.js~LocalModel#_dataSource",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 837,
    "kind": "method",
    "name": "fromModel",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalModel.js~LocalModel.fromModel",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 838,
    "kind": "method",
    "name": "fromModelClass",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalModel.js~LocalModel.fromModelClass",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "modelClass",
        "types": [
          "*"
        ]
      },
      {
        "name": "modelID",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "constructionArguments",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 839,
    "kind": "method",
    "name": "createClassFromModel",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalModel.js~LocalModel.createClassFromModel",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [
      {
        "name": "modelClass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 840,
    "kind": "method",
    "name": "createMergedModelClass",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalModel.js~LocalModel.createMergedModelClass",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [
      {
        "name": "modelClasses",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 841,
    "kind": "method",
    "name": "cloneModelProperties",
    "memberof": "src/data/local/LocalModel.js~LocalModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalModel.js~LocalModel.cloneModelProperties",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 842,
    "kind": "file",
    "name": "src/data/local/LocalPrioritisedArray.js",
    "content": "/**\n * Created by Manuel on 22/07/16.\n */\nimport omit             from 'lodash/omit.js';\n\nimport {LocalModel}         from './LocalModel.js';\nimport {DataSource}         from '../DataSource';\nimport {PrioritisedArray}   from '../PrioritisedArray.js';\nimport {ObjectHelper}       from '../../utils/ObjectHelper.js';\n\n/**\n * Provides a way to create PrioritisedArrays without back-end synchronization\n */\nexport class LocalPrioritisedArray extends PrioritisedArray {\n\n    constructor(dataType) {\n        super(dataType, new DataSource());\n        this._dataSource.ready = true;\n    }\n\n    /**\n     * Override to make sure that we catch the 'removed' events by patching the model.remove function\n     * of whatever is added, and also that we can follow 'changed' events\n     * @param item\n     * @param previousSiblingId\n     * @returns {Object}\n     */\n    add(item, previousSiblingId) {\n        let resultingModel = super.add(item, previousSiblingId);\n        if (!(resultingModel instanceof this._dataType)) {\n            resultingModel = item;\n        }\n        let originalRemoveFunction = resultingModel.remove;\n        let onChildRemoved = this._onChildRemoved;\n        resultingModel.remove = function () {\n            onChildRemoved({ key: this.id, val: () => this.shadow });\n            originalRemoveFunction.apply(this, arguments);\n        }.bind(resultingModel);\n\n        resultingModel.on('changed', () => {\n            this._eventEmitter.emit('child_changed', resultingModel, null);\n            this._eventEmitter.emit('value', this);\n        });\n\n        return resultingModel;\n    }\n\n    _buildFromDataSource() {\n    }\n\n    static mergePrioritisedArrays(...prioritisedArrays) {\n        let LocalizedModel = LocalModel.createMergedModelClass(...prioritisedArrays.map((prioritisedArray) => prioritisedArray._dataType));\n        let LocalisedPrioritisedArray = LocalPrioritisedArray.createMergedPrioritisedArrayClass(...prioritisedArrays);\n        let localPrioritisedArray = new LocalisedPrioritisedArray(LocalizedModel);\n        for(let prioritisedArray of prioritisedArrays){\n            prioritisedArray.once('value', () => {\n                for (let item of prioritisedArray) {\n                    /* Add a copy so that everything stays local by converting it to a localizedModel */\n                    localPrioritisedArray.add(new LocalizedModel(item.id, LocalModel.cloneModelProperties(item)));\n                }\n            });\n        }\n        return localPrioritisedArray;\n    }\n\n    static fromPrioritisedArray(prioritisedArray) {\n        return this.mergePrioritisedArrays(prioritisedArray);\n    }\n\n    static classFromPrioritisedArray(prioritisedArray) {\n        return this.createMergedPrioritisedArrayClass(prioritisedArray);\n    }\n\n    //TODO This function isn't bullet proof, since it won't execute the constructor of the prioritisedArray and might miss some setup from the original class\n    static createMergedPrioritisedArrayClass(...prioritisedArrays) {\n        class LocalisedPrioritisedArray extends LocalPrioritisedArray {}\n        for(let prioritisedArray of prioritisedArrays){\n            let prioritisedArrayPrototype  = Object.getPrototypeOf(prioritisedArray);\n            /* Define the properties that was defined on the modelClass, but omit things that would mess up the construction */\n            Object.defineProperties(LocalisedPrioritisedArray.prototype,\n                omit(\n                    ObjectHelper.getMethodDescriptors(prioritisedArrayPrototype),\n                    ['constructor', 'length', ...Object.getOwnPropertyNames(LocalPrioritisedArray.prototype)]\n                )\n            );\n        }\n        return LocalisedPrioritisedArray;\n    }\n\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/local/LocalPrioritisedArray.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 843,
    "kind": "class",
    "name": "LocalPrioritisedArray",
    "memberof": "src/data/local/LocalPrioritisedArray.js",
    "static": true,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/local/LocalPrioritisedArray.js",
    "importStyle": "{LocalPrioritisedArray}",
    "description": "Provides a way to create PrioritisedArrays without back-end synchronization",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "src/data/PrioritisedArray.js~PrioritisedArray"
    ]
  },
  {
    "__docId__": 844,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 845,
    "kind": "method",
    "name": "add",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray#add",
    "access": "public",
    "description": "Override to make sure that we catch the 'removed' events by patching the model.remove function\nof whatever is added, and also that we can follow 'changed' events",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "previousSiblingId",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 846,
    "kind": "method",
    "name": "_buildFromDataSource",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray#_buildFromDataSource",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "mergePrioritisedArrays",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray.mergePrioritisedArrays",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "prioritisedArrays",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 848,
    "kind": "method",
    "name": "fromPrioritisedArray",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray.fromPrioritisedArray",
    "access": "public",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [
      {
        "name": "prioritisedArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 849,
    "kind": "method",
    "name": "classFromPrioritisedArray",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray.classFromPrioritisedArray",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "params": [
      {
        "name": "prioritisedArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 850,
    "kind": "method",
    "name": "createMergedPrioritisedArrayClass",
    "memberof": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/data/local/LocalPrioritisedArray.js~LocalPrioritisedArray.createMergedPrioritisedArrayClass",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "prioritisedArrays",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 851,
    "kind": "file",
    "name": "src/data/storage/FileSource.js",
    "content": "/**\n * Created by tom on 07/02/2017.\n */\n/**\n * @ignore\n */\nexport class FileSource {\n\n    /**\n     * @param {String} path Full path to resource in remote data storage.\n     * @return {DataSource} DataSource instance.\n     **/\n    constructor(path) {\n        this._dataReference = null;\n    }\n\n    /**\n     * Uploads a new file to the remote store.\n     *\n     * @param {File|Blob} file\n     * @returns {Promise.<void>}\n     */\n    async push(file) {\n        (console.warn || console.log)(`${this.constructor.name}.push() is not yet implemented`);\n    }\n\n    /**\n     * Downloads an existing file from the remote store.\n     * @param {String} fileName file name without the preceeding store path (.e.g picture.jpg).\n     * @returns {Promise.File}\n     */\n    async get(fileName) {\n        (console.warn || console.log)(`${this.constructor.name}.get() is not yet implemented`);\n    }\n\n    /**\n     * Uploads and overwrites a new picture to an existing location.\n     * @param {String} fileName Existing file name, and also the name under which the new file will be saved.\n     * @param file\n     * @returns {Promise.Boolean}\n     */\n    async set(fileName, file) {\n        (console.warn || console.log)(`${this.constructor.name}.set() is not yet implemented`);\n    }\n\n    /**\n     * Removes the file with the given name, if present.\n     * @param fileName\n     * @returns {Promise.Boolean}\n     */\n    async remove(fileName) {\n        (console.warn || console.log)(`${this.constructor.name}.remove() is not yet implemented`);\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/storage/FileSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 852,
    "kind": "class",
    "name": "FileSource",
    "memberof": "src/data/storage/FileSource.js",
    "static": true,
    "longname": "src/data/storage/FileSource.js~FileSource",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/storage/FileSource.js",
    "importStyle": "{FileSource}",
    "description": "",
    "lineNumber": 7,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 853,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/storage/FileSource.js~FileSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/storage/FileSource.js~FileSource#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Full path to resource in remote data storage."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "DataSource instance."
    }
  },
  {
    "__docId__": 854,
    "kind": "member",
    "name": "_dataReference",
    "memberof": "src/data/storage/FileSource.js~FileSource",
    "static": false,
    "longname": "src/data/storage/FileSource.js~FileSource#_dataReference",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 855,
    "kind": "method",
    "name": "push",
    "memberof": "src/data/storage/FileSource.js~FileSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/storage/FileSource.js~FileSource#push",
    "access": "public",
    "description": "Uploads a new file to the remote store.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "File",
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 856,
    "kind": "method",
    "name": "get",
    "memberof": "src/data/storage/FileSource.js~FileSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/storage/FileSource.js~FileSource#get",
    "access": "public",
    "description": "Downloads an existing file from the remote store.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.File}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "file name without the preceeding store path (.e.g picture.jpg)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.File"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 857,
    "kind": "method",
    "name": "set",
    "memberof": "src/data/storage/FileSource.js~FileSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/storage/FileSource.js~FileSource#set",
    "access": "public",
    "description": "Uploads and overwrites a new picture to an existing location.",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": "Existing file name, and also the name under which the new file will be saved."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 858,
    "kind": "method",
    "name": "remove",
    "memberof": "src/data/storage/FileSource.js~FileSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/storage/FileSource.js~FileSource#remove",
    "access": "public",
    "description": "Removes the file with the given name, if present.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fileName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 859,
    "kind": "file",
    "name": "src/data/storage/FirebaseFileSource.js",
    "content": "/**\n * Created by tom on 07/02/2017.\n */\n\n/**\n * @ignore\n */\nexport class FirebaseFileSource {\n\n    /**\n     * @param {String} path Full path to resource in remote data storage.\n     * @return {DataSource} DataSource instance.\n     **/\n    constructor(path) {\n        this.path = path;\n        this.storage = firebase.storage();\n        this.storageRef = this.storage.ref(this.path);\n    }\n\n    /**\n     * Uploads a new file to the remote store.\n     *\n     * @param {File|Blob} file\n     * @returns {Promise.<void>}\n     */\n    async push(file) {\n        return new Promise((resolve, reject) => {\n            let fileRef = this.storageRef.child(`${Date.now()}-${file.name}`);\n            let uploadTask = fileRef.put(file);\n\n            uploadTask.on('state_changed', function (snapshot) {\n                /* Progress is available here */\n            }, function (error) {\n                reject(error);\n            }, function () {\n                if(uploadTask.snapshot && uploadTask.snapshot.downloadURL) {\n                    resolve(uploadTask.snapshot.downloadURL);\n                } else {\n                    reject('No downloadURL in response');\n                }\n            });\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/data/storage/FirebaseFileSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 860,
    "kind": "class",
    "name": "FirebaseFileSource",
    "memberof": "src/data/storage/FirebaseFileSource.js",
    "static": true,
    "longname": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/data/storage/FirebaseFileSource.js",
    "importStyle": "{FirebaseFileSource}",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 861,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Full path to resource in remote data storage."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "DataSource"
      ],
      "spread": false,
      "description": "DataSource instance."
    }
  },
  {
    "__docId__": 862,
    "kind": "member",
    "name": "path",
    "memberof": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource",
    "static": false,
    "longname": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource#path",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 863,
    "kind": "member",
    "name": "storage",
    "memberof": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource",
    "static": false,
    "longname": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource#storage",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 864,
    "kind": "member",
    "name": "storageRef",
    "memberof": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource",
    "static": false,
    "longname": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource#storageRef",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 865,
    "kind": "method",
    "name": "push",
    "memberof": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/data/storage/FirebaseFileSource.js~FirebaseFileSource#push",
    "access": "public",
    "description": "Uploads a new file to the remote store.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "File",
          "Blob"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 866,
    "kind": "file",
    "name": "src/layout/DecoratorHelpers.js",
    "content": "import { RenderablePrototype }      from 'famous/utilities/RenderablePrototype.js'\n\n/**\n *  @ignore\n * @param viewOrRenderable\n * @param renderableName\n * @param descriptor\n * @returns {*}\n */\nexport function prepDecoratedRenderable (viewOrRenderable, renderableName, descriptor) {\n\n\n    /* This function can also be called as prepDecoratedRenderable(renderable) */\n    if (!renderableName && !descriptor) {\n        let renderable = viewOrRenderable;\n        renderable.decorations = renderable.decorations || {};\n        return renderable\n    }\n    let view = viewOrRenderable;\n\n    if (!view.renderableConstructors) {\n        view.renderableConstructors = new Map()\n    }\n\n    let constructors = view.renderableConstructors;\n\n    /* Because the inherited views share the same prototype, we'll have to split it up depending on which subclass we're referring out */\n    let specificRenderableConstructors = constructors.get(view.constructor);\n    if (!specificRenderableConstructors) {\n        specificRenderableConstructors = constructors.set(view.constructor, {}).get(view.constructor)\n    }\n\n    if (!specificRenderableConstructors[renderableName]) {\n        /* Getters have a get() method on the descriptor, class properties have an initializer method.\n         * get myRenderable(){ return new Surface() } => descriptor.get();\n         * myRenderable = new Surface(); => descriptor.initializer();\n         */\n        if (descriptor.get) {\n            Utils.warn(`Adding renderables on views through getters has been deprecated (${renderableName}).`);\n            specificRenderableConstructors[renderableName] = descriptor.get\n        } else if (descriptor.initializer) {\n            specificRenderableConstructors[renderableName] = descriptor.initializer\n        }\n    }\n    let constructor = specificRenderableConstructors[renderableName];\n    if (!constructor.decorations) {\n        constructor.decorations = {descriptor: descriptor}\n    }\n\n    return constructor\n}\n\n/**\n *\n * @ignore\n *\n * Extracts a decorations object\n *\n * @param {View} prototype\n * @returns {Object} The decorations for the prototype\n */\nexport function prepPrototypeDecorations (prototype) {\n\n    /* To prevent inherited classes from taking each others class-level decorators, we need to store these decorations in\n     * a map, similarly to function preparing a decorated renderable\n     */\n    if (!prototype.decorationsMap) {\n        prototype.decorationsMap = new Map()\n    }\n\n    let {decorationsMap} = prototype;\n\n    let decorations = decorationsMap.get(prototype.constructor);\n    if (!decorations) {\n        decorations = decorationsMap.set(prototype.constructor, {}).get(prototype.constructor)\n    }\n\n    /* Return the class' prototype, so it can be extended by the decorator */\n    return decorations\n}\n\nexport let decoratorTypes = {childDecorator: 1, viewDecorator: 2, viewOrChild: 3};\n\n/**\n * @ignore\n *\n * @param {Function} callback accepting the following arguments: decorations, type, viewOrRenderable, renderableName, descriptor\n * @param {Number} type One of the available decorator types\n * @returns {Function} A decorator function\n */\nexport let createChainableDecorator = function (callback, type) {\n\n    let methodToReturn = function (viewOrRenderable, renderableName, descriptor) {\n        if (methodToReturn.lastResult) {\n            methodToReturn.lastResult(viewOrRenderable, renderableName, descriptor);\n        }\n        if (type === decoratorTypes.viewOrChild) {\n            type = typeof viewOrRenderable === 'function' ? decoratorTypes.viewDecorator : decoratorTypes.childDecorator;\n        }\n        let decorations = type === decoratorTypes.childDecorator ? prepDecoratedRenderable(...arguments).decorations : prepPrototypeDecorations(viewOrRenderable.prototype);\n\n        /* If we are directly applying the decorator on a RenderablePrototype, we need to save the methods to be executed later,\n         * rather than just executing the methods. This is needed so that decorators can be applied both directly as methods in\n         * in combination with them being used actually as decorators, on the same renderable */\n        if(!descriptor && viewOrRenderable instanceof RenderablePrototype){\n            viewOrRenderable.addDirectlyAppliedDecoratorFunction(callback)\n        } else {\n\n            callback(decorations, type, viewOrRenderable, renderableName, descriptor);\n        }\n\n\n        if(!descriptor){\n            /*  If the descriptor isn't present, we are not executing the decorator at decoration time.\n             *  This means that we can utilize the return to provide the renderable. This allows you to do things like this:\n             *\n             *  this.myRenderable = this.addRenderable(layout.size(new Surface()))\n             *\n             *  Or this (in the class field):\n             *\n             *  items = this.options.items.map(itemInfo =>\n             *    layout.size(...itemInfo.size)(\n             *      new Surface({content: itemInfo.content})\n             *    )\n             *  );\n             *\n             *  */\n            return viewOrRenderable;\n        }\n        return descriptor;\n    };\n\n    let root = this;\n    if (root && root.originalObject) {\n        methodToReturn.lastResult = root;\n        root = methodToReturn.originalObject = root.originalObject;\n    } else {\n        methodToReturn.originalObject = this;\n    }\n    if (root) {\n        methodToReturn.createChainableDecorator = createChainableDecorator.bind(methodToReturn);\n        /* We are allowing for chaining here by defining the properties on the returning object having the same properties\n        *  as the original object. For example, layout.fullSize() would return an object that has all the methods of layout */\n        Object.defineProperties(methodToReturn, Object.getOwnPropertyDescriptors(root.__proto__));\n    }\n\n    return methodToReturn;\n};\n\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/layout/DecoratorHelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 867,
    "kind": "function",
    "name": "prepDecoratedRenderable",
    "memberof": "src/layout/DecoratorHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/DecoratorHelpers.js~prepDecoratedRenderable",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/DecoratorHelpers.js",
    "importStyle": "{prepDecoratedRenderable}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewOrRenderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "descriptor",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 868,
    "kind": "function",
    "name": "prepPrototypeDecorations",
    "memberof": "src/layout/DecoratorHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/DecoratorHelpers.js~prepPrototypeDecorations",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/DecoratorHelpers.js",
    "importStyle": "{prepPrototypeDecorations}",
    "description": "",
    "lineNumber": 62,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The decorations for the prototype"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "View"
        ],
        "spread": false,
        "optional": false,
        "name": "prototype",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The decorations for the prototype"
    }
  },
  {
    "__docId__": 869,
    "kind": "variable",
    "name": "decoratorTypes",
    "memberof": "src/layout/DecoratorHelpers.js",
    "static": true,
    "longname": "src/layout/DecoratorHelpers.js~decoratorTypes",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/DecoratorHelpers.js",
    "importStyle": "{decoratorTypes}",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "{\"childDecorator\": number, \"viewDecorator\": number, \"viewOrChild\": number}"
      ]
    }
  },
  {
    "__docId__": 870,
    "kind": "function",
    "name": "createChainableDecorator",
    "memberof": "src/layout/DecoratorHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/DecoratorHelpers.js~createChainableDecorator",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/DecoratorHelpers.js",
    "importStyle": "{createChainableDecorator}",
    "description": "",
    "lineNumber": 91,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function} A decorator function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "accepting the following arguments: decorations, type, viewOrRenderable, renderableName, descriptor"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "One of the available decorator types"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": "A decorator function"
    }
  },
  {
    "__docId__": 871,
    "kind": "file",
    "name": "src/layout/Decorators.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2017\n\n */\nimport merge                    from 'lodash/merge.js'\nimport extend                   from 'lodash/extend.js'\n\nimport AnimationController      from 'famous-flex/AnimationController.js'\nimport LayoutUtility            from 'famous-flex/LayoutUtility.js'\nimport Easing                   from 'famous/transitions/Easing.js'\n\nimport { Utils }                    from '../utils/view/Utils.js'\nimport { onOptionChange }           from '../utils/view/OptionObserver'\nimport {  prepDecoratedRenderable,\nprepPrototypeDecorations, decoratorTypes,\ncreateChainableDecorator}            from './DecoratorHelpers';\n\n\n/**\n * Describes a set of decorators used for layouting of a renderable in a View.\n */\nexport const bindings = {\n  /**\n   * Sets the default and mandatory options\n   *\n   * @example\n   * @options.setup({color: 'blue'})\n   * class MyView extends View{\n   *\n   * @returns {Function} A decorator function\n   */\n  setup: (defaultOptions) => {\n    return (target) => {\n      prepPrototypeDecorations(target.prototype).defaultOptions = defaultOptions\n    }\n  },\n  /**\n   * Defines a trigger function to use before the options are assigned. This can be used to simplify the\n   * flow of your app. The trigger function should modify the contents of the options passed.\n   * Return value is ignored. It is important that the function doesn't modify defaultOptions\n   *\n   * @example\n   * @bindings.trigger()\n   * propagateBackgroundColor((options, defaultOptions) {\n   *  // Shortcut way of specifying the sideMenu.menuItem.backgroundColor\n   *  options.sideMenu = combineOptions(defaultOptions.sideMenu, {menuItem: {backgroundColor: options.backgroundColor}})\n   * })\n   *\n   * @returns {function(*)}\n   */\n  trigger: () => {\n    return (prototype, methodName, descriptor) => {\n      let decorations = prepPrototypeDecorations(prototype);\n        let {bindingTriggers} = decorations;\n          if(!bindingTriggers){\n            bindingTriggers = decorations.bindingTriggers = [];\n          }\n          let triggerMethod  = descriptor.value;\n          bindingTriggers.push({triggerMethod, name: methodName});\n    }\n  }\n\n};\n\n\n\n/**\n * Describes a set of decorators used for layouting of a renderable in a View.\n */\nclass Layout {\n\n  /**\n   * @ignore\n   * Add to self in order to make the scope working\n   */\n  createChainableDecorator = createChainableDecorator;\n\n  /**\n   * Merely marks a view property as a decorated renderable, which allows it to be rendered.\n   * Use this in combination with a @layout.custom decorator on the view in which this renderable resides.\n   *\n   * @example\n   * @layout.renderable()\n   * renderable = Surface.with();\n   *\n   * @returns {Layout} A chainable function\n   */\n  renderable () {\n    return this.createChainableDecorator(() => {\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Marks the renderable to cover the entire screen. Translate can also be specified on such a renderable.\n   *\n   * @example\n   * @layout.fullSize()\n   * // View will have a red background\n   * background = Surface.with({properties: {backgroundColor: 'red'}});\n   *\n   * @returns {Layout} A decorator function\n   */\n  fullSize () {\n    return this.createChainableDecorator((decorations) => {\n      decorations.fullSize = true\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Specifies the space that should come before the docked renderable. Useful when not specifying the size in the\n   * layout.dock function. Note that the space does not appear if there isn't any renderable with a size greater than\n   * zero before it. Can also be specified for the view\n   *\n   * @example\n   * // there's a 20px space before this box\n   * @layout.dockSpace(20)\n   *  .size(100, 100)\n   *  .dock.left()\n   * box = new Surface({properties: {backgroundColor: 'red'}});\n   *\n   * @param {Number} space The space that is inserted before the renderable.\n   * @returns {Layout} A chainable function\n   */\n  dockSpace (space) {\n    return this.createChainableDecorator((decorations, type) => {\n      if (type === decoratorTypes.viewDecorator) {\n        decorations.dockSpacing = space\n      } else {\n        decorations.dock = decorations.dock ? extend(decorations.dock, {space}) : {space}\n      }\n    }, decoratorTypes.viewOrChild)\n  }\n\n  /**\n   * Internal function to do docking\n   *\n   * @param dockMethod\n   * @param size\n   * @param space\n   * @param zIndex\n   * @returns {Function}\n   */\n  _dockTo (dockMethod, size, space, zIndex) {\n    return this.createChainableDecorator((decorations) => {\n\n      if (decorations.dock) {\n        space = space || decorations.dock.space\n      }\n\n      let width = dockMethod === 'left' || dockMethod === 'right' ? size : undefined;\n      let height = dockMethod === 'top' || dockMethod === 'bottom' ? size : undefined;\n\n      let twoDimensionalSize = [width, height];\n      // Todo refactor also the z index to the dock, probably\n      decorations.dock = {space, dockMethod, size: twoDimensionalSize};\n\n      if (!decorations.translate) {\n        decorations.translate = [0, 0, 0]\n      }\n      if (zIndex) {\n        decorations.translate[2] = zIndex\n      }\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Docks things. See method descriptors for \"Dockings\"\n   * @type {DockTypes}\n   */\n  get dock () {\n    return {\n      /**\n       * @typedef {dockLeft} dockLeft\n       * Docks the renderable to the left.\n       *\n       * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.\n       * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats\n       * the context size the docking size.\n       * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for\n       * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.\n       *\n       * @example\n       * @layout.dock.left(30, 0, 10)\n       *   .size(15, undefined)\n       *   .origin(0.5, 0)\n       *   .align(0.5, 0)\n       * dockedRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n       *\n       * @memberOf dock\n       * @param {Number|Function|Boolean} [size]. The size of the renderable in the one dimension that is being docked, e.g.\n       * dock left or right will be width, whereas dock top or bottom will result in height. For more information about\n       * different variations, see layout.size.\n       * @param {Number} [space]. Any space that should be inserted before the docked renderable\n       * @param {Number} [zIndex]. DEPRECATED: Use translate(0, 0, zIndex) instead.\n       * @returns {Layout} A chainable function\n       */\n      left: function () {\n        return this._dockTo('left', ...arguments)\n      }.bind(this),\n\n      /**\n       * @typedef {Function} dockRight\n       * Docks the renderable to the right.\n       *\n       * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.\n       * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats\n       * the context size the docking size.\n       * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for\n       * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.\n       *\n       * @example\n       * @layout.dock.right(30, 0, 10)\n       *   .size(15, undefined)\n       *   .origin(0.5, 0)\n       *   .align(0.5, 0)\n       * dockedRenderable = new Surface({properties: {backgroundColor: 'red'}});\n       *\n       * @param {Number|Function|Boolean} [size]. The size of the renderable in the one dimension that is being docked, e.g.\n       * dock left or right will be width, whereas dock top or bottom will result in height. For more information about\n       * different variations, see layout.size.\n       * @param {Number} [space]. Any space that should be inserted before the docked renderable\n       * @param {Number} [zIndex]. DEPRECATED: Use translate(0, 0, zIndex) instead.\n       * @returns {Layout} A chainable function\n       */\n      right: function () {\n        return this._dockTo('right', ...arguments)\n      }.bind(this),\n\n      /**\n       * @typedef {Function} dockTop\n       * Docks the renderable to the top.\n       *\n       * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.\n       * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats\n       * the context size the docking size.\n       * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for\n       * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.\n       *\n       * @example\n       * @layout.dock.top(30, 0, 10)\n       *    .size(15, undefined)\n       *    .origin(0.5, 0)\n       *    .align(0.5, 0)\n       * dockedRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n       *\n       *\n       * @param {Number|Function|Boolean} [size]. The size of the renderable in the one dimension that is being docked, e.g.\n       * dock left or right will be width, whereas dock top or bottom will result in height. For more information about\n       * different variations, see layout.size.\n       * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable\n       * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.\n       * @returns {Layout} A chainable function\n       */\n      top: function () {\n        return this._dockTo('top', ...arguments)\n      }.bind(this),\n\n      /**\n       * @typedef {Function} dockBottom\n       * Docks the renderable to the bottom.\n       *\n       * When using both a docked size and the layout.size decorator, then that layout.size becomes the actual inner size.\n       * The renderable can then be stickd within the docking area with origin and align. When combined with align, treats\n       * the context size the docking size.\n       * When using layout.size without specifying a docked size, it will use that size as docking size. Useful for\n       * automatic sizing when parent defines true size and orthogonal size (e.g. height for dock 'left') has to be defined.\n       *\n       * @example\n       * @layout.dock.bottom(30, 0, 10)\n       *    .size(15, undefined)\n       *    .origin(0.5, 0)\n       *    .align(0.5, 0)\n       * dockedRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n       *\n       *\n       * @param {Number|Function|Boolean} [size]. The size of the renderable in the one dimension that is being docked, e.g.\n       * dock left or right will be width, whereas dock top or bottom will result in height. For more information about\n       * different variations, see layout.size.\n       * @param {Number} [space = 0]. Any space that should be inserted before the docked renderable\n       * @param {Number} [zIndex = 0]. DEPRECATED: Use translate(0, 0, zIndex) instead.\n       * @returns {Layout} A chainable function\n       */\n      bottom: function () {\n        return this._dockTo('bottom', ...arguments)\n      }.bind(this),\n\n      /**\n       * @typedef {Function} fill\n       * Fills the space that is left after the docking with this renderable. When using layout.size, it will use that\n       * size as an inner size. This works similarly to other docking, from where translate, size, origin, align, etc\n       * can be specified.\n       *\n       * @example\n       * @layout.dock.fill()\n       * filledRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n       *\n       * @returns {Layout} A chainable function\n       */\n      fill: function () {\n        return this._dockTo('fill', ...arguments)\n      }.bind(this),\n      /**\n       * Marks the renderable as not being docked anymore. Useful when dynamically changing decorations through\n       * this.decorateRenderable or this.setRenderableFlowState\n       *\n       * @example\n       * @layout.dock.fill()\n       * @flow.stateStep('nonFilled', layout.dock.none(), layout.size(100, 100))\n       * filledRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n       *\n       * @returns {Layout} A chainable function\n       */\n      none: function () {\n        return this.createChainableDecorator((decorations) => {\n          decorations.disableDock = true\n        }, decoratorTypes.childDecorator)\n      }.bind(this)\n    }\n  }\n\n  /**\n   * Makes the renderable allowed to be dragged around. this.renderables[name] refers to a RenderNode containing this\n   * draggable along with the renderable itself.\n   *\n   * @example\n   * @layout.draggable({xRange: [0, 100}, yRange: [0, 200]})\n   * .size(100, 100)\n   * // Makes a draggable square that is red\n   * draggableRenderable = Surface.with({properties: {backgroundColor: 'red'});\n     *\n   * @param {Object} [draggableOptions]. Same options that can be passed to a Famous Draggable.\n   * @param {Number} [options.snapX] grid width for snapping during drag\n   * @param {Number} [options.snapY] grid height for snapping during drag\n   * @param {Array.Number} [options.xRange] maxmimum [negative, positive] x displacement from start of drag\n   * @param {Array.Number} [options.yRange] maxmimum [negative, positive] y displacement from start of drag\n   * @param {Number} [options.scale] one pixel of input motion translates to this many pixels of output drag motion\n   * @param {Number} [options.projection] User should set to Draggable._direction.x or\n   *    Draggable._direction.y to constrain to one axis.\n   * @returns {Layout} a chainable decorator function\n   */\n  draggable (draggableOptions = {}) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.draggableOptions = draggableOptions\n    }, decoratorTypes.childDecorator)\n  }\n\n    /**\n     * Makes modifications to a surface using old-style famous modifiers (e.g MapModifier for famous-map)\n     * @example\n     * @layout.mapModifier(new MapModifier{ mapView: map, position: {lat: 0, lng: 0} })\n     * // Makes a surface that is linked to the position (0, 0)\n     *\n     * @param {Object} [modifier]. modifier object.\n     * @returns {Function}\n     */\n    modifier(modifier = {}) {\n        return this.createChainableDecorator((decorations) => {\n            decorations.modifier = modifier;\n        }, decoratorTypes.childDecorator);\n    }\n\n  /**\n   * Makes the renderable swipable with physics-like velocity after the dragging is released. Emits event\n   * 'thresholdReached' with arguments ('x'|'y', 0|1) when any thresholds have been reached. this.renderables[name]\n   * now refers to a a RenderNode containing a positionModifier along with the renderable itself.\n   *\n   * @example\n   * @layout.size(100, 100)\n   *  .swipable({xRange: [0, 100], snapX: true})\n   * //Make a red box that can slide to the right\n   * swipable = Surface.with({properties: {backgroundColor: 'red'});\n   * @param {Object} options\n   * @param {Boolean} [options.snapX] Whether to snap to the x axis\n   * @param {Boolean} [options.snapY] Whether to snap to the Y axis\n   * @param {Boolean} [options.enabled] Whether the swipable should be initially enabled\n   * @param {Array.Number} [options.xThreshold] Two values of the thresholds that trigger the thresholdReached event with\n   * argument 'x' and second argument 0 or 1, depending on the direction.\n   * Specify undefined in one of them to disable threshold to that direction.\n   * @param {Array.Number} [options.yThreshold] Two values of the thresholds that trigger the thresholdReached event with\n   * argument 'y'  and second argument 0 or 1, depending on the direction.\n   * Specify undefined in one of them to disable threshold to that direction.\n   * @returns {Layout} A chainable function\n   */\n  swipable (options) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.swipableOptions = options\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Clips the renderable by creating another DOM-element with overflow: hidden. Internally, creates a Famous\n   * ContainerSurface.\n   * The two size parameters can either be a number or undefined (equals the context size).\n   *\n   * @example\n   * @layout.size(40,40)\n   *   .clip(20, 20)\n   * // Shows a quarter of a circle\n   * renderable = Surface.with({properties: {backgroundColor: 'red', borderRadius: '50%'});\n     *\n   * @param {Number} width The width of the ContainerSurface\n   * @param {Number} heigh The height of the ContainerSurface\n   * @param {Object} [properties]. Properties that will be passed to the newly created parent DOM-element.\n   * If specified, merged with {overflow: 'hidden'}\n   * @returns {Layout} A chainable function\n   */\n\n  /**\n   * Specifies the size of the renderable. For both of the parameters, sizes can be interpreted as follows:\n   *\n   * If specified as a function, then the argument passed is the context size of the specified dimension\n   * (width or height). Note that if an arrow function is used, this scoping cannot be used when inside a\n   * decorator, since the scope will be the global scope.\n   *\n   * If true is specified or a tilde with a size (e.g. ~300), then the renderable will be automatically sized.\n   * If a tilde is used to indicate the size, then the size after the tilde will be used when/if the\n   * renderable doesn't have a size, or turn into the actual size if it can be determined. This is useful when wanting\n   * to reduce the flickering of surfaces who's size cannot be determined the first render tick.\n   * Beware that true sizing of surfaces or other raw dom elements (input surfaces, image surfaces, text boxes etc)\n   * often comes with a perfomance penalty and should only be used when necessary.\n   * Also beware that any negative size will be interpreted as a tilde, since ~x = 1 - x\n   *\n   * If undefined is specified, then the size of that dimension will equal the entire context size.\n   *\n   * If a size between 0 and 1 is specified, then that will be interpreted as a proportion of the context size. For\n   * example if 0.5 is specified, then the size will be half of the context size (the parent's size). Instead of\n   * specifying 1 to cover the entire context size, use undefined instead.\n   * @example\n   * @layout.size(function(contextWidth) {return Math.max(contextWidth, this.options.maxWidth)}, ~300)\n   * // Creates a renderable where the width is equal to the text width and the height is whatever is bigger,\n   * // options.maxWidth, or the context size\n   * text = Surface.with({content: 'This is some text', properties: {backgroundColor: 'red'}});\n   *\n   * @param {Number|Function|Boolean} x\n   * @param {Number|Function|Boolean} y\n   * @returns {Layout} A chainable function\n   */\n  size (x, y) {\n    if (Array.isArray(x)) {\n      throw Error('Please specify size as two arguments, and not as an array')\n    }\n    return this.createChainableDecorator((decorations) => {\n      decorations.size = [x, y]\n    }, decoratorTypes.childDecorator)\n  }\n\n\n  perspective () {\n    return this.createChainableDecorator((decorations) => {\n      decorations.perspective = true;\n    }, decoratorTypes.viewDecorator)\n  }\n\n  clip (width, height, properties = {}) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.clip = {size: [width, height], properties}\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Rotates the renderable around any of the three axes (in radians).\n   *\n   * @example\n   * @layout.size(100,100)\n   *    .rotate(0, 0, Math.PI)\n   * // Writes text upside down\n   * renderable = Surface.with({content: 'upside down text'});\n   *\n   * @param {Number} x The rotation around the x axis (flips vertically)\n   * @param {Number} y The rotation around the y axis (flips horizontally)\n   * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)\n   * @returns {Layout} A chainable function\n   */\n  rotate (x = 0, y = 0, z = 0) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.rotate = [x, y, z]\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Rotates the renderable around any of the three axes (in radians) relatively to the current rotation\n   *\n   * @example\n   * @layout.size(100,100)\n   *    .rotate(0, 0, Math.PI)\n   * // Writes text upside down\n   * renderable = Surface.with({content: 'upside down text'});\n   *\n   * @param {Number} x The rotation around the x axis (flips vertically)\n   * @param {Number} y The rotation around the y axis (flips horizontally)\n   * @param {Number} z The rotation around the z axis (rotatesin in the more intuitive sense)\n   * @returns {Layout} A chainable function\n   */\n  rotateFrom (x, y, z) {\n    return this.createChainableDecorator((decorations) => {\n      let propertyName = 'rotate';\n      let properties = decorations[propertyName] || [0, 0, 0];\n      decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z]\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Sets the opacity of a renderable.\n   *\n   * @example\n   * @layout.opacity(0.5)\n   *    .size(100, 10)\n   *    .place.center()\n   * // Writes text that is half invisible\n   * renderable = Surface.with({content: 'Half invisible'});\n   *\n   * @param {Number} opacity The opacity, between 0 and 1\n   * @returns {Layout} A chainable function\n   */\n  opacity (opacity) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.opacity = opacity\n    }, decoratorTypes.childDecorator)\n  }\n\n  _stickTo (stick) {\n    return this.createChainableDecorator((decorations) => {\n      let origin = [0, 0], align = [0, 0];\n      switch (stick) {\n        case 'center':\n          origin = align = [0.5, 0.5];\n          break;\n        case 'bottomRight':\n          origin = align = [1, 1];\n          break;\n        case 'bottomLeft':\n          origin = align = [0, 1];\n          break;\n        case 'topRight':\n          origin = align = [1, 0];\n          break;\n        case 'left':\n          origin = align = [0, 0.5];\n          break;\n        case 'right':\n          origin = align = [1, 0.5];\n          break;\n        case 'top':\n          origin = align = [0.5, 0];\n          break;\n        case 'bottom':\n          origin = align = [0.5, 1];\n          break;\n        default:\n        case 'topLeft':\n          origin = align = [0, 0];\n          break;\n\n      }\n\n      decorations.origin = origin;\n      decorations.align = align\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * @typedef {Object} StickTypes\n   * @property {Function} center stick in the center\n   * @property {Function} bottomRight stick to the bottom right\n   * @property {Function} bottomLeft stick to the bottom left\n   * @property {Function} topRight stick to the top right\n   * @property {Function} topLeft stick to the top left\n   * @property {Function} left stick to the left\n   * @property {Function} right stick to the right\n   * @property {Function} bottom stick to the bottom\n   * @property {Function} top stick to the top\n   */\n\n  /**\n   * @typedef {Function} StickTypes\n   * @returns {Layout} A chainable layout function\n   */\n\n  /**\n   * Places the renderable by settings origin/align. If nothing is set, it will default to topleft.\n   *\n   * @example\n   * @layout.size(100,~300)\n   *    .stick.center()\n   * renderable = Surface.with({content: 'centered text'});\n   *\n   * @type {StickTypes}\n   */\n  get stick () {\n    return {\n      center: () => {\n        return this._stickTo('center')\n      }\n      ,\n      left: () => {\n        return this._stickTo('left')\n      }\n\n      ,\n      right: () => {\n        return this._stickTo('right')\n      }\n\n      ,\n      top: () => {\n        return this._stickTo('top')\n      }\n\n      ,\n      bottom: () => {\n        return this._stickTo('bottom')\n      }\n\n      ,\n      bottomLeft: () => {\n        return this._stickTo('bottomLeft')\n      }\n\n      ,\n      bottomRight: () => {\n        return this._stickTo('bottomRight')\n      }\n\n      ,\n      topLeft: () => {\n        return this._stickTo('topLeft')\n      }\n\n      ,\n      topRight: () => {\n        return this._stickTo('topRight')\n      }\n    }\n  }\n\n  /**\n   * Sets the point where the renderable has its anchor from where rotation and translation will be done.\n   * You could consider it as translating the negative of the proportion times its size. The arguments are always\n   * between and including 0 and 1.\n   *\n   * @example\n   * @layout.origin(0.5, 0)\n   *    .size(100,100)\n   *    .align(0.5, 0.5)\n   * //Displays a red box horizontically centered and displays just below the vertical mid point\n   * renderable = Surface.with({properties: {backgroundColor: 'red'}});\n   *\n   *\n   * @param {Number} x. The x of the origin.\n   * @param {Number} y. The y of the origin.\n   * @returns {Layout} A chainable function.\n   */\n  origin (x, y) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.origin = [x, y]\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Translates the renderable by a proportion of the context size.\n   *\n   * @example\n   * @layout.align(0.5, 0.5)\n   *    .size(100,100)\n   * //Displays a red box just below the vertical mid point and past the horizontal mid point\n   * renderable = Surface.with({properties: {backgroundColor: 'red'}});\n   *\n   * @param {Number} x. The proportion of the context width that is going to be translated.\n   * @param {Number} y. The proportion of the context height that is going to be translated.\n   * @returns {Layout} A chainable function.\n   */\n  align (x, y) {\n\n    return this.createChainableDecorator((decorations) => {\n      decorations.align = [x, y]\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Specifies a translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,\n   * and normal). Can also be applied on view level to translate every renderable of that view. The view wide translation defaults\n   * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.\n   *\n   * @example\n   * @layout.translate(0, 0, 20)\n   * class myView extends View{\n   *  @layout.translate(0, 0, -20)\n   *    .fullSize()\n   *  // Will display relatively at z level 0 (20 minus 20)\n   *  myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n   * }\n   *\n   * @param {Number} x Moves the renderable along the x axis.\n   * @param {Number} y Moves the renderable along the y axis.\n   * @param {Number} z Moves the renderable along the z axis.\n   * @returns {Layout} A chainable function.\n   */\n  translate (x, y, z) {\n    if (Array.isArray(x)) {\n      throw Error('Please specify translate as three arguments, and not as an array')\n    }\n\n    return this.createChainableDecorator((decorations, type) => {\n      let propertyName;\n      if (type === decoratorTypes.viewDecorator) {\n        propertyName = 'extraTranslate'\n      } else {\n        propertyName = 'translate'\n      }\n      decorations[propertyName] = [x, y, z]\n    }, decoratorTypes.viewOrChild)\n  }\n\n  /**\n   * Specifies a relative translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,\n   * and normal).\n   * Can also be applied on view level to translate every renderable of that view. The view wide translation defaults\n   * to [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.\n   *\n   * @example\n   * @layout.translateFrom(0, 0, 20)\n   * class myView extends View{\n   *  @layout.translateFrom(0, 0, -20)\n   *    .fullSize()\n   *  // Will display relatively at z level 0 (20 minus 20)\n   *  myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n   * }\n   *\n   * @param {Number} x Moves the renderable along the x axis.\n   * @param {Number} y Moves the renderable along the y axis.\n   * @param {Number} z Moves the renderable along the z axis.\n   * @returns {Layout} A chainable function.\n   */\n  translateFrom (x, y, z) {\n    return this.createChainableDecorator((decorations, type) => {\n      if (Array.isArray(x)) {\n        throw Error('Please specify translate as three arguments, and not as an array')\n      }\n      let propertyName;\n      if (type === decoratorTypes.viewDecorator) {\n        propertyName = 'extraTranslate'\n      } else {\n        propertyName = 'translate'\n      }\n      let properties = decorations[propertyName] || [0, 0, 0];\n      decorations[propertyName] = [properties[0] + x, properties[1] + y, properties[2] + z]\n    }, decoratorTypes.viewOrChild)\n  }\n\n  /**\n   * Specifies the scale of a renderable. Can be applied to every kind of renderable.\n   *\n   * @example\n   *  class myView extends View{\n   *  @layout.scale(2, 2, 2)\n   *    .fullSize()\n   *  // Will scale the renderable by 2 in the x,y,z dimension\n   *  myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n   * }\n   *\n   * @param {Number} x Scales the renderable along the x axis.\n   * @param {Number} y Scales the renderable along the y axis.\n   * @param {Number} z Scales the renderable along the z axis.\n   * @returns {Layout} A chainable function.\n   */\n  scale (x,\n         y = Utils.warn('Please specify y parameter for scaling'),\n         z = Utils.warn('Please specify z parameter for scaling')) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.scale = [x, y, z]\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Specifies the skew of a renderable. Can be applied to every kind of renderable.\n   *\n   * @example\n   *  class myView extends View{\n   *  @layout.skew(2, 2, 2)\n   *    .fullSize()\n   *  // Will skew the renderable by 2 in the x,y,z dimension\n   *  myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n   * }\n   *\n   * @param {Number} x Skews the renderable along the x axis.\n   * @param {Number} y Skews the renderable along the y axis.\n   * @param {Number} z Skews the renderable along the z axis.\n   * @returns {Layout} A chainable function.\n   */\n  skew (x, y, z) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.skew = [x, y, z]\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   *\n   * Creates an animation to show/hide the renderable. Renderables can be shown by calling\n   * this.showRenderable(renderableName) and hidden using this.hideRenderable(renderableName) or\n   * this.showRenderable(renderableName, false). When a renderable has been shown, it will emit the event 'shown'.\n   *\n   * @example\n   * @layout.stick.center()\n   *    .size(100,100)\n   *    .animate({transition: {duration: 350}})\n   * renderable = Surface.with({properties: {backgroundColor: 'red'}});\n   *\n   *\n   *\n   * @param {Object} [options] The same as famous-flex Animation Controller, plus 2 more:\n   * @param {Boolean} [options.showInitially] Whether to show the renderable when the view is created. (Default: true).\n   * @param {String} [options.waitFor] If specified, it will wait for the renderable with the specified name to show\n   * before showing the renderable\n   * @param {Object} [options.transition] Transition options.\n   * @param {Function} [options.animation] Animation function (default: `AnimationController.Animation.FadedZoom`).\n   * @param {Number} [options.zIndexOffset] Optional z-index difference between the hiding & showing renderable (default: 0).\n   * @param {Number} [options.keepHiddenViewsInDOMCount] Keeps views in the DOM after they have been hidden (default: 0).\n   * @param {Object} [options.show] Show specific options.\n   * @param {Object} [options.show.transition] Show specific transition options.\n   * @param {Function} [options.show.animation] Show specific animation function.\n   * @param {Object} [options.hide] Hide specific options.\n   * @param {Object} [options.hide.transition] Hide specific transition options.\n   * @param {Function} [options.hide.animation] Hide specific animation function.\n   * @param {Object} [options.transfer] Transfer options.\n   * @param {Object} [options.transfer.transition] Transfer specific transition options.\n   * @param {Number} [options.transfer.zIndex] Z-index the tranferables are moved on top while animating (default: 10).\n   * @param {Boolean} [options.transfer.fastResize] When enabled, scales the renderable i.s.o. resizing when doing the transfer animation (default: true).\n   * @param {Array} [options.transfer.items] Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred.\n   * @returns {Function}\n   */\n  animate (options = {}) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.animation = merge({\n        showInitially: true,\n        animation: AnimationController.Animation.FadedZoom,\n        show: {transition: options.transition || {curve: Easing.outCubic, duration: 250}},\n        hide: {transition: options.transition || {curve: Easing.inCubic, duration: 250}}\n      }, options)\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * @deprecated\n   * Makes the view flow by tweening all intermediate stages of a changed attribute of any renderable.\n   *\n   * @example\n   * @layout.flow({spring: {dampingRatio: 0.8, period: 1000}})\n   * class myView extends View{\n     * ...\n     * }\n   *\n   * @param {Object} flowOptions to pass as flowOptions to the LayoutController\n   * @param {Boolean} [flowOptions.transition] If specified, sets the default transition to use\n   * @param {Boolean} [flowOptions.reflowOnResize] Smoothly reflows renderables on resize (only used when flow = true) (default: `true`).\n   * @param {Object} [flowOptions.spring] Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`).\n   * @param {Object} [flowOptions.properties] Properties which should be enabled or disabled for flowing.\n   * @param {Spec} [flowOptions.insertSpec] Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`).\n   * @param {Spec} [flowOptions.removeSpec] Size, transform, opacity... to use when removing renderables from the scene (default: undefined).\n   * @returns {Layout} A chainable function\n   */\n  flow (flowOptions = {}) {\n    console.log('Warning: layout.flow() is deprecated. Please use flow.auto() instead!');\n    return this.createChainableDecorator((decorations) => {\n      decorations.useFlow = true;\n      decorations.flowOptions = flowOptions || {};\n      decorations.transition = flowOptions.transition || undefined\n    }, decoratorTypes.viewDecorator)\n  }\n\n  /**\n   * Makes the view as scrollable. This will put the entire content in a ReflowingScrollView that uses getSize on the\n   * view to determine scrolling size. If the size cannot be determined, you might consider declaring your own\n   * getSize() on the View.\n   *\n   * @example\n   * @layout.scrollable()\n   * class myView extends View{\n     * ...\n     * }\n   *\n   *\n   * @returns {Layout} A chainable function\n   */\n\n  scrollable (options = {}) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.scrollableOptions = options\n    }, decoratorTypes.viewDecorator)\n  }\n\n  /**\n   * Make content scroll natively powered by the browser.\n   *\n   * @param {Object} [options] Options on how to scroll\n   * @param {Boolean} [options.scrollY] Defaults to true\n   * @param {Boolean} [options.scrollX] Defaults to false\n   * @returns {Layout} A chainable function\n   */\n  nativeScrollable (options = {}) {\n    let {scrollY = true, scrollX = false} = options;\n    return this.createChainableDecorator((decorations) => {\n      decorations.nativeScrollable = {scrollY, scrollX}\n    }, decoratorTypes.viewDecorator)\n  }\n\n  /**\n   * Sets the margins for the docked content. This can be applied both to a child and a class. When in conflict,\n   * the parent will override the child's setting. If the margin is set on a Surface, then CSS padding will be set.\n   * margins can be 1, 2, or 4, parameters, which can be specified as shorthand in the same way\n   * as CSS does it.\n   *\n   * @example\n   * @layout.dockPadding(15)\n   * //Creates a class with 15px margin on all sides for docked renderables\n   * class myView extends View{\n     *\n     *  //Will be displayed with margin\n   *  @layout.dock.top(20)\n   *  onTop = Surface.with({content: \"hello world\"});\n   *\n   *  //Will be displayed without margin since we're using @layout.stick\n   *  @layout.stick.bottom\n   *  onButtom = Surface.with({content: \"hey hey\"});\n   * }\n   *\n\n   *\n   * @param {Number} firstMargin\n   * @param {Number} [secondMargin]\n   * @param {Number} [thirdMargin]\n   * @param {Number} [fourthMargin]\n   * @returns {Layout} A chainable function\n   */\n  dockPadding (...margins) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.viewMargins = LayoutUtility.normalizeMargins(margins)\n    }, decoratorTypes.viewDecorator)\n  }\n\n  /**\n   * Like @layout.dockPadding, sets the padding between this view and its docked content.\n   * When the screen width plus this padding exceeds maxContentWidth, the padding\n   * is increased, so that the content is never wider than maxContentWidth.\n   *\n   * @example\n   * @layout.columnDockPadding(720, [16])\n   * //Creates a class with 16px margin on all sides for docked renderables\n   * class myView extends View{\n     *\n     *  //Will be displayed with margin to the top and sides, and will at max be 720px wide.\n   *  @layout.dock.top(20)\n   *  onTop = Surface.with({content: \"hello world\"});\n   *\n   *  //Will be displayed without margin since we're using @layout.stick instead of @layout.dock\n   *  @layout.stick.bottom()\n   *  onButtom = Surface.with({content: \"hey hey\"});\n   * }\n   *\n   * @param {Number} maxContentWidth Maximum width the content should be allowed to be.\n   * @param {[Number]} defaultPadding A 1-D, 2-D, or 4-D array of padding numbers, just like the padding spec in CSS.\n   * @returns {Function}\n   */\n  columnDockPadding (maxContentWidth = 720, defaultPadding = [0, 16, 0, 16]) {\n    return this.createChainableDecorator((decorations) => {\n      let normalisedPadding = LayoutUtility.normalizeMargins(defaultPadding);\n\n      /* Default to 16px dockPadding */\n      this.dockPadding(normalisedPadding);\n\n            /* Calculate the dockPadding dynamically every time the View's size changes.\n             * The results from calling this method are further handled in View.js.\n             *\n             * The logic behind this is 16px padding by default, unless the screen is\n             * wider than 720px. In that case, the padding is increased to make the content\n             * in between be at maximum 720px. */\n            decorations.dynamicDockPadding = function(size, newWidth = maxContentWidth) {\n                let sideWidth = size[0] > newWidth + 32 ? (size[0] - newWidth) / 2 : normalisedPadding[1];\n                return [normalisedPadding[0], sideWidth, normalisedPadding[2], sideWidth];\n            }\n        }, decoratorTypes.viewDecorator);\n    }\n\n  /**\n   *\n   * Adds a custom layout function to the view.\n   * This decorator works directly on the object so you shouldn't pass any arguments nor use parentheses.\n   *\n   * @example\n   * @layout.custom((context) => {\n   *  context.set('myRenderable', {\n   *  size: [100, 100]\n   * })\n   * class MyView extends View {\n   *  constructor(options) {\n   *      super(options);\n   *      this.renderables.myRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n   *  }\n   * }\n   *\n   *\n   * @param customLayoutFunction\n   * @returns {Layout} A chainable function\n   */\n  custom (customLayoutFunction) {\n    return this.createChainableDecorator((decorations) => {\n      decorations.customLayoutFunction = customLayoutFunction\n    }, decoratorTypes.viewDecorator)\n  }\n}\n\nexport const layout = new Layout();\n\n\n/**\n * Decorator that is passed a callback in order to apply other decorators as a function of options passed\n *\n * @example\n * @dynamic(options =>\n *  @layout.size(options.width, options.height)\n * )\n * mainComponent = MainComponent.with({options: this.options})\n *\n *\n * @param dynamicFunction\n */\nexport const dynamic = (dynamicFunction) =>\n  createChainableDecorator((decorations) => {\n    if (!decorations.dynamicFunctions) {\n      decorations.dynamicFunctions = []\n    }\n    decorations.dynamicFunctions.push(dynamicFunction)\n  }, decoratorTypes.viewOrChild);\n\nclass Event {\n  /**\n   * @ignore\n   * Add to self in order to make the scope working\n   */\n  createChainableDecorator = createChainableDecorator;\n\n  /**\n   * Internal function used by the event decorators to generalize the idea of on, once, and off.\n   *\n   * @param {String} subscriptionType A type of subscription function, e.g. on\n   * @param {String} eventName The event name\n   * @param {Function} callback that is called when event has happened\n   * @param options\n   * @returns {Function}\n   */\n  _subscribe (subscriptionType, eventName, callback, options = {}) {\n    return this.createChainableDecorator((decorations) => {\n      if (!decorations.eventSubscriptions) {\n        decorations.eventSubscriptions = []\n      }\n      decorations.eventSubscriptions.push({\n        subscriptionType,\n        eventName,\n        callback,\n          options\n      })\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   *\n   * Adds an event listener to the renderable when specific event happened.\n   *\n   * @example\n   * @event.on('click', function() {this._handleClick})\n   * thing = Surface.with({properties: {backgroundColor: 'red'}});\n   *\n   * _handleClick() { ... }\n   *\n   *\n   * @param eventName\n   * @param callback\n   * @param {Object} options Options that are forwarded to the EventHandler options\n   * @returns {Layout} A chainable function\n   */\n  on (eventName, callback, options) {\n    return this._subscribe('on', eventName, callback, options);\n  }\n\n  /**\n   *\n   * Adds an event listener to the renderable when specific event happened once.\n   *\n   * @example\n   * @layout.size(100,100)\n   *    .stick.center()\n   *    .once('click', function() {this._handleClick})\n   * thing = Surface.with({properties: {backgroundColor: 'red'}});\n   *\n   * _handleClick() { ... }\n   *\n   *\n   * @param eventName\n   * @param callback\n   * @returns {Layout} A chainable function\n   */\n  once (eventName, callback) {\n    return this._subscribe('once', eventName, callback);\n  }\n\n  /**\n   * Pipes events from one renderable to another. The other renderable has to be declared above the one that is doing\n   * the piping, otherwise an exception will be thrown.\n   *\n   * @example\n   * @layout.fullSize()\n   * @event.pipe('dbsv')\n   * //Pipe events to another renderable declared above, called 'dbsv'\n   * scrollableSurface = Surface.with();\n   *\n   * @param pipeToName\n   * @returns {Function}\n   */\n  pipe (pipeToName) {\n    return this.createChainableDecorator((decorations) => {\n      if (!decorations.pipes) {\n        decorations.pipes = [];\n      }\n\n      decorations.pipes.push(pipeToName)\n    }, decoratorTypes.childDecorator)\n  }\n}\n\nexport const event = new Event();\n\nclass Flow {\n\n  /**\n   * @ignore\n   * Add to self in order to make the scope working\n   */\n  createChainableDecorator = createChainableDecorator;\n\n  /**\n   *\n   * Sets the default flow options for a View. These options will be overridden by\n   * each of its renderables, if they have flow options defined through e.g. flow.stateStep()\n   *\n   * @example\n   * @flow.defaultOptions({ transition: { curve: Easing.outCubic, duration: 200 } })\n   * class MyView extends View {\n     * }\n   *\n   * @param {Object} flowOptions Options to set as default.\n   * @param {Object} [flowOptions.delay] The amount of milliseconds to wait in between state transitions.\n   * @param {Object} [flowOptions.transition] A Famo.us-compatible transition object defining the animation specifics.\n   * @param {Object} [flowOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.\n   * @param {Object} [flowOptions.transition.duration] The amount of milliseconds a flow animation should take.\n   * @returns {Function}\n   */\n  defaultOptions (flowOptions = {}) {\n    return this.createChainableDecorator((decorations) => this._defaultOptionDecorator(decorations, flowOptions), decoratorTypes.childDecorator)\n  }\n\n\n  _defaultOptionDecorator(decorations, flowOptions)\n  {\n          if (!decorations.flow) {\n              decorations.flow = {states: {}};\n          }\n          decorations.flow.defaults = {...flowOptions};\n  }\n\n  auto() {\n      return this.createChainableDecorator((decorations, type) => {\n        if(type === decoratorTypes.childDecorator){\n            this._defaultOptionDecorator(decorations, {});\n        } else {\n            decorations.useFlow = true;\n            decorations.flowOptions = flowOptions || {};\n            decorations.transition = flowOptions.transition || undefined;\n        }\n      }, decoratorTypes.viewOrChild)\n  }\n\n  transition(transition = {}) {\n      return (layoutDecorator) => {\n          return this.createChainableDecorator((decorations) => {\n              let layoutDecorations = {};\n              layoutDecorator({decorations: layoutDecorations});\n              if(!decorations.tweenTransitions){\n                decorations.tweenTransitions = [];\n              }\n              decorations.tweenTransitions.push({transition, decorations: layoutDecorations});\n          }, decoratorTypes.childDecorator);\n      }\n  }\n\n  /**\n   * Functions the same as @flow.stateStep(), and additionally also immediately applies the decorators passed into the 'transformations' argument.\n   * Used to define a state step, without having to also manually apply the same decorators to the renderable to ensure it is rendered this way\n   * on initial show.\n   *\n   * @example\n   * // Initial size is [100, 100], and rendered at center of parent.\n   * @flow.defaultState('active', {}, layout.size(100, 100), layout.stick.center())\n   * myRenderable = Surface.with();\n   *\n   * @param {String} stateName The state name to assign to this state step.\n   * @param {Object} [stateOptions] Flow options to use in the state step.\n   * @param {Object} [stateOptions.delay] The amount of milliseconds to wait in between state transitions.\n   * @param {Object} [stateOptions.transition] A Famo.us-compatible transition object defining the animation specifics.\n   * @param {Object} [stateOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.\n   * @param {Object} [stateOptions.transition.duration] The amount of milliseconds a flow animation should take.\n   * @param {Layout} transformations Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments.\n   * @returns {Function}\n   */\n  defaultState (stateName = '', stateOptions = {}, ...transformations) {\n    return this.createChainableDecorator((decorations, decoratorTypes, target, renderableName, descriptor) => {\n      if (decorations.flow && decorations.flow.defaultState) {\n        return Utils.warn(`Default state defined twice. First as state ${decorations.flow.defaultState} and then as state ${stateName}`)\n      }\n      if (!decorations.flow) {\n        decorations.flow = {}\n      }\n      decorations.flow.defaultState = stateName;\n\n      this.stateStep(stateName, stateOptions, ...transformations)(target, renderableName, descriptor);\n      for (let transformation of transformations) {\n        transformation(target, renderableName, descriptor)\n      }\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Used to define a state that the renderable is able to flow to. When multiple state steps with the same state name\n   * are defined, flowing into that state will sequentially execute all defined steps with that state name.\n   *\n   * @example\n   * // Initial size is [0, 0], and rendered at top left of parent, because no @flow.defaultStep() was done,\n   * // and no other decorators are applied to the renderable.\n   * @flow.stateStep('active', {}, layout.size(100, 100), layout.stick.center())\n   * myRenderable = Surface.with();\n   *\n   * @param {String} stateName The state name to assign to this state step.\n   * @param {Object} [stateOptions] Flow options to use in the state step.\n   * @param {Object} [stateOptions.delay] The amount of milliseconds to wait in between state transitions.\n   * @param {Object} [stateOptions.transition] A Famo.us-compatible transition object defining the animation specifics.\n   * @param {Object} [stateOptions.transition.curve] The animation curve to use when flowing from one state to another, e.g. Easing.outCubic.\n   * @param {Object} [stateOptions.transition.duration] The amount of milliseconds a flow animation should take.\n   * @param {Array.Function} transformations Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments.\n   * @returns {Function}\n   */\n  stateStep (stateName = '', stateOptions = {}, ...transformations) {\n    return this.createChainableDecorator((decorations) => {\n      if (!decorations.flow) {\n        decorations.flow = {}\n      }\n      if (!decorations.flow.states) {\n        decorations.flow.states = {}\n      }\n      if (!decorations.flow.states[stateName]) {\n        decorations.flow.states[stateName] = {steps: []}\n      }\n      decorations.flow.states[stateName].steps.unshift({transformations, options: stateOptions})\n    }, decoratorTypes.childDecorator)\n  }\n\n  /**\n   * Defines the View-level states, that exist of concurrently and sequentially executed renderable-level states.\n   * When e.g. View.setViewFlowState('active') is called, the renderable states defined in the view-level state 'active' are executed.\n   *\n   * @example\n   * // Calling setViewFlowState('active') will first hide the loader, and when that is completed, show both buttons at the same time.\n   * @flow.viewStates({ 'active': [{loader: 'hidden'}, { button1: 'active', button2: 'active' }] })\n   * class MyView extends View {\n     *\n   *   @flow.defaultState('shown', {}, layout.opacity(1), layout.fullSize())\n   *   @flow.stateStep('hidden', {}, layout.opacity(0))\n   *   loader = Surface.with();\n   *\n   *   @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.top())\n   *   @flow.stateStep('active', {}, layout.opacity(1))\n   *   button1 = Surface.with();\n   *\n   *   @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.bottom())\n   *   @flow.stateStep('active', {}, layout.opacity(1))\n   *   button1 = Surface.with();\n   * }\n   *\n   * @param {Object} states An object keyed by View-level state names, with values of arrays of objects.\n   * @returns {Function}\n   */\n  viewStates (states = {}) {\n    return this.createChainableDecorator((decorations) => {\n      if (!decorations.viewFlow) {\n        decorations.viewFlow = {}\n      }\n\n      decorations.viewFlow.viewStates = states\n    }, decoratorTypes.viewDecorator)\n  }\n\n  /**\n   * A wrapper around @flow.stateStep, to allow defining multiple steps with the same state name.\n   *\n   * @param {String} stateName State name to assign states to.\n   * @param {Array.Object} states An array of {stateOptions: [..], transformations: [..]} objects, with stateOptions and transformations\n   * being the same usage as @flow.stateStep().\n   * @returns {Flow}\n   */\n  multipleStateStep (stateName = '', states = []) {\n    return this.createChainableDecorator((decorations, decoratorType, target, renderableName, descriptor) => {\n      for (let {stateOptions, transformations} of states) {\n        flow.stateStep(stateName, stateOptions, ...transformations)(target, renderableName, descriptor)\n      }\n    })\n  }\n}\n\nexport const flow = new Flow();",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/layout/Decorators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 872,
    "kind": "variable",
    "name": "bindings",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~bindings",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": "{bindings}",
    "description": "Describes a set of decorators used for layouting of a renderable in a View.",
    "lineNumber": 26,
    "type": {
      "types": [
        "{\"setup\": *, \"trigger\": *}"
      ]
    }
  },
  {
    "__docId__": 873,
    "kind": "variable",
    "name": "layout",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~layout",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": "{layout}",
    "description": null,
    "lineNumber": 1015,
    "undocument": true,
    "type": {
      "types": [
        "src/layout/Decorators.js~Layout"
      ]
    }
  },
  {
    "__docId__": 874,
    "kind": "function",
    "name": "dynamic",
    "memberof": "src/layout/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/Decorators.js~dynamic",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": "{dynamic}",
    "description": "Decorator that is passed a callback in order to apply other decorators as a function of options passed",
    "examples": [
      "@dynamic(options =>\n @layout.size(options.width, options.height)\n)\nmainComponent = MainComponent.with({options: this.options})"
    ],
    "lineNumber": 1030,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dynamicFunction",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 875,
    "kind": "variable",
    "name": "event",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~event",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": "{event}",
    "description": null,
    "lineNumber": 1133,
    "undocument": true,
    "type": {
      "types": [
        "src/layout/Decorators.js~Event"
      ]
    }
  },
  {
    "__docId__": 876,
    "kind": "variable",
    "name": "flow",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~flow",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": "{flow}",
    "description": null,
    "lineNumber": 1320,
    "undocument": true,
    "type": {
      "types": [
        "src/layout/Decorators.js~Flow"
      ]
    }
  },
  {
    "__docId__": 877,
    "kind": "class",
    "name": "Layout",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": null,
    "description": "Describes a set of decorators used for layouting of a renderable in a View.",
    "lineNumber": 74,
    "pseudoExport": true,
    "interface": false
  },
  {
    "__docId__": 878,
    "kind": "member",
    "name": "createChainableDecorator",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#createChainableDecorator",
    "access": "public",
    "description": "",
    "lineNumber": 80,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 879,
    "kind": "method",
    "name": "renderable",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#renderable",
    "access": "public",
    "description": "Merely marks a view property as a decorated renderable, which allows it to be rendered.\nUse this in combination with a @layout.custom decorator on the view in which this renderable resides.",
    "examples": [
      "@layout.renderable()\nrenderable = Surface.with();"
    ],
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "params": []
  },
  {
    "__docId__": 880,
    "kind": "method",
    "name": "fullSize",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#fullSize",
    "access": "public",
    "description": "Marks the renderable to cover the entire screen. Translate can also be specified on such a renderable.",
    "examples": [
      "@layout.fullSize()\n// View will have a red background\nbackground = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A decorator function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A decorator function"
    },
    "params": []
  },
  {
    "__docId__": 881,
    "kind": "method",
    "name": "dockSpace",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#dockSpace",
    "access": "public",
    "description": "Specifies the space that should come before the docked renderable. Useful when not specifying the size in the\nlayout.dock function. Note that the space does not appear if there isn't any renderable with a size greater than\nzero before it. Can also be specified for the view",
    "examples": [
      "// there's a 20px space before this box\n@layout.dockSpace(20)\n .size(100, 100)\n .dock.left()\nbox = new Surface({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 128,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": "The space that is inserted before the renderable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 882,
    "kind": "method",
    "name": "_dockTo",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#_dockTo",
    "access": "private",
    "description": "Internal function to do docking",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dockMethod",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "zIndex",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 883,
    "kind": "get",
    "name": "dock",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#dock",
    "access": "public",
    "description": "Docks things. See method descriptors for \"Dockings\"",
    "lineNumber": 174,
    "type": {
      "nullable": null,
      "types": [
        "DockTypes"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 884,
    "kind": "typedef",
    "name": "dockLeft",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.dockLeft",
    "access": "public",
    "description": "",
    "examples": [
      "@layout.dock.left(30, 0, 10)\n  .size(15, undefined)\n  .origin(0.5, 0)\n  .align(0.5, 0)\ndockedRenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@memberOf",
        "tagValue": "dock"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Function",
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": ". The size of the renderable in the one dimension that is being docked, e.g.\ndock left or right will be width, whereas dock top or bottom will result in height. For more information about\ndifferent variations, see layout.size."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "space",
        "description": ". Any space that should be inserted before the docked renderable"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "zIndex",
        "description": ". DEPRECATED: Use translate(0, 0, zIndex) instead."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "type": {
      "types": [
        "dockLeft"
      ],
      "optional": false,
      "name": "dockLeft"
    }
  },
  {
    "__docId__": 885,
    "kind": "typedef",
    "name": "dockRight",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.dockRight",
    "access": "public",
    "description": "",
    "examples": [
      "@layout.dock.right(30, 0, 10)\n  .size(15, undefined)\n  .origin(0.5, 0)\n  .align(0.5, 0)\ndockedRenderable = new Surface({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 229,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Function",
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": ". The size of the renderable in the one dimension that is being docked, e.g.\ndock left or right will be width, whereas dock top or bottom will result in height. For more information about\ndifferent variations, see layout.size."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "space",
        "description": ". Any space that should be inserted before the docked renderable"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "zIndex",
        "description": ". DEPRECATED: Use translate(0, 0, zIndex) instead."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "dockRight"
    }
  },
  {
    "__docId__": 886,
    "kind": "typedef",
    "name": "dockTop",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.dockTop",
    "access": "public",
    "description": "",
    "examples": [
      "@layout.dock.top(30, 0, 10)\n   .size(15, undefined)\n   .origin(0.5, 0)\n   .align(0.5, 0)\ndockedRenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Function",
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": ". The size of the renderable in the one dimension that is being docked, e.g.\ndock left or right will be width, whereas dock top or bottom will result in height. For more information about\ndifferent variations, see layout.size."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "space",
        "description": ". Any space that should be inserted before the docked renderable"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "zIndex",
        "description": ". DEPRECATED: Use translate(0, 0, zIndex) instead."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "dockTop"
    }
  },
  {
    "__docId__": 887,
    "kind": "typedef",
    "name": "dockBottom",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.dockBottom",
    "access": "public",
    "description": "",
    "examples": [
      "@layout.dock.bottom(30, 0, 10)\n   .size(15, undefined)\n   .origin(0.5, 0)\n   .align(0.5, 0)\ndockedRenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 287,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Function",
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "size",
        "description": ". The size of the renderable in the one dimension that is being docked, e.g.\ndock left or right will be width, whereas dock top or bottom will result in height. For more information about\ndifferent variations, see layout.size."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "space",
        "description": ". Any space that should be inserted before the docked renderable"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " 0",
        "defaultRaw": 0,
        "name": "zIndex",
        "description": ". DEPRECATED: Use translate(0, 0, zIndex) instead."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "dockBottom"
    }
  },
  {
    "__docId__": 888,
    "kind": "typedef",
    "name": "fill",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.fill",
    "access": "public",
    "description": "",
    "examples": [
      "@layout.dock.fill()\nfilledRenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "fill"
    }
  },
  {
    "__docId__": 889,
    "kind": "method",
    "name": "draggable",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#draggable",
    "access": "public",
    "description": "Makes the renderable allowed to be dragged around. this.renderables[name] refers to a RenderNode containing this\ndraggable along with the renderable itself.",
    "examples": [
      "@layout.draggable({xRange: [0, 100}, yRange: [0, 200]})\n.size(100, 100)\n// Makes a draggable square that is red\ndraggableRenderable = Surface.with({properties: {backgroundColor: 'red'});"
    ],
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} a chainable decorator function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "draggableOptions",
        "description": ". Same options that can be passed to a Famous Draggable."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.snapX",
        "description": "grid width for snapping during drag"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.snapY",
        "description": "grid height for snapping during drag"
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.xRange",
        "description": "maxmimum [negative, positive] x displacement from start of drag"
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.yRange",
        "description": "maxmimum [negative, positive] y displacement from start of drag"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.scale",
        "description": "one pixel of input motion translates to this many pixels of output drag motion"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.projection",
        "description": "User should set to Draggable._direction.x or\n   Draggable._direction.y to constrain to one axis."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "a chainable decorator function"
    }
  },
  {
    "__docId__": 890,
    "kind": "method",
    "name": "modifier",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#modifier",
    "access": "public",
    "description": "Makes modifications to a surface using old-style famous modifiers (e.g MapModifier for famous-map)",
    "examples": [
      "@layout.mapModifier(new MapModifier{ mapView: map, position: {lat: 0, lng: 0} })\n// Makes a surface that is linked to the position (0, 0)"
    ],
    "lineNumber": 360,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "modifier",
        "description": ". modifier object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 891,
    "kind": "method",
    "name": "swipable",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#swipable",
    "access": "public",
    "description": "Makes the renderable swipable with physics-like velocity after the dragging is released. Emits event\n'thresholdReached' with arguments ('x'|'y', 0|1) when any thresholds have been reached. this.renderables[name]\nnow refers to a a RenderNode containing a positionModifier along with the renderable itself.",
    "examples": [
      "@layout.size(100, 100)\n .swipable({xRange: [0, 100], snapX: true})\n//Make a red box that can slide to the right\nswipable = Surface.with({properties: {backgroundColor: 'red'});"
    ],
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.snapX",
        "description": "Whether to snap to the x axis"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.snapY",
        "description": "Whether to snap to the Y axis"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.enabled",
        "description": "Whether the swipable should be initially enabled"
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.xThreshold",
        "description": "Two values of the thresholds that trigger the thresholdReached event with\nargument 'x' and second argument 0 or 1, depending on the direction.\nSpecify undefined in one of them to disable threshold to that direction."
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.yThreshold",
        "description": "Two values of the thresholds that trigger the thresholdReached event with\nargument 'y'  and second argument 0 or 1, depending on the direction.\nSpecify undefined in one of them to disable threshold to that direction."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 892,
    "kind": "method",
    "name": "size",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#size",
    "access": "public",
    "description": "Specifies the size of the renderable. For both of the parameters, sizes can be interpreted as follows:\n\nIf specified as a function, then the argument passed is the context size of the specified dimension\n(width or height). Note that if an arrow function is used, this scoping cannot be used when inside a\ndecorator, since the scope will be the global scope.\n\nIf true is specified or a tilde with a size (e.g. ~300), then the renderable will be automatically sized.\nIf a tilde is used to indicate the size, then the size after the tilde will be used when/if the\nrenderable doesn't have a size, or turn into the actual size if it can be determined. This is useful when wanting\nto reduce the flickering of surfaces who's size cannot be determined the first render tick.\nBeware that true sizing of surfaces or other raw dom elements (input surfaces, image surfaces, text boxes etc)\noften comes with a perfomance penalty and should only be used when necessary.\nAlso beware that any negative size will be interpreted as a tilde, since ~x = 1 - x\n\nIf undefined is specified, then the size of that dimension will equal the entire context size.\n\nIf a size between 0 and 1 is specified, then that will be interpreted as a proportion of the context size. For\nexample if 0.5 is specified, then the size will be half of the context size (the parent's size). Instead of\nspecifying 1 to cover the entire context size, use undefined instead.",
    "examples": [
      "@layout.size(function(contextWidth) {return Math.max(contextWidth, this.options.maxWidth)}, ~300)\n// Creates a renderable where the width is equal to the text width and the height is whatever is bigger,\n// options.maxWidth, or the context size\ntext = Surface.with({content: 'This is some text', properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Function",
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number",
          "Function",
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 893,
    "kind": "method",
    "name": "perspective",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#perspective",
    "access": "public",
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "method",
    "name": "clip",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#clip",
    "access": "public",
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "params": [
      {
        "name": "width",
        "types": [
          "*"
        ]
      },
      {
        "name": "height",
        "types": [
          "*"
        ]
      },
      {
        "name": "properties",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "method",
    "name": "rotate",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#rotate",
    "access": "public",
    "description": "Rotates the renderable around any of the three axes (in radians).",
    "examples": [
      "@layout.size(100,100)\n   .rotate(0, 0, Math.PI)\n// Writes text upside down\nrenderable = Surface.with({content: 'upside down text'});"
    ],
    "lineNumber": 478,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The rotation around the x axis (flips vertically)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The rotation around the y axis (flips horizontally)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "The rotation around the z axis (rotatesin in the more intuitive sense)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 896,
    "kind": "method",
    "name": "rotateFrom",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#rotateFrom",
    "access": "public",
    "description": "Rotates the renderable around any of the three axes (in radians) relatively to the current rotation",
    "examples": [
      "@layout.size(100,100)\n   .rotate(0, 0, Math.PI)\n// Writes text upside down\nrenderable = Surface.with({content: 'upside down text'});"
    ],
    "lineNumber": 498,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "The rotation around the x axis (flips vertically)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "The rotation around the y axis (flips horizontally)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "The rotation around the z axis (rotatesin in the more intuitive sense)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 897,
    "kind": "method",
    "name": "opacity",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#opacity",
    "access": "public",
    "description": "Sets the opacity of a renderable.",
    "examples": [
      "@layout.opacity(0.5)\n   .size(100, 10)\n   .place.center()\n// Writes text that is half invisible\nrenderable = Surface.with({content: 'Half invisible'});"
    ],
    "lineNumber": 519,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "opacity",
        "description": "The opacity, between 0 and 1"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 898,
    "kind": "method",
    "name": "_stickTo",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#_stickTo",
    "access": "private",
    "description": null,
    "lineNumber": 525,
    "undocument": true,
    "params": [
      {
        "name": "stick",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 899,
    "kind": "typedef",
    "name": "StickTypes",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.StickTypes",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "stick in the center"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "bottomRight",
        "description": "stick to the bottom right"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "bottomLeft",
        "description": "stick to the bottom left"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "topRight",
        "description": "stick to the top right"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "topLeft",
        "description": "stick to the top left"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "stick to the left"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "stick to the right"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "stick to the bottom"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "stick to the top"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "StickTypes"
    }
  },
  {
    "__docId__": 900,
    "kind": "typedef",
    "name": "StickTypes",
    "memberof": "src/layout/Decorators.js~Layout",
    "static": true,
    "longname": "src/layout/Decorators.js~Layout.StickTypes",
    "access": "public",
    "description": "",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable layout function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable layout function"
    },
    "type": {
      "types": [
        "Function"
      ],
      "optional": false,
      "name": "StickTypes"
    }
  },
  {
    "__docId__": 901,
    "kind": "get",
    "name": "stick",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#stick",
    "access": "public",
    "description": "Places the renderable by settings origin/align. If nothing is set, it will default to topleft.",
    "examples": [
      "@layout.size(100,~300)\n   .stick.center()\nrenderable = Surface.with({content: 'centered text'});"
    ],
    "lineNumber": 593,
    "type": {
      "nullable": null,
      "types": [
        "StickTypes"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 902,
    "kind": "method",
    "name": "origin",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#origin",
    "access": "public",
    "description": "Sets the point where the renderable has its anchor from where rotation and translation will be done.\nYou could consider it as translating the negative of the proportion times its size. The arguments are always\nbetween and including 0 and 1.",
    "examples": [
      "@layout.origin(0.5, 0)\n   .size(100,100)\n   .align(0.5, 0.5)\n//Displays a red box horizontically centered and displays just below the vertical mid point\nrenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 657,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x.",
        "description": "The x of the origin."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y.",
        "description": "The y of the origin."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function."
    }
  },
  {
    "__docId__": 903,
    "kind": "method",
    "name": "align",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#align",
    "access": "public",
    "description": "Translates the renderable by a proportion of the context size.",
    "examples": [
      "@layout.align(0.5, 0.5)\n   .size(100,100)\n//Displays a red box just below the vertical mid point and past the horizontal mid point\nrenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x.",
        "description": "The proportion of the context width that is going to be translated."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y.",
        "description": "The proportion of the context height that is going to be translated."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function."
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "translate",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#translate",
    "access": "public",
    "description": "Specifies a translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,\nand normal). Can also be applied on view level to translate every renderable of that view. The view wide translation defaults\nto [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.",
    "examples": [
      "@layout.translate(0, 0, 20)\nclass myView extends View{\n @layout.translate(0, 0, -20)\n   .fullSize()\n // Will display relatively at z level 0 (20 minus 20)\n myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n}"
    ],
    "lineNumber": 702,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Moves the renderable along the x axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Moves the renderable along the y axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Moves the renderable along the z axis."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function."
    }
  },
  {
    "__docId__": 905,
    "kind": "method",
    "name": "translateFrom",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#translateFrom",
    "access": "public",
    "description": "Specifies a relative translation of a renderable. Can be applied to every kind of renderable (docked, fullSize,\nand normal).\nCan also be applied on view level to translate every renderable of that view. The view wide translation defaults\nto [0, 0, 10] in order to always increase the z space of every level of the Famous rendering tree.",
    "examples": [
      "@layout.translateFrom(0, 0, 20)\nclass myView extends View{\n @layout.translateFrom(0, 0, -20)\n   .fullSize()\n // Will display relatively at z level 0 (20 minus 20)\n myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n}"
    ],
    "lineNumber": 738,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Moves the renderable along the x axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Moves the renderable along the y axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Moves the renderable along the z axis."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function."
    }
  },
  {
    "__docId__": 906,
    "kind": "method",
    "name": "scale",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#scale",
    "access": "public",
    "description": "Specifies the scale of a renderable. Can be applied to every kind of renderable.",
    "examples": [
      " class myView extends View{\n @layout.scale(2, 2, 2)\n   .fullSize()\n // Will scale the renderable by 2 in the x,y,z dimension\n myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n}"
    ],
    "lineNumber": 770,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Scales the renderable along the x axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Scales the renderable along the y axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Scales the renderable along the z axis."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function."
    }
  },
  {
    "__docId__": 907,
    "kind": "method",
    "name": "skew",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#skew",
    "access": "public",
    "description": "Specifies the skew of a renderable. Can be applied to every kind of renderable.",
    "examples": [
      " class myView extends View{\n @layout.skew(2, 2, 2)\n   .fullSize()\n // Will skew the renderable by 2 in the x,y,z dimension\n myBackground = Surface.with({properties: {backgroudColor: 'red'}});\n}"
    ],
    "lineNumber": 794,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Skews the renderable along the x axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Skews the renderable along the y axis."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Skews the renderable along the z axis."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function."
    }
  },
  {
    "__docId__": 908,
    "kind": "method",
    "name": "animate",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#animate",
    "access": "public",
    "description": "\nCreates an animation to show/hide the renderable. Renderables can be shown by calling\nthis.showRenderable(renderableName) and hidden using this.hideRenderable(renderableName) or\nthis.showRenderable(renderableName, false). When a renderable has been shown, it will emit the event 'shown'.",
    "examples": [
      "@layout.stick.center()\n   .size(100,100)\n   .animate({transition: {duration: 350}})\nrenderable = Surface.with({properties: {backgroundColor: 'red'}});"
    ],
    "lineNumber": 835,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "The same as famous-flex Animation Controller, plus 2 more:"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.showInitially",
        "description": "Whether to show the renderable when the view is created. (Default: true)."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "options.waitFor",
        "description": "If specified, it will wait for the renderable with the specified name to show\nbefore showing the renderable"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.transition",
        "description": "Transition options."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.animation",
        "description": "Animation function (default: `AnimationController.Animation.FadedZoom`)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.zIndexOffset",
        "description": "Optional z-index difference between the hiding & showing renderable (default: 0)."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.keepHiddenViewsInDOMCount",
        "description": "Keeps views in the DOM after they have been hidden (default: 0)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.show",
        "description": "Show specific options."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.show.transition",
        "description": "Show specific transition options."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.show.animation",
        "description": "Show specific animation function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.hide",
        "description": "Hide specific options."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.hide.transition",
        "description": "Hide specific transition options."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "options.hide.animation",
        "description": "Hide specific animation function."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.transfer",
        "description": "Transfer options."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.transfer.transition",
        "description": "Transfer specific transition options."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.transfer.zIndex",
        "description": "Z-index the tranferables are moved on top while animating (default: 10)."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.transfer.fastResize",
        "description": "When enabled, scales the renderable i.s.o. resizing when doing the transfer animation (default: true)."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.transfer.items",
        "description": "Ids (key/value) pairs (source-id/target-id) of the renderables that should be transferred."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 909,
    "kind": "method",
    "name": "flow",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#flow",
    "access": "public",
    "description": "",
    "examples": [
      "@layout.flow({spring: {dampingRatio: 0.8, period: 1000}})\nclass myView extends View{\n...\n}"
    ],
    "lineNumber": 865,
    "deprecated": "Makes the view flow by tweening all intermediate stages of a changed attribute of any renderable.",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "flowOptions",
        "description": "to pass as flowOptions to the LayoutController"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.transition",
        "description": "If specified, sets the default transition to use"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.reflowOnResize",
        "description": "Smoothly reflows renderables on resize (only used when flow = true) (default: `true`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.spring",
        "description": "Spring options used by nodes when reflowing (default: `{dampingRatio: 0.8, period: 300}`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.properties",
        "description": "Properties which should be enabled or disabled for flowing."
      },
      {
        "nullable": null,
        "types": [
          "Spec"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.insertSpec",
        "description": "Size, transform, opacity... to use when inserting new renderables into the scene (default: `{}`)."
      },
      {
        "nullable": null,
        "types": [
          "Spec"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.removeSpec",
        "description": "Size, transform, opacity... to use when removing renderables from the scene (default: undefined)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 910,
    "kind": "method",
    "name": "scrollable",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#scrollable",
    "access": "public",
    "description": "Makes the view as scrollable. This will put the entire content in a ReflowingScrollView that uses getSize on the\nview to determine scrolling size. If the size cannot be determined, you might consider declaring your own\ngetSize() on the View.",
    "examples": [
      "@layout.scrollable()\nclass myView extends View{\n...\n}"
    ],
    "lineNumber": 889,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    },
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ]
  },
  {
    "__docId__": 911,
    "kind": "method",
    "name": "nativeScrollable",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#nativeScrollable",
    "access": "public",
    "description": "Make content scroll natively powered by the browser.",
    "lineNumber": 903,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "Options on how to scroll"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.scrollY",
        "description": "Defaults to true"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "options.scrollX",
        "description": "Defaults to false"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 912,
    "kind": "method",
    "name": "dockPadding",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#dockPadding",
    "access": "public",
    "description": "Sets the margins for the docked content. This can be applied both to a child and a class. When in conflict,\nthe parent will override the child's setting. If the margin is set on a Surface, then CSS padding will be set.\nmargins can be 1, 2, or 4, parameters, which can be specified as shorthand in the same way\nas CSS does it.",
    "examples": [
      "@layout.dockPadding(15)\n//Creates a class with 15px margin on all sides for docked renderables\nclass myView extends View{\n\n //Will be displayed with margin\n @layout.dock.top(20)\n onTop = Surface.with({content: \"hello world\"});\n\n //Will be displayed without margin since we're using @layout.stick\n @layout.stick.bottom\n onButtom = Surface.with({content: \"hey hey\"});\n}"
    ],
    "lineNumber": 938,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "firstMargin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "secondMargin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "thirdMargin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "fourthMargin",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 913,
    "kind": "method",
    "name": "columnDockPadding",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#columnDockPadding",
    "access": "public",
    "description": "Like @layout.dockPadding, sets the padding between this view and its docked content.\nWhen the screen width plus this padding exceeds maxContentWidth, the padding\nis increased, so that the content is never wider than maxContentWidth.",
    "examples": [
      "@layout.columnDockPadding(720, [16])\n//Creates a class with 16px margin on all sides for docked renderables\nclass myView extends View{\n\n //Will be displayed with margin to the top and sides, and will at max be 720px wide.\n @layout.dock.top(20)\n onTop = Surface.with({content: \"hello world\"});\n\n //Will be displayed without margin since we're using @layout.stick instead of @layout.dock\n @layout.stick.bottom()\n onButtom = Surface.with({content: \"hey hey\"});\n}"
    ],
    "lineNumber": 967,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxContentWidth",
        "description": "Maximum width the content should be allowed to be."
      },
      {
        "nullable": null,
        "types": [
          "[Number]"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultPadding",
        "description": "A 1-D, 2-D, or 4-D array of padding numbers, just like the padding spec in CSS."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 914,
    "kind": "method",
    "name": "custom",
    "memberof": "src/layout/Decorators.js~Layout",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Layout#custom",
    "access": "public",
    "description": "\nAdds a custom layout function to the view.\nThis decorator works directly on the object so you shouldn't pass any arguments nor use parentheses.",
    "examples": [
      "@layout.custom((context) => {\n context.set('myRenderable', {\n size: [100, 100]\n})\nclass MyView extends View {\n constructor(options) {\n     super(options);\n     this.renderables.myRenderable = Surface.with({properties: {backgroundColor: 'red'}});\n }\n}"
    ],
    "lineNumber": 1008,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "customLayoutFunction",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 915,
    "kind": "class",
    "name": "Event",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~Event",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1038,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 916,
    "kind": "member",
    "name": "createChainableDecorator",
    "memberof": "src/layout/Decorators.js~Event",
    "static": false,
    "longname": "src/layout/Decorators.js~Event#createChainableDecorator",
    "access": "public",
    "description": "",
    "lineNumber": 1043,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 917,
    "kind": "method",
    "name": "_subscribe",
    "memberof": "src/layout/Decorators.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Event#_subscribe",
    "access": "private",
    "description": "Internal function used by the event decorators to generalize the idea of on, once, and off.",
    "lineNumber": 1054,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subscriptionType",
        "description": "A type of subscription function, e.g. on"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": "The event name"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "that is called when event has happened"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 918,
    "kind": "method",
    "name": "on",
    "memberof": "src/layout/Decorators.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Event#on",
    "access": "public",
    "description": "\nAdds an event listener to the renderable when specific event happened.",
    "examples": [
      "@event.on('click', function() {this._handleClick})\nthing = Surface.with({properties: {backgroundColor: 'red'}});\n\n_handleClick() { ... }"
    ],
    "lineNumber": 1084,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "Options that are forwarded to the EventHandler options"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 919,
    "kind": "method",
    "name": "once",
    "memberof": "src/layout/Decorators.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Event#once",
    "access": "public",
    "description": "\nAdds an event listener to the renderable when specific event happened once.",
    "examples": [
      "@layout.size(100,100)\n   .stick.center()\n   .once('click', function() {this._handleClick})\nthing = Surface.with({properties: {backgroundColor: 'red'}});\n\n_handleClick() { ... }"
    ],
    "lineNumber": 1105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Layout} A chainable function"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eventName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Layout"
      ],
      "spread": false,
      "description": "A chainable function"
    }
  },
  {
    "__docId__": 920,
    "kind": "method",
    "name": "pipe",
    "memberof": "src/layout/Decorators.js~Event",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Event#pipe",
    "access": "public",
    "description": "Pipes events from one renderable to another. The other renderable has to be declared above the one that is doing\nthe piping, otherwise an exception will be thrown.",
    "examples": [
      "@layout.fullSize()\n@event.pipe('dbsv')\n//Pipe events to another renderable declared above, called 'dbsv'\nscrollableSurface = Surface.with();"
    ],
    "lineNumber": 1122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pipeToName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 921,
    "kind": "class",
    "name": "Flow",
    "memberof": "src/layout/Decorators.js",
    "static": true,
    "longname": "src/layout/Decorators.js~Flow",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/Decorators.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1135,
    "pseudoExport": true,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 922,
    "kind": "member",
    "name": "createChainableDecorator",
    "memberof": "src/layout/Decorators.js~Flow",
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#createChainableDecorator",
    "access": "public",
    "description": "",
    "lineNumber": 1141,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 923,
    "kind": "method",
    "name": "defaultOptions",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#defaultOptions",
    "access": "public",
    "description": "\nSets the default flow options for a View. These options will be overridden by\neach of its renderables, if they have flow options defined through e.g. flow.stateStep()",
    "examples": [
      "@flow.defaultOptions({ transition: { curve: Easing.outCubic, duration: 200 } })\nclass MyView extends View {\n}"
    ],
    "lineNumber": 1160,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "flowOptions",
        "description": "Options to set as default."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.delay",
        "description": "The amount of milliseconds to wait in between state transitions."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.transition",
        "description": "A Famo.us-compatible transition object defining the animation specifics."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.transition.curve",
        "description": "The animation curve to use when flowing from one state to another, e.g. Easing.outCubic."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "flowOptions.transition.duration",
        "description": "The amount of milliseconds a flow animation should take."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "_defaultOptionDecorator",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#_defaultOptionDecorator",
    "access": "private",
    "description": null,
    "lineNumber": 1165,
    "undocument": true,
    "params": [
      {
        "name": "decorations",
        "types": [
          "*"
        ]
      },
      {
        "name": "flowOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 925,
    "kind": "method",
    "name": "auto",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#auto",
    "access": "public",
    "description": null,
    "lineNumber": 1173,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 926,
    "kind": "method",
    "name": "transition",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#transition",
    "access": "public",
    "description": null,
    "lineNumber": 1185,
    "undocument": true,
    "params": [
      {
        "name": "transition",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 927,
    "kind": "method",
    "name": "defaultState",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#defaultState",
    "access": "public",
    "description": "Functions the same as @flow.stateStep(), and additionally also immediately applies the decorators passed into the 'transformations' argument.\nUsed to define a state step, without having to also manually apply the same decorators to the renderable to ensure it is rendered this way\non initial show.",
    "examples": [
      "// Initial size is [100, 100], and rendered at center of parent.\n@flow.defaultState('active', {}, layout.size(100, 100), layout.stick.center())\nmyRenderable = Surface.with();"
    ],
    "lineNumber": 1217,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName",
        "description": "The state name to assign to this state step."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions",
        "description": "Flow options to use in the state step."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.delay",
        "description": "The amount of milliseconds to wait in between state transitions."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.transition",
        "description": "A Famo.us-compatible transition object defining the animation specifics."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.transition.curve",
        "description": "The animation curve to use when flowing from one state to another, e.g. Easing.outCubic."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.transition.duration",
        "description": "The amount of milliseconds a flow animation should take."
      },
      {
        "nullable": null,
        "types": [
          "Layout"
        ],
        "spread": false,
        "optional": false,
        "name": "transformations",
        "description": "Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 928,
    "kind": "method",
    "name": "stateStep",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#stateStep",
    "access": "public",
    "description": "Used to define a state that the renderable is able to flow to. When multiple state steps with the same state name\nare defined, flowing into that state will sequentially execute all defined steps with that state name.",
    "examples": [
      "// Initial size is [0, 0], and rendered at top left of parent, because no @flow.defaultStep() was done,\n// and no other decorators are applied to the renderable.\n@flow.stateStep('active', {}, layout.size(100, 100), layout.stick.center())\nmyRenderable = Surface.with();"
    ],
    "lineNumber": 1253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName",
        "description": "The state name to assign to this state step."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions",
        "description": "Flow options to use in the state step."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.delay",
        "description": "The amount of milliseconds to wait in between state transitions."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.transition",
        "description": "A Famo.us-compatible transition object defining the animation specifics."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.transition.curve",
        "description": "The animation curve to use when flowing from one state to another, e.g. Easing.outCubic."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "stateOptions.transition.duration",
        "description": "The amount of milliseconds a flow animation should take."
      },
      {
        "nullable": null,
        "types": [
          "Array.Function"
        ],
        "spread": false,
        "optional": false,
        "name": "transformations",
        "description": "Decorators to assign to this state, and to apply initially, passed in as regular comma-separated arguments."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 929,
    "kind": "method",
    "name": "viewStates",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#viewStates",
    "access": "public",
    "description": "Defines the View-level states, that exist of concurrently and sequentially executed renderable-level states.\nWhen e.g. View.setViewFlowState('active') is called, the renderable states defined in the view-level state 'active' are executed.",
    "examples": [
      "// Calling setViewFlowState('active') will first hide the loader, and when that is completed, show both buttons at the same time.\n@flow.viewStates({ 'active': [{loader: 'hidden'}, { button1: 'active', button2: 'active' }] })\nclass MyView extends View {\n\n  @flow.defaultState('shown', {}, layout.opacity(1), layout.fullSize())\n  @flow.stateStep('hidden', {}, layout.opacity(0))\n  loader = Surface.with();\n\n  @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.top())\n  @flow.stateStep('active', {}, layout.opacity(1))\n  button1 = Surface.with();\n\n  @flow.defaultState('inactive', {}, layout.opacity(0), layout.size(100, 100), layout.stick.bottom())\n  @flow.stateStep('active', {}, layout.opacity(1))\n  button1 = Surface.with();\n}"
    ],
    "lineNumber": 1293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Function}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "states",
        "description": "An object keyed by View-level state names, with values of arrays of objects."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 930,
    "kind": "method",
    "name": "multipleStateStep",
    "memberof": "src/layout/Decorators.js~Flow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/layout/Decorators.js~Flow#multipleStateStep",
    "access": "public",
    "description": "A wrapper around @flow.stateStep, to allow defining multiple steps with the same state name.",
    "lineNumber": 1311,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Flow}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "stateName",
        "description": "State name to assign states to."
      },
      {
        "nullable": null,
        "types": [
          "Array.Object"
        ],
        "spread": false,
        "optional": false,
        "name": "states",
        "description": "An array of {stateOptions: [..], transformations: [..]} objects, with stateOptions and transformations\nbeing the same usage as @flow.stateStep()."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Flow"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 931,
    "kind": "file",
    "name": "src/layout/FlowStates.js",
    "content": "/**\n\n\n @author: Manuel Overdijk\n @license NPOSL-3.0\n @copyright Bizboard, 2016\n\n */\n\nimport Easing               from 'famous/transitions/Easing.js';\n\nimport {layout, flow}               from './Decorators.js';\n\nexport const flowStates = {\n    defaultTransition: {curve: Easing.outCubic, duration: 500},\n\n    fade: function(stateName = '', options = {opacity: 0}, stateOptions = {transition: flowStates.defaultTransition, delay: 0}) {\n        return function (target, renderableName, descriptor) {\n            flow.stateStep(stateName, stateOptions, layout.opacity(options.opacity))(target, renderableName, descriptor);\n        }\n    },\n    fadeSlideLeft: function(stateName = '', options = {translation: -300, opacity: 0}, stateOptions = {transition: flowStates.defaultTransition, delay: 0}) {\n        return function (target, renderableName, descriptor) {\n            flow.stateStep(stateName, stateOptions, layout.translateFrom(options.translation, 0, 0), layout.opacity(options.opacity))(target, renderableName, descriptor);\n        }\n    },\n    fadeSlideRight: function(stateName = '', options = {translation: 300, opacity: 0}, stateOptions = {transition: flowStates.defaultTransition, delay: 0}) {\n        return function (target, renderableName, descriptor) {\n            flow.stateStep(stateName, stateOptions, layout.translateFrom(options.translation, 0, 0), layout.opacity(options.opacity))(target, renderableName, descriptor);\n        }\n    },\n    fadeSlideTop: function(stateName = '', options = {translation: -300, opacity: 0}, stateOptions = {transition: flowStates.defaultTransition, delay: 0}) {\n        return function (target, renderableName, descriptor) {\n            flow.stateStep(stateName, stateOptions, layout.translateFrom(0, options.translation, 0), layout.opacity(options.opacity))(target, renderableName, descriptor);\n        }\n    },\n    fadeSlideBottom: function(stateName = '', options = {translation: 300, opacity: 0}, stateOptions = {transition: flowStates.defaultTransition, delay: 0}) {\n        return function (target, renderableName, descriptor) {\n            flow.stateStep(stateName, stateOptions, layout.translateFrom(0, options.translation, 0), layout.opacity(options.opacity))(target, renderableName, descriptor);\n        }\n    }\n};",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/layout/FlowStates.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 932,
    "kind": "variable",
    "name": "flowStates",
    "memberof": "src/layout/FlowStates.js",
    "static": true,
    "longname": "src/layout/FlowStates.js~flowStates",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/FlowStates.js",
    "importStyle": "{flowStates}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"defaultTransition\": *, \"fade\": *, \"fadeSlideLeft\": *, \"fadeSlideRight\": *, \"fadeSlideTop\": *, \"fadeSlideBottom\": *}"
      ]
    }
  },
  {
    "__docId__": 933,
    "kind": "file",
    "name": "src/layout/TrueSizedLayoutDockHelper.js",
    "content": "/**\n @author: Karl Lundfall (lundfall)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n Adapted version of the LayoutDockHelper made by Hein Rutjes in famous-flex\n */\n\n\nimport LayoutUtility from 'famous-flex/LayoutUtility';\n\n/**\n *\n * @ignore\n * @class\n * @param {LayoutContext} context layout-context\n * @param {Object} [options] additional options\n * @param {Object} [options.margins] margins to start out with (default: 0px)\n * @param {Number} [options.translateZ] z-index to use when translating objects (default: 0)\n * @alias module:LayoutDockHelper\n */\nexport function TrueSizedLayoutDockHelper(context, options) {\n    var size = context.size;\n    this._size = size;\n    this._context = context;\n    this._options = options;\n    this._data = {\n        z: (options && options.translateZ) ? options.translateZ : 0\n    };\n    var margins = [0, 0, 0, 0];\n    if (options && options.margins) {\n        margins = LayoutUtility.normalizeMargins(options.margins);\n    }\n    this._initialData = {\n        left: margins[3],\n        top: margins[0],\n        right: size[0] - margins[1],\n        bottom: size[1] - margins[2]\n    };\n    this._data.left = this._initialData.left;\n    this._data.top = this._initialData.top;\n    this._data.right = this._initialData.right;\n    this._data.bottom = this._initialData.bottom;\n}\n\n/**\n * Parses the layout-rules based on a JSON data object.\n *\n * **Example:**\n *\n * ```JSON\n * [\n *   ['top', 'header', 50],\n *   ['bottom', 'footer', 50, 10], // z-index: 10\n *   ['margins', [10, 5]], // marginate remaining space: 10px top/bottom, 5px left/right\n *   ['fill', 'content']\n * ]\n * ```\n *\n * @param {Object} data JSON object\n */\nTrueSizedLayoutDockHelper.prototype.parse = function (data) {\n    for (var i = 0; i < data.length; i++) {\n        var rule = data[i];\n        var value = (rule.length >= 3) ? rule[2] : undefined;\n        if (rule[0] === 'top') {\n            this.top(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);\n        }\n        else if (rule[0] === 'left') {\n            this.left(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);\n        }\n        else if (rule[0] === 'right') {\n            this.right(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);\n        }\n        else if (rule[0] === 'bottom') {\n            this.bottom(rule[1], value, (rule.length >= 4) ? rule[3] : undefined);\n        }\n        else if (rule[0] === 'fill') {\n            this.fill(rule[1], (rule.length >= 3) ? rule[2] : undefined);\n        }\n        else if (rule[0] === 'margins') {\n            this.margins(rule[1]);\n        }\n    }\n};\n\n/**\n * Dock the node to the top. Sizes can also be specified as ~size, which makes them truesizes\n *\n * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding\n * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined\n * @param {Number} [z] z-index to use for the node\n * @param {Number} space the space inserted before this item, defaults to 0\n * @param extraTranslation\n * @return {TrueSizedLayoutDockHelper} this\n */\nTrueSizedLayoutDockHelper.prototype.top = function (renderableName, size, space = 0, extraTranslation = [0, 0, 0], innerSize, otherSpecs) {\n    let [width, height] = this._setupAccordingToDimension(size, 1);\n    if (this._data.top !== this._initialData.top) {\n        this._data.top += space;\n    }\n\n    this._context.set(renderableName, {\n        size: innerSize || ([width || (this._data.right - this._data.left), this._ensureTrueSize(height)]),\n        translate: this._addTranslations([this._data.left, this._data.top, this._data.z], extraTranslation),\n        ...otherSpecs\n    });\n    /* If height was negative, then it is true sized and it needs to be tild'd to return to original */\n    this._data.top += this._resolveSingleSize(height);\n    return this;\n};\n\n/**\n * Dock the node to the left. Sizes can also be specified as ~size, which makes them truesizes\n *\n * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding\n * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined\n * @param {Number} [z] z-index to use for the node\n * @param {Number} space the space inserted before this item, defaults to 0\n * @param extraTranslation\n * @return {TrueSizedLayoutDockHelper} this\n */\nTrueSizedLayoutDockHelper.prototype.left = function (renderableName, size, space = 0, extraTranslation = [0, 0, 0], innerSize, otherSpecs) {\n    let [width, height] = this._setupAccordingToDimension(size, 0);\n    if (this._data.left !== this._initialData.left) {\n        this._data.left += space;\n    }\n    this._context.set(renderableName, {\n        size: innerSize || ([this._ensureTrueSize(width), height || (this._data.bottom - this._data.top)]),\n        translate: this._addTranslations([this._data.left, this._data.top, this._data.z], extraTranslation),\n        ...otherSpecs\n    });\n    this._data.left += this._resolveSingleSize(width);\n    return this;\n};\n\n/**\n * Dock the node to the bottom. Sizes can also be specified as ~size, which makes them truesizes\n *\n * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `height` argument argument is used for padding\n * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined\n * @param {Number} [z] z-index to use for the node\n * @param {Number} space the space inserted before this item, defaults to 0\n * @param extraTranslation\n * @return {TrueSizedLayoutDockHelper} this\n */\nTrueSizedLayoutDockHelper.prototype.bottom = function (renderableName, size, space = 0, extraTranslation = [0, 0, 0], innerSize, otherSpecs) {\n    let [width, height] = this._setupAccordingToDimension(size, 1);\n    if (this._data.bottom !== this._initialData.bottom) {\n        this._data.bottom -= space;\n    }\n    this._data.bottom -= this._resolveSingleSize(height);\n    this._context.set(renderableName, {\n        size: innerSize || ([width || (this._data.right - this._data.left), this._ensureTrueSize(height)]),\n        translate: this._addTranslations([this._data.left, this._data.bottom, this._data.z], extraTranslation),\n        ...otherSpecs\n    });\n    return this;\n};\n\n/**\n * Dock the node to the right. Sizes can also be specified as ~size, which makes them truesizes\n *\n * @param {LayoutNode|String} [node] layout-node to dock, when omitted the `width` argument argument is used for padding\n * @param {Array}  size of the node. If number, draws only one dimension and leaves the other one undefined\n * @param {Number} [this._data.z] z-index to use for the node\n * @param {Number} space the space inserted before this item, defaults to 0\n * @param extraTranslation\n * @return {TrueSizedLayoutDockHelper} this\n */\nTrueSizedLayoutDockHelper.prototype.right = function (renderableName, size, space = 0, extraTranslation = [0, 0, 0], innerSize, otherSpecs) {\n    let [width, height] = this._setupAccordingToDimension(size, 0);\n    if (this._data.right !== this._initialData.right) {\n        this._data.right -= space;\n    }\n    this._data.right -= this._resolveSingleSize(width);\n    this._context.set(renderableName, {\n        size: innerSize || ([this._ensureTrueSize(width), height || (this._data.bottom - this._data.top)]),\n        translate: this._addTranslations([this._data.right, this._data.top, this._data.z], extraTranslation),\n        ...otherSpecs\n    });\n    return this;\n};\n\n/**\n * Fills the node to the remaining content.\n *\n * @return {TrueSizedLayoutDockHelper} this\n * @param renderableName\n * @param size\n * @param translate\n * @param otherSpecs\n */\nTrueSizedLayoutDockHelper.prototype.fill = function (renderableName, size = [0, 0], translate = [0, 0, 0], otherSpecs = {}) {\n    var fillSize = this.getFillSize();\n    this._context.set(renderableName, {\n        size: [size[0] || fillSize[0], size[1] || fillSize[1]],\n        translate: this._addTranslations([this._data.left, this._data.top, this._data.z], translate),\n        ...otherSpecs\n    });\n    return this;\n};\n\nTrueSizedLayoutDockHelper.prototype.getFillSize = function() {\n    return [Math.max(this._data.right - this._data.left, 0), Math.max(this._data.bottom - this._data.top, 0)];\n}\n\n\n/**\n * Applies indent margins to the remaining content.\n *\n * @param {Number|Array} margins margins shorthand (e.g. '5', [10, 10], [5, 10, 5, 10])\n * @return {TrueSizedLayoutDockHelper} this\n */\nTrueSizedLayoutDockHelper.prototype.margins = function (margins) {\n    margins = LayoutUtility.normalizeMargins(margins);\n    this._data.left += margins[3];\n    this._data.top += margins[0];\n    this._data.right -= margins[1];\n    this._data.bottom -= margins[2];\n    this._initialData.left = this._data.left;\n    this._initialData.right = this._data.right;\n    this._initialData.top = this._data.top;\n    this._initialData.bottom = this._data.bottom;\n    return this;\n};\n\nTrueSizedLayoutDockHelper.prototype._resolveSingleSize = function (size) {\n    return size < 0 ? ~size : size;\n};\nTrueSizedLayoutDockHelper.prototype._addTranslations = function (translation1, translation2) {\n    return [translation1[0] + translation2[0], translation1[1] + translation2[1], translation1[2] + translation2[2]];\n};\nTrueSizedLayoutDockHelper.prototype._ensureTrueSize = function (size) {\n    return size < 0 ? true : size;\n};\n\n\nTrueSizedLayoutDockHelper.prototype._setupAccordingToDimension = function (size, dim) {\n    let height;\n    let width;\n    if (size instanceof Array) {\n        let orthogonalDimension = dim ? 0 : 1;\n        let adjustedSize = [size[0], size[1]];\n        if (size[orthogonalDimension] < 0) {\n            /* If a true size was specified as an orhtogonal dimension, we just set it to true, as we don't need to save the value anywhere here */\n            adjustedSize[orthogonalDimension] = true;\n        }\n        width = adjustedSize[0];\n        height = adjustedSize[1];\n    } else {\n        width = size;\n    }\n    return [width, height];\n};\n\n/**\n * Gets the current left/right/top/bottom/z bounds used by the dock-helper.\n *\n * @return {Object} `{left: x, right: x, top: x, bottom: x, z: x}`\n */\nTrueSizedLayoutDockHelper.prototype.get = function () {\n    return this._data;\n};\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 934,
    "kind": "function",
    "name": "TrueSizedLayoutDockHelper",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~TrueSizedLayoutDockHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": "{TrueSizedLayoutDockHelper}",
    "description": "",
    "lineNumber": 22,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": ""
      },
      {
        "tagName": "@alias",
        "tagValue": "module:LayoutDockHelper"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "LayoutContext"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "layout-context"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "additional options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options.margins",
        "description": "margins to start out with (default: 0px)"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.translateZ",
        "description": "z-index to use when translating objects (default: 0)"
      }
    ],
    "return": null
  },
  {
    "__docId__": 935,
    "kind": "function",
    "name": "parse",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~parse",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Parses the layout-rules based on a JSON data object.\n\n**Example:**\n\n```JSON\n[\n  ['top', 'header', 50],\n  ['bottom', 'footer', 50, 10], // z-index: 10\n  ['margins', [10, 5]], // marginate remaining space: 10px top/bottom, 5px left/right\n  ['fill', 'content']\n]\n```",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "data",
        "description": "JSON object"
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 936,
    "kind": "function",
    "name": "top",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~top",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Dock the node to the top. Sizes can also be specified as ~size, which makes them truesizes",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "LayoutNode",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "node",
        "description": "layout-node to dock, when omitted the `height` argument argument is used for padding"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "of the node. If number, draws only one dimension and leaves the other one undefined"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "z-index to use for the node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": "the space inserted before this item, defaults to 0"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "extraTranslation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TrueSizedLayoutDockHelper"
      ],
      "spread": false,
      "description": "this"
    },
    "ignore": true
  },
  {
    "__docId__": 937,
    "kind": "function",
    "name": "left",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~left",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Dock the node to the left. Sizes can also be specified as ~size, which makes them truesizes",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "LayoutNode",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "node",
        "description": "layout-node to dock, when omitted the `width` argument argument is used for padding"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "of the node. If number, draws only one dimension and leaves the other one undefined"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "z-index to use for the node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": "the space inserted before this item, defaults to 0"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "extraTranslation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TrueSizedLayoutDockHelper"
      ],
      "spread": false,
      "description": "this"
    },
    "ignore": true
  },
  {
    "__docId__": 938,
    "kind": "function",
    "name": "bottom",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~bottom",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Dock the node to the bottom. Sizes can also be specified as ~size, which makes them truesizes",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "LayoutNode",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "node",
        "description": "layout-node to dock, when omitted the `height` argument argument is used for padding"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "of the node. If number, draws only one dimension and leaves the other one undefined"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "z",
        "description": "z-index to use for the node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": "the space inserted before this item, defaults to 0"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "extraTranslation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TrueSizedLayoutDockHelper"
      ],
      "spread": false,
      "description": "this"
    },
    "ignore": true
  },
  {
    "__docId__": 939,
    "kind": "function",
    "name": "right",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~right",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Dock the node to the right. Sizes can also be specified as ~size, which makes them truesizes",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "LayoutNode",
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "node",
        "description": "layout-node to dock, when omitted the `width` argument argument is used for padding"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "of the node. If number, draws only one dimension and leaves the other one undefined"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "this._data.z",
        "description": "z-index to use for the node"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "space",
        "description": "the space inserted before this item, defaults to 0"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "extraTranslation",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TrueSizedLayoutDockHelper"
      ],
      "spread": false,
      "description": "this"
    },
    "ignore": true
  },
  {
    "__docId__": 940,
    "kind": "function",
    "name": "fill",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~fill",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Fills the node to the remaining content.",
    "lineNumber": 194,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "otherSpecs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TrueSizedLayoutDockHelper"
      ],
      "spread": false,
      "description": "this"
    },
    "ignore": true
  },
  {
    "__docId__": 941,
    "kind": "function",
    "name": "getFillSize",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~getFillSize",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 942,
    "kind": "function",
    "name": "margins",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~margins",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Applies indent margins to the remaining content.",
    "lineNumber": 215,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "margins",
        "description": "margins shorthand (e.g. '5', [10, 10], [5, 10, 5, 10])"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "TrueSizedLayoutDockHelper"
      ],
      "spread": false,
      "description": "this"
    },
    "ignore": true
  },
  {
    "__docId__": 943,
    "kind": "function",
    "name": "_resolveSingleSize",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~_resolveSingleSize",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 944,
    "kind": "function",
    "name": "_addTranslations",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~_addTranslations",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "params": [
      {
        "name": "translation1",
        "types": [
          "*"
        ]
      },
      {
        "name": "translation2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 945,
    "kind": "function",
    "name": "_ensureTrueSize",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~_ensureTrueSize",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 946,
    "kind": "function",
    "name": "_setupAccordingToDimension",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~_setupAccordingToDimension",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 239,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "dim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 947,
    "kind": "function",
    "name": "get",
    "memberof": "src/layout/TrueSizedLayoutDockHelper.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/layout/TrueSizedLayoutDockHelper.js~get",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/layout/TrueSizedLayoutDockHelper.js",
    "importStyle": null,
    "description": "Gets the current left/right/top/bottom/z bounds used by the dock-helper.",
    "lineNumber": 262,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "`{left: x, right: x, top: x, bottom: x, z: x}`"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 948,
    "kind": "file",
    "name": "src/main.js",
    "content": "/**\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\nexport * from './core/App.js';\nexport * from './core/View.js';\nexport * from './core/Router.js';\nexport * from './core/Controller.js';\nexport * from './data/Snapshot.js';\nexport * from './data/DataSource.js';\nexport * from './data/PrioritisedArray.js';\nexport * from './data/PrioritisedObject.js';\nexport * from './data/datasources/FirebaseDataSource.js';\nexport * from './data/datasources/SharePointDataSource.js';\nexport * from './data/datasources/SharePoint/DataModelGenerator.js';\nexport * from './data/datasources/SharePoint/SharePointSnapshot.js';\nexport * from './layout/Decorators.js';\nexport * from './routers/ArvaRouter.js';\nexport * from './utils/di/Decorators.js';\nexport * from './utils/hotfixes/Polyfills.js';\nexport * from './utils/hotfixes/IESupport.js';\nexport * from './utils/hotfixes/FamousKeyboardOffset.js';\nexport * from './utils/hotfixes/DisableTextSelection.js';\nexport * from './utils/CombineOptions.js';\nexport * from './utils/DialogManager.js';\nexport * from './utils/ImageLoader.js';\nexport * from './utils/Injection.js';\nexport * from './utils/Limiter.js';\nexport * from './utils/ObjectHelper.js';\nexport * from './utils/Throttler.js';\nexport * from './components/DataBoundScrollView.js';",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/main.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 949,
    "kind": "file",
    "name": "src/routers/ArvaRouter.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport isEqual                      from 'lodash/isEqual';\nimport {Router}                     from '../core/Router.js';\nimport {provide}                    from '../utils/di/Decorators.js';\nimport Easing                       from 'famous/transitions/Easing.js';\nimport AnimationController          from 'famous-flex/AnimationController.js';\nimport Transform                    from 'famous/core/Transform.js';\n\n/**\n * Emits the event 'routechange' with {url,controller,controllerObject,method,keys,values} when the route has changed\n */\n@provide(Router)\nexport class ArvaRouter extends Router {\n\n    routes = {};\n    route = {};\n    previousRoute = {};\n    routeStack = [];\n    decode = decodeURIComponent;\n    defaultController = 'Home';\n    defaultMethod = 'Index';\n\n    constructor() {\n        super();\n        if (window === null) {\n            return;\n        }\n        window.addEventListener('hashchange', this.run.bind(this));\n\n        this.routeStack = [];\n        this.decode = decodeURIComponent;\n\n        window.addEventListener('hashchange', this.run.bind(this));\n        this._setupNativeBackButtonListener();\n    }\n\n    /**\n     * Sets the initial controller and method to be activated whenever the controllers are activated.\n     * @param {Controller|Function|String} controller Default controller instance, controller constructor, or controller name to go to.\n     * @param {String} method Default method to call in given controller.\n     * @returns {void}\n     */\n    setDefault(controller, method = null) {\n        this.defaultController = this._getControllerName(controller);\n\n        if (method !== null) {\n            this.defaultMethod = method;\n        }\n    }\n\n    /**\n     * Sets the animation specs object for use by the famous-flex AnimationController.\n     * @param {Object} specs Animation specs, keyed by target controller.\n     * @returns {void}\n     */\n    setControllerSpecs(specs) {\n        this.specs = specs;\n    }\n\n    /**\n     * Triggers navigation to one of the controllers\n     * @param {Controller|Function|String} controller The controller instance, controller constructor, or controller name to go to.\n     * @param {String} method The method to call in given controller.\n     * @param {Object} params Dictionary of key-value pairs containing named arguments (i.e. {id: 1, test: \"yes\"})\n     * @returns {void}\n     */\n    go(controller, method, params = null) {\n\n        let controllerName = this._getControllerName(controller);\n        let routeRoot = controllerName.replace('Controller', '');\n\n        let hash = '#' + (routeRoot.length > 0 ? '/' + routeRoot : '') + ('/' + method);\n        if (params !== null) {\n            for (let i = 0; i < Object.keys(params).length; i++) {\n                let key = Object.keys(params)[i];\n                hash += i == 0 ? '?' : '&';\n                hash += (key + '=' + params[key]);\n            }\n        }\n\n        if (history.pushState) {\n            history.pushState(null, null, hash);\n        }\n\n        this.run();\n    }\n\n    /**\n     * Returns an object containing the current route.\n     * @returns {{controller: *, method: (*), params: {}}}\n     */\n    getRoute() {\n        let currentRoute = {\n            controller: this.route.controller,\n            method: this.route.method,\n            params: {}\n        };\n\n        for (let index in this.route.keys) {\n            currentRoute.params[this.route.keys[index]] = this.route.values[index];\n        }\n\n        return currentRoute;\n    }\n\n    /**\n     * Registers a single controller.\n     * @param {String} route Route to trigger handler on.\n     * @param {Object} handlers\n     * @param {Function} handler.enter Method to call on entering a route.\n     * @param {Function} handler.leave Method to call on when leaving a route.\n     * @returns {void}\n     */\n    add(route, { enter, leave }, controller) {\n        let pieces = route.split('/'),\n            rules = this.routes;\n\n        for (let i = 0; i < pieces.length; ++i) {\n            let piece = pieces[i],\n                name = piece[0] === ':' ? ':' : piece;\n\n            rules = rules[name] || (rules[name] = {});\n\n            if (name === ':') {\n                rules['@name'] = piece.slice(1);\n            }\n        }\n\n        rules['enter'] = enter;\n        rules['leave'] = leave;\n        rules['controller'] = controller;\n\n    }\n\n    /**\n     * On a route change, calls the corresponding controller method with the given parameter values.\n     * @returns {Boolean} Whether the current route was successfully ran.\n     */\n    run() {\n        let url = window.location.hash.replace('#', '');\n\n        if (url !== '') {\n            url = url.replace('/?', '?');\n            url[0] === '/' && (url = url.slice(1));\n            url.slice(-1) === '/' && (url = url.slice(0, -1));\n        }\n\n        let rules = this.routes,\n            querySplit = url.split('?'),\n            pieces = querySplit[0].split('/'),\n            values = [],\n            keys = [],\n            params = [],\n            method = '';\n        for (let piece in pieces) {\n            if (pieces[piece].indexOf('=') > -1) {\n                let splitted = pieces[piece].split('=');\n                pieces[piece] = splitted[0];\n                querySplit.push(pieces[piece] + '=' + splitted[1]);\n            }\n        }\n\n        let rule = null;\n        let controller;\n\n        /* if there is no controller reference, assume we have hit the default Controller */\n        if (pieces.length === 1 && pieces[0].length === 0) {\n            pieces[0] = this.defaultController;\n            pieces.push(this.defaultMethod);\n        } else if (pieces.length === 1 && pieces[0].length > 0) {\n            pieces.unshift(this.defaultController);\n        }\n\n        controller = pieces[0];\n\n        /* Parse the non-query portion of the URL */\n        for (let i = 0; i < pieces.length && rules; ++i) {\n            let piece = this.decode(pieces[i]);\n            rule = rules[piece];\n\n            if (!rule && (rule = rules[':'])) {\n                method = piece;\n            }\n\n            rules = rules[piece];\n        }\n\n        (function parseQuery(q) {\n            let query = q.split('&');\n\n            for (let i = 0; i < query.length; ++i) {\n                let nameValue = query[i].split('=');\n\n                if (nameValue.length > 1) {\n                    let key = nameValue[0];\n                    let value = this.decode(nameValue[1]);\n                    keys.push(key);\n                    values.push(value);\n                    params[key] = value;\n                }\n            }\n        }).call(this, querySplit.length > 1 ? querySplit[1] : '');\n\n        if (rule && rule['enter']) {\n\n            /* Push current route to the history stack for later use */\n            let previousRoute = this.routeStack.length ? this.routeStack[this.routeStack.length - 1] : undefined;\n            let currentRoute = {\n                url,\n                keys,\n                method,\n                values,\n                params,\n                controller,\n                controllerObject: rule['controller']\n            };\n\n            this.route = currentRoute;\n\n            if (previousRoute) {\n                if (currentRoute.controllerObject !== previousRoute.controllerObject) {\n                    this.routes[previousRoute.controller][':']['leave'](currentRoute);\n                }\n            }\n            currentRoute.spec = previousRoute ? this._getAnimationSpec(previousRoute, currentRoute) : (this._initialSpec || {});\n\n            /* Set the previousRoute and the history stack */\n            this.previousRoute = this.routeStack[this.routeStack.length -1];\n            this._setHistory(currentRoute);\n\n            this._executeRoute(rule, currentRoute);\n\n            return true;\n        } else {\n            console.log(`Controller ${controller} doesn\\'t exist!`);\n        }\n\n        return false;\n    }\n\n    setInitialSpec(spec) {\n        this._initialSpec = spec;\n    }\n\n    setBackButtonEnabled(enabled) {\n        this._backButtonEnabled = enabled;\n    }\n\n    isBackButtonEnabled() {\n        return this._backButtonEnabled;\n    }\n\n    /**\n     * Return the previous known route, or default route if no route stack is present\n     * @returns {*}\n     */\n    getPreviousRoute() {\n        return this.previousRoute;\n    }\n\n    /**\n     * @param {String} fallbackController Determines which controller to go to when no previous route exists\n     * @param {String} fallbackMethod Determines which method to go to when no previous route exists\n     * @param {Object} fallbackParams Sets the parameters to use with the above fallback route\n     */\n    goBackInHistory(fallbackController = '', fallbackMethod = '', fallbackParams = null) {\n        /* Default behaviour: go back in history in the arva router */\n        let previousRoute = this.getPreviousRoute();\n        this.routeStack = this.routeStack.slice(0, this.routeStack.length - 2);\n        if (previousRoute) {\n            this.go(previousRoute.controller, previousRoute.method, previousRoute.params || null);\n        } else {\n            this.go(fallbackController, fallbackMethod, fallbackParams);\n        }\n    }\n\n    _setupNativeBackButtonListener() {\n        this.setBackButtonEnabled(true);\n        document.addEventListener(\"backbutton\", (e) => {\n            if (!this.isBackButtonEnabled()) {\n                e.preventDefault();\n            } else {\n                this.goBackInHistory();\n            }\n        }, false);\n    }\n\n    /**\n     * Executes the controller handler associated with a given route, passing the route as a parameter.\n     * @param {Object} rule Rule handler to execute.\n     * @param {Object} route Route object to pass as parameter.\n     * @returns {void}\n     * @private\n     */\n    _executeRoute(rule, route) {\n        /* Make the controller active for current scope */\n        if (rule['enter'](route)) {\n            this.emit('routechange', route);\n        }\n    }\n\n    /**\n     * Checks if the current route is already present in the history stack, and if so removes all entries after\n     * and including the first occurrence. It will then append the current route to the history stack.\n     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.\n     * @returns {void}\n     * @private\n     */\n    _setHistory(currentRoute) {\n        for (let i = 0; i < this.routeStack.length; i++) {\n            let previousRoute = this.routeStack[i];\n            if (currentRoute.controller === previousRoute.controller &&\n                currentRoute.method === previousRoute.method &&\n                isEqual(currentRoute.values, previousRoute.values)) {\n                this.routeStack.splice(i, this.routeStack.length - i);\n                break;\n            }\n        }\n\n        this.routeStack.push(currentRoute);\n    }\n\n    /**\n     * CheckS whether a route is already present in the history stack.\n     * @param {Object} currentRoute Route object containing url, controller, method, keys, and values.\n     * @returns {Boolean} Whether the route has been visited previously.\n     * @private\n     */\n    _hasVisited(currentRoute) {\n        for (let i = 0; i < this.routeStack.length; i++) {\n            let previousRoute = this.routeStack[i];\n            if (currentRoute.controller === previousRoute.controller &&\n                currentRoute.method === previousRoute.method &&\n                isEqual(currentRoute.values, previousRoute.values)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns the animation direction for a route change within the same controller\n     * @param currentRoute\n     * @returns {string}\n     * @private\n     */\n    _getRouteDirection(currentRoute){\n        return this._hasVisited(currentRoute) ? 'previous' : 'next';\n    }\n\n    /**\n     * Returns the Famous-Flex animation spec for two given routes. Takes its spec inputs from the specs set in\n     * router.setControllerSpecs(), which is called from the app constructor.\n     * @param {Object} previousRoute Previous route object containing url, controller, method, keys, and values.\n     * @param {Object} currentRoute Current route object containing url, controller, method, keys, and values.\n     * @returns {Object} A spec object if one is found, or an empty object otherwise.\n     * @private\n     */\n    _getAnimationSpec(previousRoute, currentRoute) {\n        let fromController = previousRoute.controller;\n        let toController = currentRoute.controller;\n\n        if (fromController.indexOf('Controller') === -1) {\n            fromController += 'Controller';\n        }\n        if (toController.indexOf('Controller') === -1) {\n            toController += 'Controller';\n        }\n\n        /* We're on exactly the same page as before */\n        if (currentRoute.controller === previousRoute.controller &&\n            currentRoute.method === previousRoute.method &&\n            isEqual(currentRoute.values, previousRoute.values)) {\n            return {};\n        }\n\n        /* Same controller, different method or different parameters */\n        if (currentRoute.controller === previousRoute.controller) {\n\n            let direction = this._getRouteDirection(currentRoute);\n            if (this.specs && this.specs[fromController] && this.specs[fromController].methods) {\n                return this.specs[fromController].methods[direction];\n            }\n\n            /* Default method-to-method animations, used only if not overridden in app's controllers spec. */\n            let defaults = {\n                next: {\n                    hide: {\n                        animation: () =>\n                            (\n                                {transform: Transform.translate(0, 0, -1000)}\n                            ),\n                    },\n                    show: {animation: AnimationController.Animation.Slide.Left}\n                },\n                previous: {\n                    show: {\n                        animation: () => ({\n                            transform: Transform.translate(0, 0, -1000)\n                        })\n                    },\n                    hide: {animation: AnimationController.Animation.Slide.Right}\n                }\n            };\n            return defaults[direction];\n        }\n\n        /* Different controller */\n        if (this.specs && this.specs.hasOwnProperty(toController) && this.specs[toController].controllers) {\n            let controllerSpecs = this.specs[toController].controllers;\n            for (let specIndex in controllerSpecs) {\n                let spec = controllerSpecs[specIndex];\n                if (spec.activeFrom && spec.activeFrom.indexOf(fromController) !== -1) {\n                    return spec;\n                }\n            }\n        }\n    }\n\n    /**\n     * Extracts a controller name from a given string, constructor, or controller instance. 'Controller' part is not included in the returned name.\n     * E.g. _getControllerName(HomeController) -> 'Home'.\n     * @param {Function|Object|String} controller String, constructor, or controller instance.\n     * @returns {String} Name of the controller\n     * @private\n     */\n    _getControllerName(controller) {\n        if (typeof controller === 'string') {\n            return controller.replace('Controller', '');\n        } else if (typeof controller === 'function' && Object.getPrototypeOf(controller).constructor.name == 'Function') {\n            /* The _name property is set by babel-plugin-transform-runtime-constructor-name.\n             * This is done so Controller class names remain available in minimised code. */\n            let controllerName = controller._name || controller.name;\n            return controllerName.replace('Controller', '');\n        } else {\n            return typeof controller === 'object' ?\n                Object.getPrototypeOf(controller).constructor.name.replace('Controller', '') : typeof controller;\n        }\n    }\n\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/routers/ArvaRouter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 950,
    "kind": "class",
    "name": "ArvaRouter",
    "memberof": "src/routers/ArvaRouter.js",
    "static": true,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/routers/ArvaRouter.js",
    "importStyle": "{ArvaRouter}",
    "description": "Emits the event 'routechange' with {url,controller,controllerObject,method,keys,values} when the route has changed",
    "lineNumber": 21,
    "decorators": [
      {
        "name": "provide",
        "arguments": "(Router)"
      }
    ],
    "interface": false,
    "extends": [
      "src/core/Router.js~Router"
    ]
  },
  {
    "__docId__": 951,
    "kind": "member",
    "name": "routes",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#routes",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 952,
    "kind": "member",
    "name": "route",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#route",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 953,
    "kind": "member",
    "name": "previousRoute",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#previousRoute",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 954,
    "kind": "member",
    "name": "routeStack",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#routeStack",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 955,
    "kind": "member",
    "name": "decode",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#decode",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 956,
    "kind": "member",
    "name": "defaultController",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#defaultController",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 957,
    "kind": "member",
    "name": "defaultMethod",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#defaultMethod",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 958,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true
  },
  {
    "__docId__": 961,
    "kind": "method",
    "name": "setDefault",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#setDefault",
    "access": "public",
    "description": "Sets the initial controller and method to be activated whenever the controllers are activated.",
    "lineNumber": 51,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Controller",
          "Function",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "Default controller instance, controller constructor, or controller name to go to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "Default method to call in given controller."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 964,
    "kind": "method",
    "name": "setControllerSpecs",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#setControllerSpecs",
    "access": "public",
    "description": "Sets the animation specs object for use by the famous-flex AnimationController.",
    "lineNumber": 64,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "specs",
        "description": "Animation specs, keyed by target controller."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 965,
    "kind": "member",
    "name": "specs",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#specs",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 966,
    "kind": "method",
    "name": "go",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#go",
    "access": "public",
    "description": "Triggers navigation to one of the controllers",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Controller",
          "Function",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "The controller instance, controller constructor, or controller name to go to."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "method",
        "description": "The method to call in given controller."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Dictionary of key-value pairs containing named arguments (i.e. {id: 1, test: \"yes\"})"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 967,
    "kind": "method",
    "name": "getRoute",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#getRoute",
    "access": "public",
    "description": "Returns an object containing the current route.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{controller: *, method: (*), params: {}}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{controller: *, method: (*), params: {}}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 968,
    "kind": "method",
    "name": "add",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#add",
    "access": "public",
    "description": "Registers a single controller.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "Route to trigger handler on."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "handlers",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler.enter",
        "description": "Method to call on entering a route."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "handler.leave",
        "description": "Method to call on when leaving a route."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 969,
    "kind": "method",
    "name": "run",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#run",
    "access": "public",
    "description": "On a route change, calls the corresponding controller method with the given parameter values.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the current route was successfully ran."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the current route was successfully ran."
    },
    "params": []
  },
  {
    "__docId__": 972,
    "kind": "method",
    "name": "setInitialSpec",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#setInitialSpec",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "params": [
      {
        "name": "spec",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 973,
    "kind": "member",
    "name": "_initialSpec",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_initialSpec",
    "access": "private",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "setBackButtonEnabled",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#setBackButtonEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 253,
    "undocument": true,
    "params": [
      {
        "name": "enabled",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 975,
    "kind": "member",
    "name": "_backButtonEnabled",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_backButtonEnabled",
    "access": "private",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 976,
    "kind": "method",
    "name": "isBackButtonEnabled",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#isBackButtonEnabled",
    "access": "public",
    "description": null,
    "lineNumber": 257,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 977,
    "kind": "method",
    "name": "getPreviousRoute",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#getPreviousRoute",
    "access": "public",
    "description": "Return the previous known route, or default route if no route stack is present",
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 978,
    "kind": "method",
    "name": "goBackInHistory",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#goBackInHistory",
    "access": "public",
    "description": "",
    "lineNumber": 274,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fallbackController",
        "description": "Determines which controller to go to when no previous route exists"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "fallbackMethod",
        "description": "Determines which method to go to when no previous route exists"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "fallbackParams",
        "description": "Sets the parameters to use with the above fallback route"
      }
    ],
    "return": null
  },
  {
    "__docId__": 980,
    "kind": "method",
    "name": "_setupNativeBackButtonListener",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_setupNativeBackButtonListener",
    "access": "private",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 981,
    "kind": "method",
    "name": "_executeRoute",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_executeRoute",
    "access": "private",
    "description": "Executes the controller handler associated with a given route, passing the route as a parameter.",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rule",
        "description": "Rule handler to execute."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": "Route object to pass as parameter."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 982,
    "kind": "method",
    "name": "_setHistory",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_setHistory",
    "access": "private",
    "description": "Checks if the current route is already present in the history stack, and if so removes all entries after\nand including the first occurrence. It will then append the current route to the history stack.",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": "Route object containing url, controller, method, keys, and values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 983,
    "kind": "method",
    "name": "_hasVisited",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_hasVisited",
    "access": "private",
    "description": "CheckS whether a route is already present in the history stack.",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Whether the route has been visited previously."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": "Route object containing url, controller, method, keys, and values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Whether the route has been visited previously."
    }
  },
  {
    "__docId__": 984,
    "kind": "method",
    "name": "_getRouteDirection",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_getRouteDirection",
    "access": "private",
    "description": "Returns the animation direction for a route change within the same controller",
    "lineNumber": 355,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 985,
    "kind": "method",
    "name": "_getAnimationSpec",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_getAnimationSpec",
    "access": "private",
    "description": "Returns the Famous-Flex animation spec for two given routes. Takes its spec inputs from the specs set in\nrouter.setControllerSpecs(), which is called from the app constructor.",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} A spec object if one is found, or an empty object otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "previousRoute",
        "description": "Previous route object containing url, controller, method, keys, and values."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "currentRoute",
        "description": "Current route object containing url, controller, method, keys, and values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "A spec object if one is found, or an empty object otherwise."
    }
  },
  {
    "__docId__": 986,
    "kind": "method",
    "name": "_getControllerName",
    "memberof": "src/routers/ArvaRouter.js~ArvaRouter",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routers/ArvaRouter.js~ArvaRouter#_getControllerName",
    "access": "private",
    "description": "Extracts a controller name from a given string, constructor, or controller instance. 'Controller' part is not included in the returned name.\nE.g. _getControllerName(HomeController) -> 'Home'.",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String} Name of the controller"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function",
          "Object",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "controller",
        "description": "String, constructor, or controller instance."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Name of the controller"
    }
  },
  {
    "__docId__": 987,
    "kind": "file",
    "name": "src/surfaces/AudioSurface.js",
    "content": "import FamousSurface from 'famous/core/Surface.js';\n\n/**\n * A class for making html5 audio elements\n *   targets inside an Arva application, containing a renderable audio\n *   fragment. Like an HTML div, it can accept internal markup,\n *   properties, classes, and handle events.\n *\n * @class AudioSurface\n * @constructor\n *\n * @param {Object} [options] default option overrides\n * @param {Array.Number} [options.size] [width, height] in pixels\n * @param {Array.string} [options.classes] CSS classes to set on target div\n * @param {Array} [options.properties] string dictionary of CSS properties to set on target div\n * @param {Array} [options.attributes] string dictionary of HTML attributes to set on target div\n * @param {string} [options.content] inner (HTML) content of surface\n */\nexport class AudioSurface extends FamousSurface {\n\n    get elementType() {\n        return 'audio';\n    }\n\n    get elementClass() {\n        return 'famous-surface';\n    }\n\n    get bufferLength() {\n        return this._bufferLength || 0;\n    }\n\n    get volume() {\n      return this._volume;\n    }\n\n    get analyserActive() {\n      return this._analyserId!=null;\n    }\n\n    constructor(options = { properties: {}}) {\n      super();\n      this.streamUrl = options.properties.url || '';\n      this._value = '';\n      this._name = options.name || '';\n      this._bufferLength = 0;\n\n      this._handlePlaybackEvents();\n    }\n\n    _handlePlaybackEvents() {\n      this.on('click', this.focus.bind(this));\n      this.on('emptied', () => { if (this.analyserActive) this.stopAnalyser(); });\n      this.on('ended', () => { if (this.analyserActive) this.stopAnalyser(); });\n      this.on('error', () => { if (this.analyserActive) this.stopAnalyser(); });\n      this.on('pause', () => { if (this.analyserActive) this.stopAnalyser(); });\n    }\n\n    focus() {\n        if (this._currentTarget)\n            this._currentTarget.focus();\n        return this;\n    }\n\n    blur() {\n        if (this._currentTarget)\n            this._currentTarget.blur();\n        return this;\n    }\n\n    setName() {\n        this._name = str;\n        this._contentDirty = true;\n        return this;\n    }\n\n    getName() {\n        return this._name;\n    }\n\n    /**\n     * Sets audio source from url\n     */\n    setUrl(url) {\n      this._element.setAttribute('src', url);\n    }\n\n    /**\n     * Starts playing the audio\n     */\n    play() {\n      this._element.play();\n    }\n\n    /**\n     * Re-loads the audio element\n     */\n    pause() {\n      this._element.pause();\n    }\n\n    /**\n     * Re-loads the audio element\n     */\n    load() {\n      this._element.load();\n    }\n\n    /**\n     * Start emitting audio frames to subscribers of this surface\n     */\n    startAnalyser(options = {}) {\n      let audioContext = new (window.AudioContext || window.webkitAudioContext); // this is because it's not been standardised accross browsers yet.\n      this._analyser = audioContext.createAnalyser();\n\n      this._analyser.fftSize = options.fftSize || 256;\n      this._analyser.smoothingTimeConstant = options.smoothingTimeConstant || 0.8;\n\n      var source = audioContext.createMediaElementSource(this._element); // this is where we hook up the <audio> element\n      source.connect(this._analyser);\n      this._analyser.connect(audioContext.destination);\n\n      this._bufferLength = this._analyser.frequencyBinCount;\n      this._streamData = new Uint8Array(this._bufferLength); // This just means we will have 128 \"bins\" (always half the analyzer.fftsize value), each containing a number between 0 and 255.\n\n      this._loopAnalyser();\n    }\n\n    /**\n     * Stop emitting audio frames to subscribers of this surface\n     */\n    stopAnalyser() {\n      cancelAnimationFrame(this._analyserId);\n      delete this._analyserId;\n    }\n\n    /**\n     * Emit audio frames to subscribers of this surface\n     * @private\n     */\n    _loopAnalyser() {\n      this._analyser.getByteFrequencyData(this._streamData);\n      var total = 0;\n      for (var i = 0; i < 80; i++) { // get the volume from the first 80 bins, else it gets too loud with treble\n          total += this._streamData[i];\n      }\n      this._volume = total;\n\n      this.emit('frequencydata', this._streamData);\n      this._analyserId = requestAnimationFrame(this._loopAnalyser.bind(this));\n    }\n\n    /**\n     * Re-loads the audio element\n     * @private\n     */\n    deploy() {\n      if (this.streamUrl) {\n        this._element.setAttribute('src', this.streamUrl);\n      }\n      this._element.crossOrigin = 'anonymous';\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/AudioSurface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 988,
    "kind": "class",
    "name": "AudioSurface",
    "memberof": "src/surfaces/AudioSurface.js",
    "static": true,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/AudioSurface.js",
    "importStyle": "{AudioSurface}",
    "description": "A class for making html5 audio elements\n  targets inside an Arva application, containing a renderable audio\n  fragment. Like an HTML div, it can accept internal markup,\n  properties, classes, and handle events.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AudioSurface"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "default option overrides"
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.size",
        "description": "[width, height] in pixels"
      },
      {
        "nullable": null,
        "types": [
          "Array.string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.classes",
        "description": "CSS classes to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.properties",
        "description": "string dictionary of CSS properties to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.attributes",
        "description": "string dictionary of HTML attributes to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.content",
        "description": "inner (HTML) content of surface"
      }
    ],
    "interface": false,
    "extends": [
      "famous/core/Surface.js~FamousSurface"
    ]
  },
  {
    "__docId__": 989,
    "kind": "get",
    "name": "elementType",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#elementType",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 990,
    "kind": "get",
    "name": "elementClass",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#elementClass",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 991,
    "kind": "get",
    "name": "bufferLength",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#bufferLength",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 992,
    "kind": "get",
    "name": "volume",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#volume",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 993,
    "kind": "get",
    "name": "analyserActive",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#analyserActive",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 994,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 995,
    "kind": "member",
    "name": "streamUrl",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#streamUrl",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 996,
    "kind": "member",
    "name": "_value",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_value",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 997,
    "kind": "member",
    "name": "_name",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_name",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 998,
    "kind": "member",
    "name": "_bufferLength",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_bufferLength",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 999,
    "kind": "method",
    "name": "_handlePlaybackEvents",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_handlePlaybackEvents",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "focus",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#focus",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1001,
    "kind": "method",
    "name": "blur",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#blur",
    "access": "public",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "setName",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#setName",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1004,
    "kind": "member",
    "name": "_contentDirty",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_contentDirty",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1005,
    "kind": "method",
    "name": "getName",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#getName",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1006,
    "kind": "method",
    "name": "setUrl",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#setUrl",
    "access": "public",
    "description": "Sets audio source from url",
    "lineNumber": 84,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1007,
    "kind": "method",
    "name": "play",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#play",
    "access": "public",
    "description": "Starts playing the audio",
    "lineNumber": 91,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1008,
    "kind": "method",
    "name": "pause",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#pause",
    "access": "public",
    "description": "Re-loads the audio element",
    "lineNumber": 98,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1009,
    "kind": "method",
    "name": "load",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#load",
    "access": "public",
    "description": "Re-loads the audio element",
    "lineNumber": 105,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1010,
    "kind": "method",
    "name": "startAnalyser",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#startAnalyser",
    "access": "public",
    "description": "Start emitting audio frames to subscribers of this surface",
    "lineNumber": 112,
    "params": [
      {
        "name": "options",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1011,
    "kind": "member",
    "name": "_analyser",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_analyser",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1013,
    "kind": "member",
    "name": "_streamData",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_streamData",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1014,
    "kind": "method",
    "name": "stopAnalyser",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#stopAnalyser",
    "access": "public",
    "description": "Stop emitting audio frames to subscribers of this surface",
    "lineNumber": 132,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1015,
    "kind": "method",
    "name": "_loopAnalyser",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_loopAnalyser",
    "access": "private",
    "description": "Emit audio frames to subscribers of this surface",
    "lineNumber": 141,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1016,
    "kind": "member",
    "name": "_volume",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_volume",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1017,
    "kind": "member",
    "name": "_analyserId",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#_analyserId",
    "access": "private",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1018,
    "kind": "method",
    "name": "deploy",
    "memberof": "src/surfaces/AudioSurface.js~AudioSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/AudioSurface.js~AudioSurface#deploy",
    "access": "private",
    "description": "Re-loads the audio element",
    "lineNumber": 157,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1019,
    "kind": "file",
    "name": "src/surfaces/BgImageSurface.js",
    "content": "import FamousBgImageSurface from 'famous/surfaces/BgImageSurface.js';\n\nexport let BgImageSurface = FamousBgImageSurface;",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/BgImageSurface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1020,
    "kind": "variable",
    "name": "BgImageSurface",
    "memberof": "src/surfaces/BgImageSurface.js",
    "static": true,
    "longname": "src/surfaces/BgImageSurface.js~BgImageSurface",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/BgImageSurface.js",
    "importStyle": "{BgImageSurface}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "file",
    "name": "src/surfaces/Dropdown.js",
    "content": "/**\n * Created by lundfall on 12/07/2017.\n */\n\n/**\n * Created by lundfall on 21/09/16.\n */\nimport {\n    InputOption,\n    unwrapValue,\n    changeValue\n}                                   from '../utils/view/InputOption.js'\n\nimport {View}                       from 'arva-js/core/View.js';\nimport {flow, layout, event}        from 'arva-js/layout/Decorators.js';\nimport {combineOptions}             from 'arva-js/utils/CombineOptions.js';\nimport {onOptionChange}             from '../utils/view/OptionObserver.js'\n\nimport {Surface}                    from '../surfaces/Surface.js';\n\n\nexport class Dropdown extends Surface {\n    elementType = 'select';\n\n    constructor(options){\n        super(options);\n        this.on('change', () => {\n            let optionChangeListeners = this.options[onOptionChange];\n            if(optionChangeListeners ){\n                let selectedItemIndex = this.options.selectedItemIndex = this._element.selectedIndex;\n                let selectedItem = this.options.selectedItem = this.options.items[selectedItemIndex];\n                if(optionChangeListeners.selectedItem){\n                    optionChangeListeners.selectedItem(selectedItem);\n                }\n                if(optionChangeListeners.selectedItemIndex){\n                    optionChangeListeners.selectedItemIndex(selectedItemIndex);\n                }\n            }\n        })\n    }\n\n    deploy (target) {\n        this.content = `${this.options.placeholder ? `<option value=\"\" disabled selected hidden>${this.options.placeholder}</option>` : ''}\n            ${this.options.items.map((item, index) => `<option value=${item.data} ${\n            index === this.options.selectedItemIndex\n                ? 'selected' : ''}>${item.text}</option>`)}`;\n        return super.deploy(target);\n    }\n\n    static with(options) {\n        let {selectedItemIndex} = options;\n        if (selectedItemIndex instanceof InputOption) {\n            if ((!options[onOptionChange] || !options[onOptionChange].selectedItemIndex)) {\n                let optionChangeListener = options[onOptionChange];\n                if (!optionChangeListener) {\n                    optionChangeListener = options[onOptionChange] = {};\n                }\n                optionChangeListener.selectedItemIndex = (changedValue) => selectedItemIndex[changeValue](changedValue);\n            }\n            options.selectedItemIndex = selectedItemIndex[unwrapValue]();\n        }\n        return super.with({\n            ...options,\n            selectedItem: options.selectedItemIndex ? options.items[options.selectedItemIndex] : options.items.find((item) => item.selected),\n            properties: {\n                overflow: 'hidden',\n                border: '1px solid rgba(0, 0, 0, 0.1)',\n                backgroundColor: 'white',\n                borderRadius: '4px',\n                padding: '0 0 0 16px',\n                outline: 'none',\n                /* Doesn't work for IE and firefox */\n                '-webkit-appearance': 'none',\n                ...options.properties\n            }\n        })\n    }\n\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/Dropdown.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1022,
    "kind": "class",
    "name": "Dropdown",
    "memberof": "src/surfaces/Dropdown.js",
    "static": true,
    "longname": "src/surfaces/Dropdown.js~Dropdown",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/Dropdown.js",
    "importStyle": "{Dropdown}",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/surfaces/Surface.js~Surface"
    ]
  },
  {
    "__docId__": 1023,
    "kind": "member",
    "name": "elementType",
    "memberof": "src/surfaces/Dropdown.js~Dropdown",
    "static": false,
    "longname": "src/surfaces/Dropdown.js~Dropdown#elementType",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1024,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/surfaces/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/Dropdown.js~Dropdown#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true
  },
  {
    "__docId__": 1025,
    "kind": "method",
    "name": "deploy",
    "memberof": "src/surfaces/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/Dropdown.js~Dropdown#deploy",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1026,
    "kind": "member",
    "name": "content",
    "memberof": "src/surfaces/Dropdown.js~Dropdown",
    "static": false,
    "longname": "src/surfaces/Dropdown.js~Dropdown#content",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1027,
    "kind": "method",
    "name": "with",
    "memberof": "src/surfaces/Dropdown.js~Dropdown",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/surfaces/Dropdown.js~Dropdown.with",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1028,
    "kind": "file",
    "name": "src/surfaces/InputSurface.js",
    "content": "/**\n * Created by lundfall on 12/07/2017.\n */\n\nimport FamousInputSurface from 'famous/surfaces/InputSurface.js';\nimport {onOptionChange} from '../utils/view/OptionObserver.js'\nimport {\n    InputOption,\n    unwrapValue,\n    changeValue\n} from '../utils/view/InputOption.js'\nimport {combineOptions} from 'arva-js/utils/CombineOptions.js';\n\nlet neutralAppearanceProperties = {\n    outline: 'none',\n    borderBottom: 'none',\n    borderTop: 'none',\n    borderLeft: 'none',\n    borderRight: 'none',\n    padding: '0 16px 0 16px'\n};\n\nexport class InputSurface extends FamousInputSurface {\n    static tabIndex = 1;\n\n    /**\n     * An InputSurface that will produce a HTML <input> tag, or similar\n     *   This extends the Surface class.\n     *\n     * @class InputSurface\n     * @extends Surface\n     * @constructor\n     * @param {Object} [options] overrides of default options\n     * @param {string} [options.placeholder] placeholder text hint that describes the expected value of an <input> element\n     * @param {string} [options.type] specifies the type of element to display (e.g. 'datetime', 'text', 'button', etc.)\n     * @param {string} [options.value] value of text\n     */\n    constructor(options = {}) {\n\n        super({\n            ...options,\n            attributes: {\n                ...options.attributes,\n                tabIndex: InputSurface.tabIndex++\n            }\n        });\n        this.on('paste', this._onFieldChange.bind(this));\n        this.on('input', this._onFieldChange.bind(this));\n        this.on('propertychange', this._onFieldChange.bind(this));\n        this.on('change', this._onFieldChange.bind(this));\n    }\n\n    static with(options) {\n        let newValue = options.value;\n        /* If the value is an instance of an InputOption, then we need to prepare for upward data-flow */\n        if (newValue instanceof InputOption) {\n            if ((!options[onOptionChange] || !options[onOptionChange].value)) {\n                let optionChangeListener = options[onOptionChange];\n                if (!optionChangeListener) {\n                    optionChangeListener = options[onOptionChange] = {};\n                }\n                optionChangeListener.value = (changedValue) => newValue[changeValue](changedValue);\n            }\n            options.value = newValue[unwrapValue]();\n        }\n        return super.with({...options, properties: {...neutralAppearanceProperties, ...options.properties}})\n    }\n\n    setValue(value, emitEvent = false) {\n\n        if (this.options.isFormField) {\n            this._setBorderBottomColor(value);\n        }\n        let result = super.setValue(...arguments);\n        if (emitEvent) {\n            this._onNewValue(value);\n        } else {\n            this._notifyListenersIfApplicable();\n        }\n        return result;\n    }\n\n    focus() {\n        super.focus();\n        this.emit('focus');\n    }\n\n    blur() {\n        super.blur();\n        this.emit('blur');\n    }\n\n    _setBorderBottomColor(textInput) {\n        this.setProperties({borderBottom: `1px solid ${!textInput.length ? 'gray' : 'black'}`})\n\n    }\n\n    // TODO We should emit a change event instead, and prevent the parent change event. valueChange event is only emitted by SOME input components.\n    _onFieldChange() {\n        let currentValue = this.getValue();\n        if (currentValue !== this._value) {\n            this._onNewValue(currentValue);\n        }\n    }\n\n    _onNewValue(currentValue) {\n        if (this.options.emojiEnabled) {\n            currentValue = replaceEmojiAtEnd(currentValue);\n            this.setValue(currentValue);\n        }\n\n\n        this._value = currentValue;\n        if (this.options.isFormField) {\n            this._setBorderBottomColor(currentValue);\n        }\n        this.emit('valueChange', currentValue);\n\n        this._notifyListenersIfApplicable();\n    }\n\n    _notifyListenersIfApplicable() {\n        let optionChangeListeners = this.options[onOptionChange];\n        if (optionChangeListeners && optionChangeListeners.value) {\n            optionChangeListeners.value(this._value);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/InputSurface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1029,
    "kind": "variable",
    "name": "neutralAppearanceProperties",
    "memberof": "src/surfaces/InputSurface.js",
    "static": true,
    "longname": "src/surfaces/InputSurface.js~neutralAppearanceProperties",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/surfaces/InputSurface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"outline\": string, \"borderBottom\": string, \"borderTop\": string, \"borderLeft\": string, \"borderRight\": string, \"padding\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1030,
    "kind": "class",
    "name": "InputSurface",
    "memberof": "src/surfaces/InputSurface.js",
    "static": true,
    "longname": "src/surfaces/InputSurface.js~InputSurface",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/InputSurface.js",
    "importStyle": "{InputSurface}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "famous/surfaces/InputSurface.js~FamousInputSurface"
    ]
  },
  {
    "__docId__": 1031,
    "kind": "member",
    "name": "tabIndex",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "static": true,
    "longname": "src/surfaces/InputSurface.js~InputSurface.tabIndex",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1032,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#constructor",
    "access": "public",
    "description": "An InputSurface that will produce a HTML <input> tag, or similar\n  This extends the Surface class.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "InputSurface"
      },
      {
        "tagName": "@extends",
        "tagValue": "Surface"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "overrides of default options"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.placeholder",
        "description": "placeholder text hint that describes the expected value of an <input> element"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.type",
        "description": "specifies the type of element to display (e.g. 'datetime', 'text', 'button', etc.)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.value",
        "description": "value of text"
      }
    ]
  },
  {
    "__docId__": 1033,
    "kind": "method",
    "name": "with",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/surfaces/InputSurface.js~InputSurface.with",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1034,
    "kind": "method",
    "name": "setValue",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#setValue",
    "access": "public",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "emitEvent",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1035,
    "kind": "method",
    "name": "focus",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#focus",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1036,
    "kind": "method",
    "name": "blur",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#blur",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1037,
    "kind": "method",
    "name": "_setBorderBottomColor",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#_setBorderBottomColor",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "params": [
      {
        "name": "textInput",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1038,
    "kind": "method",
    "name": "_onFieldChange",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#_onFieldChange",
    "access": "private",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1039,
    "kind": "method",
    "name": "_onNewValue",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#_onNewValue",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "currentValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1040,
    "kind": "member",
    "name": "_value",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#_value",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1041,
    "kind": "method",
    "name": "_notifyListenersIfApplicable",
    "memberof": "src/surfaces/InputSurface.js~InputSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/InputSurface.js~InputSurface#_notifyListenersIfApplicable",
    "access": "private",
    "description": null,
    "lineNumber": 122,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1042,
    "kind": "file",
    "name": "src/surfaces/PushDownSurface.js",
    "content": "/**\n * Created by lundfall on 18/10/2016.\n */\n\nimport {Surface} from './Surface';\n\nexport class PushDownSurface extends Surface {\n    \n    elementClass = '';\n    \n    allocate(allocator) {\n        return allocator.allocate({type: this.elementType, insertFirst: true});\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/PushDownSurface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1043,
    "kind": "class",
    "name": "PushDownSurface",
    "memberof": "src/surfaces/PushDownSurface.js",
    "static": true,
    "longname": "src/surfaces/PushDownSurface.js~PushDownSurface",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/PushDownSurface.js",
    "importStyle": "{PushDownSurface}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/surfaces/Surface.js~Surface"
    ]
  },
  {
    "__docId__": 1044,
    "kind": "member",
    "name": "elementClass",
    "memberof": "src/surfaces/PushDownSurface.js~PushDownSurface",
    "static": false,
    "longname": "src/surfaces/PushDownSurface.js~PushDownSurface#elementClass",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1045,
    "kind": "method",
    "name": "allocate",
    "memberof": "src/surfaces/PushDownSurface.js~PushDownSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/PushDownSurface.js~PushDownSurface#allocate",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "allocator",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1046,
    "kind": "file",
    "name": "src/surfaces/Surface.js",
    "content": "/**\n * Created by lundfall on 12/07/2017.\n */\nimport FamousSurface    from 'famous/core/Surface.js';\nimport {optionMetaData} from '../utils/view/OptionObserver';\n\n/**\n * A base class for viewable content and event\n *   targets inside an Arva application, containing a renderable document\n *   fragment. Like an HTML div, it can accept internal markup,\n *   properties, classes, and handle events.\n *\n * @class Surface\n * @constructor\n *\n * @param {Object} [options] default option overrides\n * @param {Array.Number} [options.size] [width, height] in pixels\n * @param {Array.string} [options.classes] CSS classes to set on target div\n * @param {Array} [options.properties] string dictionary of CSS properties to set on target div\n * @param {Array} [options.attributes] string dictionary of HTML attributes to set on target div\n * @param {string} [options.content] inner (HTML) content of surface\n */\nlet existingWithFunction = FamousSurface.with;\nFamousSurface.with  = function (options) {\n    /* If the properties passed are options themselves, we make sure to destructure them in order to make sure that all\n    *  necessary listeners are registered */\n    if(options && options.properties && options.properties[optionMetaData]){\n        let intentionallyUnusedSpreadProperties = {...options.properties};\n    }\n    return existingWithFunction.call(this, options);\n};\n\nexport const Surface = FamousSurface;\n\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/Surface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1047,
    "kind": "variable",
    "name": "existingWithFunction",
    "memberof": "src/surfaces/Surface.js",
    "static": true,
    "longname": "src/surfaces/Surface.js~existingWithFunction",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/surfaces/Surface.js",
    "importStyle": null,
    "description": "A base class for viewable content and event\n  targets inside an Arva application, containing a renderable document\n  fragment. Like an HTML div, it can accept internal markup,\n  properties, classes, and handle events.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Surface"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "default option overrides"
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.size",
        "description": "[width, height] in pixels"
      },
      {
        "nullable": null,
        "types": [
          "Array.string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.classes",
        "description": "CSS classes to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.properties",
        "description": "string dictionary of CSS properties to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.attributes",
        "description": "string dictionary of HTML attributes to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.content",
        "description": "inner (HTML) content of surface"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1048,
    "kind": "function",
    "name": "with",
    "memberof": "src/surfaces/Surface.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/surfaces/Surface.js~with",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/surfaces/Surface.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1049,
    "kind": "variable",
    "name": "Surface",
    "memberof": "src/surfaces/Surface.js",
    "static": true,
    "longname": "src/surfaces/Surface.js~Surface",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/Surface.js",
    "importStyle": "{Surface}",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1050,
    "kind": "file",
    "name": "src/surfaces/WebGLSurface.js",
    "content": "import CanvasSurface from 'famous/surfaces/CanvasSurface.js'\nimport Timer from 'famous/utilities/Timer.js';\n\n/**\n * A class for making WebGL elements\n *   targets inside an Arva application, containing a renderable shader\n *   fragment. Like an HTML div, it can accept internal markup,\n *   properties, classes, and handle events.\n *\n * @class WebGLSurface\n * @constructor\n *\n * @param {Object} [options] default option overrides\n * @param {Array.Number} [options.size] [width, height] in pixels\n * @param {Array.string} [options.classes] CSS classes to set on target div\n * @param {Array} [options.properties] string dictionary of CSS properties to set on target div\n * @param {Array} [options.attributes] string dictionary of HTML attributes to set on target div\n * @param {string} [options.content] inner (HTML) content of surface\n */\nexport class WebGLSurface extends CanvasSurface {\n\n    constructor(options) {\n        if(!options.properties){\n            options.properties = {};\n        }\n        /* Force pointer events to be none in order to allow clicking underneath*/\n        options.properties = {pointerEvents: 'none'};\n\n        super(options);\n        this._parameters = {  start_time  : new Date().getTime(),\n            time        : 0,\n            screenWidth : 0,\n            screenHeight: 0 };\n\n        this.on('deploy', () => {\n            let vertex_shader = `\n              attribute vec3 position;\n\t\t\t        void main() {\n\t\t\t\t        gl_Position = vec4( position, 1.0 );\n              }`;\n              \n            let fragment_shader = this.options.shader;\n            let canvas = this._element;\n\n\n\n            // Initialise WebGL\n\n\n            this._gl = canvas.getContext( 'experimental-webgl' );\n\n\n            // Create Vertex buffer (2 triangles)\n\n            this._buffer = this._gl.createBuffer();\n            this._gl.bindBuffer( this._gl.ARRAY_BUFFER, this._buffer );\n            this._gl.bufferData( this._gl.ARRAY_BUFFER, new Float32Array( [ - 1.0, - 1.0, 1.0, - 1.0, - 1.0, 1.0, 1.0, - 1.0, 1.0, 1.0, - 1.0, 1.0 ] ), this._gl.STATIC_DRAW );\n\n            // Create Program\n\n            this._currentProgram = this._createProgram( vertex_shader, fragment_shader );\n\n            this._timeLocation = this._gl.getUniformLocation( this._currentProgram, 'time' );\n            this._resolutionLocation = this._gl.getUniformLocation( this._currentProgram, 'resolution' );\n            this._extraParams = {};\n            for(let extraParam in this.options.extraParams || {}){\n                this._extraParams[extraParam] = this._gl.getUniformLocation( this._currentProgram, extraParam );\n            }\n\n            Timer.every(() => {\n                this._resizeCanvas();\n                this._render();\n            }, 1)\n        });\n    }\n\n    /**\n     * @private\n     */\n    setExtraParam(name, value) {\n        this.options.extraParams[name] = value;\n    }\n\n    /**\n     * @private\n     */\n    _resizeCanvas() {\n        let canvas = this._element;\n        if ( canvas.width !== canvas.clientWidth ||\n            canvas.height !== canvas.clientHeight ) {\n\n            canvas.width = canvas.clientWidth;\n            canvas.height = canvas.clientHeight;\n\n            this._parameters.screenWidth = canvas.width;\n            this._parameters.screenHeight = canvas.height;\n\n            this._gl.viewport( 0, 0, canvas.width, canvas.height );\n\n        }\n    }\n\n    /**\n     * @private\n     */\n    _render() {\n        if ( !this._currentProgram ) return;\n\n        this._parameters.time = new Date().getTime() - this._parameters.start_time;\n\n        this._gl.clear( this._gl.COLOR_BUFFER_BIT | this._gl.DEPTH_BUFFER_BIT );\n\n        // Load program into GPU\n\n        this._gl.useProgram( this._currentProgram );\n\n        // Set values to program variables\n\n        this._gl.uniform1f( this._timeLocation, this._parameters.time / 1000 );\n        this._gl.uniform2f( this._resolutionLocation, this._parameters.screenWidth, this._parameters.screenHeight );\n\n        for(let extraParam in this.options.extraParams || {}){\n            let typeName = 'uniform1f';\n            let inputValue = this.options.extraParams[extraParam];\n            if(Array.isArray(this.options.extraParams[extraParam])){\n                typeName = 'uniform2f';\n            } else {\n                inputValue = [inputValue]\n            }\n            this._gl[typeName]( this._extraParams[extraParam], ...inputValue);\n        }\n\n\n        // Render geometry\n\n        this._gl.bindBuffer( this._gl.ARRAY_BUFFER, this._buffer );\n        this._gl.vertexAttribPointer( this._vertex_position, 2, this._gl.FLOAT, false, 0, 0 );\n        this._gl.enableVertexAttribArray( this._vertex_position );\n        this._gl.drawArrays( this._gl.TRIANGLES, 0, 6 );\n        this._gl.disableVertexAttribArray( this._vertex_position );\n    }\n\n    /**\n     * @private\n     */\n    _createProgram(vertex, fragment) {\n        let program = this._gl.createProgram();\n\n\n        let vs = this._createShader( vertex, this._gl.VERTEX_SHADER );\n        let fs = this._createShader( '#ifdef GL_ES\\nprecision highp float;\\n#endif\\n\\n' + fragment, this._gl.FRAGMENT_SHADER );\n\n        if ( vs === null || fs === null )\n            return null;\n\n        this._gl.attachShader( program, vs );\n        this._gl.attachShader( program, fs );\n\n        this._gl.deleteShader( vs );\n        this._gl.deleteShader( fs );\n\n        this._gl.linkProgram( program );\n\n        if ( !this._gl.getProgramParameter( program, this._gl.LINK_STATUS ) ) {\n\n            alert( \"ERROR:\\n\" +\n                \"VALIDATE_STATUS: \" + this._gl.getProgramParameter( program, this._gl.VALIDATE_STATUS ) + \"\\n\" +\n                \"ERROR: \" + this._gl.getError() + \"\\n\\n\" +\n                \"- Vertex Shader -\\n\" + vertex + \"\\n\\n\" +\n                \"- Fragment Shader -\\n\" + fragment );\n\n            return null;\n\n        }\n\n        return program;\n    }\n\n    /**\n     * @private\n     */\n    _createShader( src, type ) {\n\n        let shader = this._gl.createShader( type );\n\n        this._gl.shaderSource( shader, src );\n        this._gl.compileShader( shader );\n\n        if ( !this._gl.getShaderParameter( shader, this._gl.COMPILE_STATUS ) ) {\n\n            alert( ( type === this._gl.VERTEX_SHADER ? \"VERTEX\" : \"FRAGMENT\" ) + \" SHADER:\\n\" + this._gl.getShaderInfoLog( shader ) );\n            return null;\n\n        }\n\n        return shader;\n\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/surfaces/WebGLSurface.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1051,
    "kind": "class",
    "name": "WebGLSurface",
    "memberof": "src/surfaces/WebGLSurface.js",
    "static": true,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/surfaces/WebGLSurface.js",
    "importStyle": "{WebGLSurface}",
    "description": "A class for making WebGL elements\n  targets inside an Arva application, containing a renderable shader\n  fragment. Like an HTML div, it can accept internal markup,\n  properties, classes, and handle events.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "WebGLSurface"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "default option overrides"
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.size",
        "description": "[width, height] in pixels"
      },
      {
        "nullable": null,
        "types": [
          "Array.string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.classes",
        "description": "CSS classes to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.properties",
        "description": "string dictionary of CSS properties to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "options.attributes",
        "description": "string dictionary of HTML attributes to set on target div"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "options.content",
        "description": "inner (HTML) content of surface"
      }
    ],
    "interface": false,
    "extends": [
      "famous/surfaces/CanvasSurface.js~CanvasSurface"
    ]
  },
  {
    "__docId__": 1052,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true
  },
  {
    "__docId__": 1053,
    "kind": "member",
    "name": "_parameters",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_parameters",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "{\"start_time\": *, \"time\": *, \"screenWidth\": *, \"screenHeight\": *}"
      ]
    }
  },
  {
    "__docId__": 1054,
    "kind": "member",
    "name": "_gl",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_gl",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1055,
    "kind": "member",
    "name": "_buffer",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1056,
    "kind": "member",
    "name": "_currentProgram",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_currentProgram",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1057,
    "kind": "member",
    "name": "_timeLocation",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_timeLocation",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1058,
    "kind": "member",
    "name": "_resolutionLocation",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_resolutionLocation",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1059,
    "kind": "member",
    "name": "_extraParams",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_extraParams",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1060,
    "kind": "method",
    "name": "setExtraParam",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#setExtraParam",
    "access": "private",
    "description": "",
    "lineNumber": 80,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1061,
    "kind": "method",
    "name": "_resizeCanvas",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_resizeCanvas",
    "access": "private",
    "description": "",
    "lineNumber": 87,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1062,
    "kind": "method",
    "name": "_render",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_render",
    "access": "private",
    "description": "",
    "lineNumber": 106,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1063,
    "kind": "method",
    "name": "_createProgram",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_createProgram",
    "access": "private",
    "description": "",
    "lineNumber": 146,
    "params": [
      {
        "name": "vertex",
        "types": [
          "*"
        ]
      },
      {
        "name": "fragment",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1064,
    "kind": "method",
    "name": "_createShader",
    "memberof": "src/surfaces/WebGLSurface.js~WebGLSurface",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/surfaces/WebGLSurface.js~WebGLSurface#_createShader",
    "access": "private",
    "description": "",
    "lineNumber": 182,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1065,
    "kind": "file",
    "name": "src/utils/BlobHelper.js",
    "content": "/**\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\n/**\n * Helper class for converting base64 string data to a HTML5 Blob object.\n **/\nexport class BlobHelper {\n\n    /**\n     * Convert base64 string data to a HTML5 Blob object.\n     * @param {String} b64Data Base64 data to convert to Blob\n     * @param {String} contentType Content type\n     * @param {Number} sliceSize How large the chunks are in which we process the data.\n     * @returns {Blob} Blob of raw data.\n     */\n    static base64toBlob(b64Data, contentType, sliceSize) {\n        contentType = contentType || '';\n        sliceSize = sliceSize || 512;\n\n        let byteCharacters = atob(b64Data);\n        let byteCharLength = byteCharacters.length;\n        let byteArrays = [];\n\n        for (var offset = 0; offset < byteCharLength; offset += sliceSize) {\n            let slice = byteCharacters.slice(offset, offset + sliceSize);\n            let sliceLength = slice.length;\n            let byteNumbers = new Array(sliceLength);\n            for (var i = 0; i < sliceLength; i++) {\n                byteNumbers[i] = slice.charCodeAt(i);\n            }\n\n            var byteArray = new Uint8Array(byteNumbers);\n\n            byteArrays.push(byteArray);\n        }\n\n        var blob = new Blob(byteArrays, {type: contentType});\n        return blob;\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/BlobHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1066,
    "kind": "class",
    "name": "BlobHelper",
    "memberof": "src/utils/BlobHelper.js",
    "static": true,
    "longname": "src/utils/BlobHelper.js~BlobHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/BlobHelper.js",
    "importStyle": "{BlobHelper}",
    "description": "Helper class for converting base64 string data to a HTML5 Blob object.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 1067,
    "kind": "method",
    "name": "base64toBlob",
    "memberof": "src/utils/BlobHelper.js~BlobHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/BlobHelper.js~BlobHelper.base64toBlob",
    "access": "public",
    "description": "Convert base64 string data to a HTML5 Blob object.",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Blob} Blob of raw data."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "b64Data",
        "description": "Base64 data to convert to Blob"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "contentType",
        "description": "Content type"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "sliceSize",
        "description": "How large the chunks are in which we process the data."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Blob"
      ],
      "spread": false,
      "description": "Blob of raw data."
    }
  },
  {
    "__docId__": 1068,
    "kind": "file",
    "name": "src/utils/CallbackHelpers.js",
    "content": "/**\n * Created by tom on 22/08/16.\n */\n\nimport Timer                    from 'famous/utilities/Timer.js';\n\nexport function callbackToPromise(functionWithCallback, ...args) {\n    return new Promise(function(resolve){ functionWithCallback(...args, resolve); });\n}\n\nexport function successAndErrorToPromise() {\n    return new Promise(function(resolve, reject){ functionWithCallback(...args, resolve, reject); });\n}\n\nexport function waitMilliseconds(milliseconds) {\n    return new Promise((resolve) => Timer.setTimeout(resolve, milliseconds));\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/CallbackHelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1069,
    "kind": "function",
    "name": "callbackToPromise",
    "memberof": "src/utils/CallbackHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CallbackHelpers.js~callbackToPromise",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/CallbackHelpers.js",
    "importStyle": "{callbackToPromise}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [
      {
        "name": "functionWithCallback",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1070,
    "kind": "function",
    "name": "successAndErrorToPromise",
    "memberof": "src/utils/CallbackHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CallbackHelpers.js~successAndErrorToPromise",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/CallbackHelpers.js",
    "importStyle": "{successAndErrorToPromise}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1071,
    "kind": "function",
    "name": "waitMilliseconds",
    "memberof": "src/utils/CallbackHelpers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CallbackHelpers.js~waitMilliseconds",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/CallbackHelpers.js",
    "importStyle": "{waitMilliseconds}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "milliseconds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1072,
    "kind": "file",
    "name": "src/utils/CombineOptions.js",
    "content": "/**\n @author: Karl Lundfall (lundfall)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n */\n\nimport camelCase            from 'camelcase';\nimport isEmpty              from 'lodash/isEmpty.js';\nimport mergeWith            from 'lodash/mergeWith.js';\nimport cloneDeepWith        from 'lodash/cloneDeepWith.js';\n\nfunction famousMerge(defaultParam, specifiedParam) {\n    //TODO change array merge not to merge at all\n    if (Array.isArray(defaultParam) && Array.isArray(specifiedParam)) {\n        return specifiedParam;\n    }\n\n\n    for (let param of [specifiedParam, defaultParam]) {\n        if (!Array.isArray(param)) {\n\n            if (typeof param === 'object' && !!param) {\n\n                /*\n                 * Make sure that we don't merge instances of classes. You _could_ trick this system by specifying an object\n                 * with the parameter constructor {name: 'Object'} or specifying a class named Object (don't)\n                 */\n                if (param.constructor.name !== 'Object') {\n                    return specifiedParam;\n                }\n\n\n                if (isEmpty(param)) {\n                    return param === specifiedParam ? defaultParam : specifiedParam;\n                }\n\n\n            }\n        }\n    }\n    let hasDashProperty = false;\n    //TODO Stop supporting dash property merging\n    /*\n     * Style parameters can be specified with dash-case or camelCase, which we correct here\n     */\n    let shallowParamCopies = [{}, {}];\n    for (let [param, shallowCopy] of [[specifiedParam, shallowParamCopies[0]], [defaultParam, shallowParamCopies[1]]]) {\n        for (let key in param) {\n            let value = param[key];\n            /* If there is an array present in one place but not the other, we need to be sure to place an empty\n            *  array in the other object in order to prevent the contents in that array from being copied unpromptedly */\n            if(defaultParam !== undefined && specifiedParam !== undefined && Array.isArray(value) && ((key in specifiedParam) !== (key in defaultParam))){\n                if(!key in specifiedParam){\n                    specifiedParam[key] = [];\n                }\n            }\n            if (~key.indexOf('-')) {\n                hasDashProperty = true;\n                key = camelCase(key);\n            }\n            shallowCopy[key] = value;\n        }\n    }\n    if (hasDashProperty) {\n        return mergeWith(shallowParamCopies[1], shallowParamCopies[0], famousMerge);\n    } else {\n        return defaultParam === undefined ? specifiedParam : undefined;\n    }\n}\n\n/**\n * Helper function used to clone without cloning class instances\n * @param value\n * @returns {*}\n */\nfunction dontCloneClassInstances(value) {\n    if (typeof value === 'object' && !!value && !Array.isArray(value) && value.constructor.name !== 'Object') {\n        return value;\n    }\n}\n\n/**\n *\n * @param defaultOptions\n * @param options\n * @returns {*}\n */\nexport function combineOptions(defaultOptions, options) {\n    let clonedDefaultOptions = cloneDeepWith(defaultOptions, dontCloneClassInstances);\n    return mergeWith({root: clonedDefaultOptions}, {root: options}, famousMerge).root;\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/CombineOptions.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1073,
    "kind": "function",
    "name": "famousMerge",
    "memberof": "src/utils/CombineOptions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CombineOptions.js~famousMerge",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/CombineOptions.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "defaultParam",
        "types": [
          "*"
        ]
      },
      {
        "name": "specifiedParam",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1074,
    "kind": "function",
    "name": "dontCloneClassInstances",
    "memberof": "src/utils/CombineOptions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CombineOptions.js~dontCloneClassInstances",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/CombineOptions.js",
    "importStyle": null,
    "description": "Helper function used to clone without cloning class instances",
    "lineNumber": 76,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 1075,
    "kind": "function",
    "name": "combineOptions",
    "memberof": "src/utils/CombineOptions.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/CombineOptions.js~combineOptions",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/CombineOptions.js",
    "importStyle": "{combineOptions}",
    "description": "",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOptions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1076,
    "kind": "file",
    "name": "src/utils/DebuggerTools.js",
    "content": "/**\n * Created by lundfall on 06/07/2017.\n */\nimport {Surface}            from 'arva-js/surfaces/Surface.js';\nimport SpecParser           from 'famous/core/SpecParser.js'\nimport Entity               from 'famous/core/Entity.js'\nimport RenderNode           from 'famous/core/RenderNode.js'\nimport { View }             from 'arva-js/core/View.js'\nimport { PrioritisedArray } from 'arva-js/data/PrioritisedArray.js'\nimport { ObjectHelper }     from 'arva-js/utils/ObjectHelper.js'\nimport { OptionObserver }   from 'arva-js/utils/view/OptionObserver.js'\nimport { Utils }            from 'arva-js/utils/view/Utils.js'\nimport { layout }           from 'arva-js/layout/Decorators.js'\nimport EventEmitter         from 'famous/core/EventEmitter.js'\n\nwindow.getFromID = (id) => {\n  return Entity.get(id)\n};\n\nwindow.views = {};\nwindow.prioArrays = {};\n\n\nwindow.muteLogs = true;\n\nwindow.debugSizes = false;\n\nlet originalGetSize = View.prototype.getSize;\nView.prototype.getSize = function () {\n    if(!window.debugSizes){\n        return originalGetSize.call(this, ...arguments);\n    }\n    console.group(this.constructor.name);\n    let returnValue = originalGetSize.call(this, ...arguments);\n    console.log(returnValue);\n    console.groupEnd(this.constructor.name);\n    return returnValue;\n};\n\nlet originalCopyPrototypeProperties= View.prototype._copyPrototypeProperties;\nView.prototype._copyPrototypeProperties = function () {\n  window.views[this._name()] = this;\n  return originalCopyPrototypeProperties.call(this, ...arguments)\n};\n\nlet originalBuildFromSnapshot = PrioritisedArray.prototype._buildFromSnapshot;\nPrioritisedArray.prototype._buildFromSnapshot = function () {\n    window.prioArrays[this.constructor.name] = this;\n    return originalBuildFromSnapshot.call(this, ...arguments)\n};\n\nlet originalConstructLayoutController = View.prototype._createLayoutController;\nView.prototype._createLayoutController = function () {\n  originalConstructLayoutController.call(this, ...arguments)\n  this.layout._view = this\n};\n\nlet secretRedBackground = Symbol('secretRedBackground');\nView.prototype.makeRED = function () {\n  this._arrangeRenderableAssignment(this[secretRedBackground], Surface.with({properties: {backgroundColor: 'red'}}),\n    [], secretRedBackground, [layout.fullSize()])\n  this.reflowRecursively();\n};\n\nlet originalWarn = Utils.warn;\nUtils.warn = function () {\n  originalWarn.call(this, ...arguments);\n  debugger;\n};\n\nlet originaloptionObserverErrorThrower = OptionObserver.prototype._throwError;\nOptionObserver.prototype._throwError = function (message) {\n    console.log(message);\n  debugger;\n  return originaloptionObserverErrorThrower.call(this, ...arguments)\n}\n\n\nlet log = (...consoleArgs) => {\n  if(window.muteLogs){\n    return\n  }\n  console.log(...consoleArgs);\n}\n\n\nlet originalRegisterNewInstance = OptionObserver._registerNewInstance\nOptionObserver._registerNewInstance = function (instance) {\n  instance.on('needUpdate', (renderableName) => {\n    log(`%c ${instance._errorName}:${renderableName} is invalidated`, 'color: rgba(125, 125, 125, 0.7')\n  })\n  return originalRegisterNewInstance.call(this, ...arguments)\n};\n\nlet originalOptionObserverMarkPropertyAsUpdated = OptionObserver.prototype._markPropertyAsUpdated\nOptionObserver.prototype._markPropertyAsUpdated = function (nestedPropertyPath, property, value) {\n  let result = originalOptionObserverMarkPropertyAsUpdated.call(this, ...arguments)\n  log(`%c ${this._errorName} updated ${nestedPropertyPath.concat(property).join('->')}=${Utils.isPlainObject(value) ? JSON.stringify(value) : value}`, 'color: green')\n  return result\n};\n\nwindow.ObjectHelper = ObjectHelper;\n\nlet originalEmit = EventEmitter.prototype.emit;\nEventEmitter.prototype.emit = function (type) {\n  let result = originalEmit.call(this, ...arguments)\n  if (typeof document.body['on' + type] === 'undefined' && ![\n    /* Exclude common events that emit too often */\n      'layoutstart',\n      'layoutend',\n      'sizeChanged',\n      'reflow',\n      'start',\n      'newSize',\n      'end',\n      'update',\n      'layoutControllerReflow',\n      'deploy',\n      'recursiveReflow',\n      'postrender',\n      'prerender',\n      'change'].includes(type) && Number.isNaN(+type)) {\n    log(`Event emitted: ${type}`, this._owner)\n  }\n  return result\n};\n\n//TODO Support a more abd ass version of this using proxies\nwindow.observePropertySet = (object, propertyName) => {\n  let value = object[propertyName];\n  Object.defineProperty(object, propertyName, {get: () => value, set: (newValue) => {\n    value = newValue;\n    debugger; }, enumerable: false})\n};\n\nlet viewDebugSettings = new Map();\nwindow.unDebugLayoutFunction = (view) => {\n    let settings = viewDebugSettings.get(view.constructor);\n    settings.debug = false;\n};\nwindow.debugLayoutFunction = (view) => {\n    let settings = {debug: true};\n    view._doReflow();\n    if(viewDebugSettings.get(view)){\n        return;\n    }\n    viewDebugSettings.set(view, settings);\n    let originalLayoutFunction = view._layoutDecoratedRenderables;\n    view._layoutDecoratedRenderables = function() {\n        if(settings.debug){\n            debugger;\n        }\n        originalLayoutFunction.call(view, ...arguments);\n    };\n};\n\nlet surfaceDebugSettings = new Map();\nwindow.unDebugCommitFunction = (renderable) => {\n    let settings = surfaceDebugSettings.get(renderable);\n    settings.debug = false;\n};\n\nwindow.debugCommitFunction = (renderable) => {\n    let settings = {debug: true};\n    if(surfaceDebugSettings.get(renderable)){\n        return;\n    }\n    surfaceDebugSettings.set(renderable, settings);\n    let originalCommitFunction = renderable.commit;\n    renderable.commit = function() {\n        if(settings.debug){\n            debugger;\n        }\n        originalCommitFunction.call(renderable, ...arguments);\n    };\n};\n\nwindow.debugFunction = (object, name) => {\n    let originalFunction = object[name];\n    object[name] = function() {\n        debugger;\n        originalFunction.call(object, ...arguments);\n    };\n};\n\n\nRenderNode._applyCommit = (spec, context, cacheStorage, nestedList = []) => {\n    var result = SpecParser.parse(spec, context);\n    var keys = Object.keys(result);\n    for (var i = 0; i < keys.length; i++) {\n        var id = keys[i];\n        var childNode = Entity.get(id);\n        var commitParams = result[id];\n        commitParams.allocator = context.allocator;\n        var commitResult = childNode.commit(commitParams);\n        if (commitResult) {\n            var thingsToAdd = childNode.__hiddenViewName__ ? [childNode.__hiddenViewName__] :  [];\n            thingsToAdd = thingsToAdd.concat(childNode._view && childNode._view.__hiddenRenderableName__ || [])\n            /* Replace white space since adding white space to a class name causes the DOM to revolt */\n                .map((string) => string.replace(' ', ''));\n            RenderNode._applyCommit(commitResult, context, cacheStorage, nestedList.concat(thingsToAdd));\n        } else {\n            cacheStorage[id] = commitParams;\n            childNode.setAttributes && childNode.setAttributes({'data-name': childNode.__hiddenRenderableName__ || ''});\n            childNode.setClasses && childNode.setClasses(nestedList);\n        }\n    }\n};\n\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/DebuggerTools.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1077,
    "kind": "variable",
    "name": "originalGetSize",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalGetSize",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1078,
    "kind": "function",
    "name": "getSize",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~getSize",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1079,
    "kind": "variable",
    "name": "originalCopyPrototypeProperties",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalCopyPrototypeProperties",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1080,
    "kind": "function",
    "name": "_copyPrototypeProperties",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~_copyPrototypeProperties",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1081,
    "kind": "variable",
    "name": "originalBuildFromSnapshot",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalBuildFromSnapshot",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1082,
    "kind": "function",
    "name": "_buildFromSnapshot",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~_buildFromSnapshot",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1083,
    "kind": "variable",
    "name": "originalConstructLayoutController",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalConstructLayoutController",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1084,
    "kind": "function",
    "name": "_createLayoutController",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~_createLayoutController",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1085,
    "kind": "variable",
    "name": "secretRedBackground",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~secretRedBackground",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1086,
    "kind": "function",
    "name": "makeRED",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~makeRED",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1087,
    "kind": "variable",
    "name": "originalWarn",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalWarn",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1088,
    "kind": "function",
    "name": "warn",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~warn",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1089,
    "kind": "variable",
    "name": "originaloptionObserverErrorThrower",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originaloptionObserverErrorThrower",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1090,
    "kind": "function",
    "name": "_throwError",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~_throwError",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1091,
    "kind": "function",
    "name": "log",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~log",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "consoleArgs",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1092,
    "kind": "variable",
    "name": "originalRegisterNewInstance",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalRegisterNewInstance",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1093,
    "kind": "function",
    "name": "_registerNewInstance",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~_registerNewInstance",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "params": [
      {
        "name": "instance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1094,
    "kind": "variable",
    "name": "originalOptionObserverMarkPropertyAsUpdated",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalOptionObserverMarkPropertyAsUpdated",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1095,
    "kind": "function",
    "name": "_markPropertyAsUpdated",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~_markPropertyAsUpdated",
    "access": "private",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "nestedPropertyPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "property",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1096,
    "kind": "variable",
    "name": "originalEmit",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~originalEmit",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1097,
    "kind": "function",
    "name": "emit",
    "memberof": "src/utils/DebuggerTools.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/DebuggerTools.js~emit",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1098,
    "kind": "variable",
    "name": "viewDebugSettings",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~viewDebugSettings",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1099,
    "kind": "variable",
    "name": "surfaceDebugSettings",
    "memberof": "src/utils/DebuggerTools.js",
    "static": true,
    "longname": "src/utils/DebuggerTools.js~surfaceDebugSettings",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/DebuggerTools.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1100,
    "kind": "file",
    "name": "src/utils/DialogManager.js",
    "content": "/**\n * Created by lundfall on 06/07/16.\n */\nimport {Surface}             from '../surfaces/Surface.js';\nimport FamousContext         from 'famous/core/Context.js';\nimport Timer                 from 'famous/utilities/Timer';\nimport Easing                from 'famous/transitions/Easing.js';\nimport AnimationController   from 'famous-flex/AnimationController';\n\nimport {Injection}           from './Injection.js';\nimport {View}                from '../core/View.js';\nimport {Router}              from '../core/Router.js';\nimport {layout}              from '../layout/Decorators.js';\nimport {DialogWrapper}       from './dialog/DialogWrapper.js';\n\n\nexport class DialogManager extends View {\n\n    @layout.fullSize()\n    @layout.animate({showInitially: false, animation: AnimationController.Animation.Fade})\n    /* Add huge translations to make sure that it appears above everything else */\n    @layout.translate(0, 0, 9000)\n    background = new Surface({\n        properties: {\n            backgroundColor: \"rgba(0,0,0,0.4)\"\n        }\n    });\n\n    @layout.translate(0, 0, 9500)\n    @layout.fullSize()\n    @layout.animate({\n        show: {transition: {curve: Easing.outCubic, duration: 300}, animation: AnimationController.Animation.Slide.Up},\n        hide: {transition: {curve: Easing.inCubic, duration: 300}, animation: AnimationController.Animation.Slide.Down},\n        showInitially: false\n    })\n    /* Empty content until filled */\n    dialog = View.empty();\n\n    canCancel = true;\n\n    constructor(options = {}) {\n        super(options);\n        /* For ionic-plugin-keyboard */\n        if (window.Keyboard) {\n            /* Prevent keyboard from showing */\n            window.addEventListener('native.keyboardshow', () => {\n                /* Hides the keyboard when a dialog is  shown */\n                if (this.hasOpenDialog()) {\n                    Keyboard.hide();\n                }\n            });\n        }\n        this.router = Injection.get(Router);\n        let famousContext = Injection.get(FamousContext);\n        famousContext.add(this);\n\n        this.on('newSize', (size) => {\n            if (this.dialog.onNewParentSize) {\n                this.dialog.onNewParentSize(size);\n                this._savedParentSize = null;\n            } else {\n                this._savedParentSize = size;\n            }\n        }, {propagate: false});\n\n\n        document.addEventListener(\"backbutton\", ()=> this.canCancel && this.close());\n        this.background.on('click', ()=> this.canCancel && this.close());\n    }\n\n    /**\n     *\n     * @param {Dialog} options.dialog dialog\n     * @param {Boolean} [options.canCancel=true]\n     * @param {Boolean} [options.killOldDialog=true]\n     * @returns {*}\n     */\n    show({dialog, canCancel = true, killOldDialog = true, shouldGoToRoute = null}) {\n        if(!dialog){\n            throw new Error('No dialog specified in show() function of DialogManager');\n        }\n\n        this._shouldGoBackInHistory = shouldGoToRoute || this._shouldGoBackInHistory;\n        this.canCancel = canCancel;\n        if(dialog.canCancel){\n            this.canCancel = dialog.canCancel;\n        }\n\n        /* If already open dialog we should either close that one, or just keep the current one, depending on the settings */\n        if (this.hasOpenDialog()) {\n            if(!killOldDialog){\n                return this.dialogComplete();\n            }\n            this._close();\n        }\n\n        this._hasOpenDialog = true;\n\n        /* Replace whatever non-showing dialog we have right now with the new dialog */\n        this.replaceRenderable(this.dialog, new DialogWrapper({dialog}));\n        if (this._savedParentSize) {\n            this.dialog.onNewParentSize(this._savedParentSize);\n        }\n\n        if (this.canCancel) {\n            /* Disable existing default behavior of backbutton going back to previous route */\n            this.initialBackButtonState = this.router.isBackButtonEnabled();\n            this.router.setBackButtonEnabled(false);\n        }\n\n        /* Show the dialog */\n        this.showRenderable(this.dialog).then(() => {\n            this._eventOutput.emit('dialogShown');\n        });\n\n        this.dialog.on('closeDialog', this.close.bind(this));\n\n        /* Showing the background immediately propagates user's click event that triggered the show() directly to the background,\n         * closing the dialog again. Delaying showing the background circumvents this issue. */\n        Timer.setTimeout(() => {\n            if (this.hasOpenDialog()) {\n                this.showRenderable(this.background);\n            }\n        }, 10);\n        return this.dialogComplete();\n    }\n\n    /**\n     * Handles the logic for closing the dialog and possible going back in History\n     * @param {Boolean} [goBackInHistory] Set to false to prevent router.goBackInHistory() from being called after close.\n     */\n    close(goBackInHistory = false) {\n        if (this.hasOpenDialog()) {\n\n            /* Restore back button state */\n            if (this.canCancel) {\n                this.router.setBackButtonEnabled(this.initialBackButtonState);\n            }\n            /* Resolve promise if necessary */\n            if (this._resolveDialogComplete) {\n                this._resolveDialogComplete(arguments);\n                this._resolveDialogComplete = null;\n            }\n\n            /* Close the current dialog */\n            if(goBackInHistory || this._shouldGoBackInHistory){\n                this._goBackInHistory();\n            } else {\n                this._close();\n            }\n        }\n    }\n\n    getOpenDialog() {\n        return this.hasOpenDialog() && this.dialog.dialog;\n    }\n\n    hasOpenDialog() {\n        return this._hasOpenDialog;\n    }\n\n\n    dialogComplete() {\n        if (!this._resolveDialogComplete) {\n            if(!this.hasOpenDialog()){\n                return Promise.resolve();\n            }\n            return this._resolveDialogPromise = new Promise((resolve) => {\n                this._resolveDialogComplete = resolve\n            });\n        } else {\n            return this._resolveDialogPromise;\n        }\n\n    }\n\n    /**\n     * Closes a dialog\n     * @private\n     */\n    _close(){\n        this._hasOpenDialog = false;\n        this.hideRenderable(this.dialog);\n        this.hideRenderable(this.background);\n        this._eventOutput.emit('close', ...arguments);\n    }\n\n    /**\n     * Let the router go back in history, this will automatically close the current dialog\n     * @private\n     */\n    _goBackInHistory(){\n        let route = this._shouldGoBackInHistory;\n        this._shouldGoBackInHistory = false;\n        (route instanceof Object && route.controller) ? this.router.go(route.controller, route.method, route.params) : this.router.goBackInHistory();\n\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/DialogManager.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1101,
    "kind": "class",
    "name": "DialogManager",
    "memberof": "src/utils/DialogManager.js",
    "static": true,
    "longname": "src/utils/DialogManager.js~DialogManager",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/DialogManager.js",
    "importStyle": "{DialogManager}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "interface": false,
    "extends": [
      "src/core/View.js~View"
    ]
  },
  {
    "__docId__": 1102,
    "kind": "member",
    "name": "background",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#background",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "decorators": [
      {
        "name": "layout.fullSize",
        "arguments": "()"
      },
      {
        "name": "layout.animate",
        "arguments": "({\n  showInitially: false,\n  animation: AnimationController.Animation.Fade\n})"
      },
      {
        "name": "layout.translate",
        "arguments": "(0, 0, 9000)"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1103,
    "kind": "member",
    "name": "dialog",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#dialog",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "decorators": [
      {
        "name": "layout.translate",
        "arguments": "(0, 0, 9500)"
      },
      {
        "name": "layout.fullSize",
        "arguments": "()"
      },
      {
        "name": "layout.animate",
        "arguments": "({\n  show: {\n    transition: {\n      curve: Easing.outCubic,\n      duration: 300\n    },\n    animation: AnimationController.Animation.Slide.Up\n  },\n  hide: {\n    transition: {\n      curve: Easing.inCubic,\n      duration: 300\n    },\n    animation: AnimationController.Animation.Slide.Down\n  },\n  showInitially: false\n})"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1104,
    "kind": "member",
    "name": "canCancel",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#canCancel",
    "access": "public",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1105,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 1106,
    "kind": "member",
    "name": "router",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#router",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1107,
    "kind": "member",
    "name": "_savedParentSize",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#_savedParentSize",
    "access": "private",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1109,
    "kind": "method",
    "name": "show",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#show",
    "access": "public",
    "description": "",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Dialog"
        ],
        "spread": false,
        "optional": false,
        "name": "options.dialog",
        "description": "dialog"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.canCancel",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "options.killOldDialog",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1110,
    "kind": "member",
    "name": "_shouldGoBackInHistory",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#_shouldGoBackInHistory",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1113,
    "kind": "member",
    "name": "_hasOpenDialog",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#_hasOpenDialog",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1114,
    "kind": "member",
    "name": "initialBackButtonState",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#initialBackButtonState",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1115,
    "kind": "method",
    "name": "close",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#close",
    "access": "public",
    "description": "Handles the logic for closing the dialog and possible going back in History",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "goBackInHistory",
        "description": "Set to false to prevent router.goBackInHistory() from being called after close."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1116,
    "kind": "member",
    "name": "_resolveDialogComplete",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#_resolveDialogComplete",
    "access": "private",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1117,
    "kind": "method",
    "name": "getOpenDialog",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#getOpenDialog",
    "access": "public",
    "description": null,
    "lineNumber": 154,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1118,
    "kind": "method",
    "name": "hasOpenDialog",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#hasOpenDialog",
    "access": "public",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1119,
    "kind": "method",
    "name": "dialogComplete",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#dialogComplete",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1121,
    "kind": "method",
    "name": "_close",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#_close",
    "access": "private",
    "description": "Closes a dialog",
    "lineNumber": 181,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1123,
    "kind": "method",
    "name": "_goBackInHistory",
    "memberof": "src/utils/DialogManager.js~DialogManager",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/DialogManager.js~DialogManager#_goBackInHistory",
    "access": "private",
    "description": "Let the router go back in history, this will automatically close the current dialog",
    "lineNumber": 192,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1125,
    "kind": "file",
    "name": "src/utils/Easing.js",
    "content": "import FamousEasing                         from 'famous/transitions/Easing.js';\n\nexport let Easing = FamousEasing;\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/Easing.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1126,
    "kind": "variable",
    "name": "Easing",
    "memberof": "src/utils/Easing.js",
    "static": true,
    "longname": "src/utils/Easing.js~Easing",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/Easing.js",
    "importStyle": "{Easing}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1127,
    "kind": "file",
    "name": "src/utils/IconLoader.js",
    "content": "/**\n * Created by Manuel on 28/07/16.\n */\n/*\n Text plugin\n */\n\nvar arvaOptions = System.arvaOptions;\nvar iconOptions = arvaOptions.iconOptions || {\n        form: 'rounded',\n        thickness: 'thin'\n    };\n\nexports.locate = function (target) {\n    var address = target.address;\n\n    // /* Resolve the address of default icons with the options provided */\n    if (address.indexOf('default') !== -1) {\n        address = address.split('default');\n        address = address[0] + iconOptions.form + '_' + iconOptions.thickness + address[1];\n    }\n\n    return address;\n};\n\nexports.translate = function (load) {\n    if (this.builder && this.transpiler) {\n        load.metadata.format = 'esm';\n        return 'export default ' + JSON.stringify(load.source) + ';';\n    }\n\n    load.metadata.format = 'amd';\n    return 'def' + 'ine(function() {\\nreturn ' + JSON.stringify(load.source) + ';\\n});';\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/IconLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1128,
    "kind": "variable",
    "name": "arvaOptions",
    "memberof": "src/utils/IconLoader.js",
    "static": true,
    "longname": "src/utils/IconLoader.js~arvaOptions",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/IconLoader.js",
    "importStyle": null,
    "description": "Created by Manuel on 28/07/16.",
    "lineNumber": 8,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1129,
    "kind": "variable",
    "name": "iconOptions",
    "memberof": "src/utils/IconLoader.js",
    "static": true,
    "longname": "src/utils/IconLoader.js~iconOptions",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/IconLoader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1130,
    "kind": "function",
    "name": "locate",
    "memberof": "src/utils/IconLoader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/IconLoader.js~locate",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/IconLoader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1131,
    "kind": "function",
    "name": "translate",
    "memberof": "src/utils/IconLoader.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/IconLoader.js~translate",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/IconLoader.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "load",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1132,
    "kind": "file",
    "name": "src/utils/ImageLoader.js",
    "content": "/**\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\n/* On Windows, paths are file:///C:/[..], whereas on *NIX the third slash after\n * the protocol means filesystem root. Thus we need to remove this slash on Windows, and keep it elsewhere. */\nvar protocolToStrip = process && process.platform === 'win32' ? 'file:///' : 'file://';\n\nif (typeof window !== 'undefined') {\n    /* Unbundled build, loaded dynamically through System.import() */\n    exports.build = false;\n\n    exports.fetch = function (load) {\n        var absolutePath = load.address.replace('.js', '').substr(protocolToStrip.length);\n        return new Promise(function (resolve) {\n            resolve('module.exports = \"' + absolutePath + '\"');\n        });\n    };\n} else {\n    /* Bundled build, loaded from bundle.js */\n\n    var fs = require('fs');\n    var path = require('path');\n\n    exports.build = true;\n\n    exports.fetch = function (load) {\n        return new Promise(function (resolve, reject) {\n            var absolutePath = load.address.replace('.js', '').substr(protocolToStrip.length);\n            copyFile(absolutePath, resolve, reject);\n        });\n    };\n\n    function copyFile(source, resolve, reject) {\n        var cbCalled = false;\n        var dir = 'img';\n        var target = `${dir}/${path.basename(source)}`;\n\n        var absoluteDir = `www/${dir}`;\n        var absoluteTarget = `www/${target}`;\n\n        fs.mkdir(absoluteDir, function (mkdirError) {\n\n            if (mkdirError && mkdirError.code !== 'EEXIST') {\n                return reject(mkdirError);\n            }\n\n            var rd = fs.createReadStream(source);\n            rd.on('error', function (err) {\n                done(err);\n            });\n            var wr = fs.createWriteStream(absoluteTarget);\n            wr.on('error', function (err) {\n                done(err);\n            });\n            wr.on('close', function (ex) {\n                done();\n            });\n            rd.pipe(wr);\n\n            function done(error) {\n                if (!cbCalled) {\n                    if (!error && resolve) {\n                        return resolve('module.exports = \\'' + target + '\\';');\n                    } else if (reject) {\n                        console.log('Error copying imported image:', error);\n                        return reject(error);\n                    }\n                    cbCalled = true;\n                }\n            }\n        });\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/ImageLoader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1133,
    "kind": "variable",
    "name": "protocolToStrip",
    "memberof": "src/utils/ImageLoader.js",
    "static": true,
    "longname": "src/utils/ImageLoader.js~protocolToStrip",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/ImageLoader.js",
    "importStyle": null,
    "description": "@author: Tom Clement (tjclement)",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@license",
        "tagValue": "NPOSL-3.0"
      },
      {
        "tagName": "@copyright",
        "tagValue": "Bizboard, 2015"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1134,
    "kind": "file",
    "name": "src/utils/Injection.js",
    "content": "/**\n * Created by tom on 28/06/16.\n */\n\nimport {Injector}                   from './di/Injector.js';\nimport {provide}                    from './di/Decorators.js';\n\nexport class Injection {\n    static injector = new Injector();\n\n    /**\n     * Requests an instance of the given class from the DI engine. If an instance\n     * of that class with the same construction parameters already exists, a reference\n     * to it is returned. Otherwise a new instance is created.\n     *\n     * Example usage:\n     * get(HomeController, param1, param2);\n     *\n     * @param {Function} classConstructor The class of which an instance is wanted\n     * @param {*} constructionParams A list of parameters to be passed to the class constructor\n     * @returns {Object} Instance of the given class\n     */\n    static get(classConstructor, ...constructionParams) {\n        return this.injector.get(classConstructor, constructionParams);\n    }\n\n    /**\n     * Provide an instance a certain type.\n     *\n     * @param {Function} classConstructor The class of which an instance is wanted\n     * @param {Function|Object} functionOrConstructedObject. A function returning an instance of the object, or the object\n     * itself.\n     */\n    static provide(classConstructor, functionOrConstructedObject) {\n        let providerFunction = typeof functionOrConstructedObject === 'function' ?\n            functionOrConstructedObject : (() => functionOrConstructedObject);\n        provide(classConstructor)(providerFunction);\n        this.addProviders(providerFunction);\n\n    }\n\n\n    /**\n     * Provide an instance a certain type.\n     *\n     * @param {Class} classConstructor The class of which an instance is wanted\n     * @param {Function|Object} functionOrConstructedObject\n     */\n    static provideAndGet(classConstructor, functionOrConstructedObject) {\n        this.provide(classConstructor, functionOrConstructedObject);\n        return Injection.get(classConstructor);\n    }\n\n\n    /**\n     * Requests instances of multiple classes at once.\n     *\n     * Example usage:\n     * let instances = getAll(ArvaRouter, [HomeController, [param1, param2]], App);\n     *\n     * @param {*} classContructorArray Array of classes to instantiate.\n     * May also be an array where each item is an array containing the class as\n     * its first element, and an array of parameters as its second element.\n     *\n     * @returns {Array} An array of instances of the requested classes\n     */\n    static getAll(...classContructorArray) {\n        let results = [];\n        for (let entry of classContructorArray) {\n            let [constructor, params] = entry instanceof Array ? [entry[0], entry[1]] : [entry, []];\n            results.push(this.get(constructor, ...params));\n        }\n        return results;\n    }\n\n    /**\n     * Registers classes as the default provider for their Provide annotation (set by @provide decorator).\n     *\n     * Example usage:\n     * addProviders(ArvaRouter, FamousContext);\n     *\n     * @param {*} classConstructors\n     * @returns {void}\n     */\n    static addProviders(...classConstructors) {\n        for (let constructor of classConstructors) {\n            this.injector._loadFnOrClass(constructor);\n        }\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/Injection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1135,
    "kind": "class",
    "name": "Injection",
    "memberof": "src/utils/Injection.js",
    "static": true,
    "longname": "src/utils/Injection.js~Injection",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/Injection.js",
    "importStyle": "{Injection}",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1136,
    "kind": "member",
    "name": "injector",
    "memberof": "src/utils/Injection.js~Injection",
    "static": true,
    "longname": "src/utils/Injection.js~Injection.injector",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1137,
    "kind": "method",
    "name": "get",
    "memberof": "src/utils/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Injection.js~Injection.get",
    "access": "public",
    "description": "Requests an instance of the given class from the DI engine. If an instance\nof that class with the same construction parameters already exists, a reference\nto it is returned. Otherwise a new instance is created.\n\nExample usage:\nget(HomeController, param1, param2);",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} Instance of the given class"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "classConstructor",
        "description": "The class of which an instance is wanted"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constructionParams",
        "description": "A list of parameters to be passed to the class constructor"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "Instance of the given class"
    }
  },
  {
    "__docId__": 1138,
    "kind": "method",
    "name": "provide",
    "memberof": "src/utils/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Injection.js~Injection.provide",
    "access": "public",
    "description": "Provide an instance a certain type.",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "classConstructor",
        "description": "The class of which an instance is wanted"
      },
      {
        "nullable": null,
        "types": [
          "Function",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionOrConstructedObject.",
        "description": "A function returning an instance of the object, or the object\nitself."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1139,
    "kind": "method",
    "name": "provideAndGet",
    "memberof": "src/utils/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Injection.js~Injection.provideAndGet",
    "access": "public",
    "description": "Provide an instance a certain type.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Class"
        ],
        "spread": false,
        "optional": false,
        "name": "classConstructor",
        "description": "The class of which an instance is wanted"
      },
      {
        "nullable": null,
        "types": [
          "Function",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "functionOrConstructedObject",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1140,
    "kind": "method",
    "name": "getAll",
    "memberof": "src/utils/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Injection.js~Injection.getAll",
    "access": "public",
    "description": "Requests instances of multiple classes at once.\n\nExample usage:\nlet instances = getAll(ArvaRouter, [HomeController, [param1, param2]], App);",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} An array of instances of the requested classes"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "classContructorArray",
        "description": "Array of classes to instantiate.\nMay also be an array where each item is an array containing the class as\nits first element, and an array of parameters as its second element."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array of instances of the requested classes"
    }
  },
  {
    "__docId__": 1141,
    "kind": "method",
    "name": "addProviders",
    "memberof": "src/utils/Injection.js~Injection",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Injection.js~Injection.addProviders",
    "access": "public",
    "description": "Registers classes as the default provider for their Provide annotation (set by @provide decorator).\n\nExample usage:\naddProviders(ArvaRouter, FamousContext);",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "classConstructors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1142,
    "kind": "file",
    "name": "src/utils/KeyboardHelper.js",
    "content": "/**\n * Created by Manuel on 24/08/16.\n */\n\n\nexport class KeyboardHelper {\n\n    hasKeyboard = false;\n\n    constructor(options = {\n        hideKeyboardAccessoryBar: true,\n        disableScroll: true\n    }) {\n\n        this.hasKeyboard = cordova && cordova.plugins && cordova.plugins.Keyboard;\n\n        if (this.hasKeyboard && options.disableScroll) {\n            cordova.plugins.Keyboard.hideKeyboardAccessoryBar && cordova.plugins.Keyboard.hideKeyboardAccessoryBar(options.hideKeyboardAccessoryBar);\n            cordova.plugins.Keyboard.hideKeyboardAccessoryBar && cordova.plugins.Keyboard.disableScroll(options.disableScroll);\n\n            /**\n             * Change the size of the famous-container to shrink the famous-context once the keyboard shows/hides. DisableScroll should be enabled for this to work\n             */\n            window.addEventListener('native.keyboardshow', ()=> {\n                document.getElementsByClassName('famous-container')[0].style.height = window.innerHeight + \"px\";\n                this._dispatchResizeEvent();\n            });\n\n            window.addEventListener('native.keyboardhide', ()=> {\n                document.getElementsByClassName('famous-container')[0].style.height = window.innerHeight + \"px\";\n                this._dispatchResizeEvent();\n            });\n\n            window.addEventListener(\"orientationchange\", ()=> {\n                document.getElementsByClassName('famous-container')[0].style.height = \"\";\n                document.getElementsByClassName('famous-container')[0].style.width = \"\";\n                this._dispatchResizeEvent();\n            });\n        }\n    }\n\n    _dispatchResizeEvent() {\n        let resizeEvent = new Event('resize');\n        window.dispatchEvent(resizeEvent);\n    }\n\n    setKeyboardAccessoryBar(boolean = false) {\n        if (this.hasKeyboard) {\n            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(boolean);\n        } else {\n            this._warn();\n        }\n    }\n\n    setDisableScroll(boolean = false) {\n        if (this.hasKeyboard) {\n            cordova.plugins.Keyboard.disableScroll(boolean);\n        } else {\n            this._warn();\n        }\n    }\n\n    show() {\n        if (this.hasKeyboard) {\n            cordova.plugins.Keyboard.show();\n        } else {\n            this._warn();\n        }\n    }\n\n    hide() {\n        if (this.hasKeyboard) {\n            cordova.plugins.Keyboard.hide();\n        } else {\n            this._warn();\n        }\n    }\n\n    _warn() {\n        console.warn('KeyboardHelper is not supported on this platform, probably not a native (iOS/Android) platform');\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/KeyboardHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1143,
    "kind": "class",
    "name": "KeyboardHelper",
    "memberof": "src/utils/KeyboardHelper.js",
    "static": true,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/KeyboardHelper.js",
    "importStyle": "{KeyboardHelper}",
    "description": "Created by Manuel on 24/08/16.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 1144,
    "kind": "member",
    "name": "hasKeyboard",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#hasKeyboard",
    "access": "public",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1145,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 1147,
    "kind": "method",
    "name": "_dispatchResizeEvent",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#_dispatchResizeEvent",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1148,
    "kind": "method",
    "name": "setKeyboardAccessoryBar",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#setKeyboardAccessoryBar",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "boolean",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1149,
    "kind": "method",
    "name": "setDisableScroll",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#setDisableScroll",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "boolean",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1150,
    "kind": "method",
    "name": "show",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#show",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1151,
    "kind": "method",
    "name": "hide",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#hide",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1152,
    "kind": "method",
    "name": "_warn",
    "memberof": "src/utils/KeyboardHelper.js~KeyboardHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/KeyboardHelper.js~KeyboardHelper#_warn",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1153,
    "kind": "file",
    "name": "src/utils/Limiter.js",
    "content": "/**\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nexport function limit(min, value, max) {\n    return Math.min(Math.max(min, value), max);\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/Limiter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1154,
    "kind": "function",
    "name": "limit",
    "memberof": "src/utils/Limiter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/Limiter.js~limit",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/Limiter.js",
    "importStyle": "{limit}",
    "description": "@author: Tom Clement (tjclement)",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@license",
        "tagValue": "NPOSL-3.0"
      },
      {
        "tagName": "@copyright",
        "tagValue": "Bizboard, 2015"
      }
    ],
    "params": [
      {
        "name": "min",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "max",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1155,
    "kind": "file",
    "name": "src/utils/ObjectHelper.js",
    "content": "/**\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport _each                from 'lodash/each.js'\nimport merge                from 'lodash/merge.js';\nimport extend               from 'lodash/extend.js';\n\nexport class ObjectHelper {\n\n    /* Sets enumerability of methods and all properties starting with '_' on an object to false,\n     * effectively hiding them from for(x in object) loops.   */\n    static hideMethodsAndPrivatePropertiesFromObject(object) {\n        for (let propName in object) {\n\n            let prototype = Object.getPrototypeOf(object);\n            let descriptor = prototype ? Object.getOwnPropertyDescriptor(prototype, propName) : undefined;\n            if (descriptor && (descriptor.get || descriptor.set) && !propName.startsWith('_')) {\n                /* This is a public getter/setter, so we can skip it */\n                continue;\n            }\n\n            let property = object[propName];\n            if (typeof property === 'function' || propName.startsWith('_')) {\n                ObjectHelper.hidePropertyFromObject(object, propName);\n            }\n        }\n    }\n\n    /* Sets enumerability of methods on an object to false,\n     * effectively hiding them from for(x in object) loops.   */\n    static hideMethodsFromObject(object) {\n        for (let propName in object) {\n            let property = object[propName];\n            if (typeof property === 'function') {\n                ObjectHelper.hidePropertyFromObject(object, propName);\n            }\n        }\n    }\n\n    /* Sets enumerability of an object's property to false,\n     * effectively hiding it from for(x in object) loops.   */\n    static hidePropertyFromObject(object, propName) {\n        let prototype = object;\n        let descriptor = Object.getOwnPropertyDescriptor(object, propName);\n        while (!descriptor) {\n            prototype = Object.getPrototypeOf(prototype);\n\n            if (prototype.constructor.name === 'Object' || prototype.constructor.name === 'Array') {\n                return;\n            }\n\n            descriptor = Object.getOwnPropertyDescriptor(prototype, propName);\n        }\n        descriptor.enumerable = false;\n        Object.defineProperty(prototype, propName, descriptor);\n        Object.defineProperty(object, propName, descriptor);\n    }\n\n    /* Sets enumerability of all of an object's properties (including methods) to false,\n     * effectively hiding them from for(x in object) loops.   */\n    static hideAllPropertiesFromObject(object) {\n        for (let propName in object) {\n            ObjectHelper.hidePropertyFromObject(object, propName);\n        }\n    }\n\n    /* Adds a property with enumerable: false to object */\n    static addHiddenPropertyToObject(object, propName, prop, writable = true, useAccessors = true) {\n        return ObjectHelper.addPropertyToObject(object, propName, prop, false, writable, undefined, null, useAccessors);\n    }\n\n    /* Adds a property with given enumerability and writability to object. If writable, uses a hidden object.shadow\n     * property to save the actual data state, and object[propName] with gettter/setter to the shadow. Allows for a\n     * callback to be triggered upon every set.   */\n    static addPropertyToObject(object, propName, prop, enumerable = true, writable = true, setCallback = null, getCallback = null, useAccessors = true) {\n        /* If property is non-writable, we won't need a shadowed prop for the getters/setters */\n        if (!writable || !useAccessors) {\n            let descriptor = {\n                enumerable: enumerable,\n                writable: writable,\n                value: prop\n            };\n            Object.defineProperty(object, propName, descriptor);\n        } else {\n            ObjectHelper.addGetSetPropertyWithShadow(object, propName, prop, enumerable, writable, setCallback, getCallback);\n        }\n    }\n\n    static deepAddAllGetSetPropertyWithShadow(object, enumerable = true, writable = true, setCallback = null, getCallback = null, nestedPropertyPath = []) {\n        _each(object, function (value, key) {\n            if (typeof value === 'object' && value.constructor.name === 'Object') {\n                ObjectHelper.deepAddAllGetSetPropertyWithShadow(value, enumerable, writable, setCallback, getCallback, nestedPropertyPath.concat(key));\n            }\n            ObjectHelper.addGetSetPropertyWithShadow(object, key, value, enumerable, writable, setCallback, getCallback, nestedPropertyPath);\n        });\n    }\n\n    /* Adds given property to the object with get() and set() accessors, and saves actual data in object.shadow */\n    static addGetSetPropertyWithShadow(object, propName, prop, enumerable = true, writable = true, setCallback = null, getCallback = null, appendToGetter = false) {\n        ObjectHelper.buildPropertyShadow(object, propName, prop);\n        ObjectHelper.buildGetSetProperty(object, propName, enumerable, writable, setCallback, getCallback, appendToGetter);\n    }\n\n    /* Creates or extends object.shadow to contain a property with name propName */\n    static buildPropertyShadow(object, propName, prop) {\n        let shadow = {};\n\n        try {\n            /* If a shadow property already exists, we should extend instead of overwriting it. */\n            if ('shadow' in object) {\n                shadow = object.shadow;\n            }\n        } catch (error) {\n            return;\n        }\n\n        shadow[propName] = prop;\n        Object.defineProperty(object, 'shadow', {\n            writable: true,\n            configurable: true,\n            enumerable: false,\n            value: shadow\n        });\n    }\n\n    /**\n     *\n     * @param {Object} object The object that we are binding to\n     * @param {String} propName The name of the property that should be overriden\n     * @param {Boolean} enumerable\n     * @param {Boolean} writable\n     * @param {Function} setCallback\n     * @param {Function} getCallback A function that takes as a single argument the property that is about to be get. Should\n     * return that thing as well\n     */\n    static buildGetSetProperty(object, propName, enumerable = true, writable = true, setCallback = null, getCallback = null, appendToGetter = false) {\n        if(appendToGetter){\n          let existingPropertyDescriptor = Object.getOwnPropertyDescriptor(object, propName);\n          if(existingPropertyDescriptor.get){\n            let existingGetCallBack = getCallback, previousGetCallback = existingPropertyDescriptor.get;\n            getCallback = () => {\n              previousGetCallback();\n              existingGetCallBack();\n            }\n          }\n        }\n\n        let descriptor = {\n            enumerable: enumerable,\n            configurable: true,\n            get: function () {\n                if (getCallback && typeof setCallback === 'function') {\n                    getCallback({\n                        propertyName: propName,\n                        value: object.shadow[propName]\n                    });\n                }\n                return object.shadow[propName];\n            },\n            set: function (value) {\n                if (writable) {\n                    let oldValue = object.shadow[propName];\n                    object.shadow[propName] = value;\n                    if (setCallback && typeof setCallback === 'function') {\n                        setCallback({\n                            propertyName: propName,\n                            newValue: value,\n                            oldValue\n                        });\n                    }\n                } else {\n                    throw new ReferenceError('Attempted to write to non-writable property ' + propName + '.');\n                }\n            }\n        };\n\n        Object.defineProperty(object, propName, descriptor);\n    }\n\n    /* Calls object['functionName'].bind(bindTarget) on all of object's functions. */\n    static bindAllMethods(object, bindTarget) {\n        /* TODO: There is a bug here that will bind properties that were defined through this.x = <something>. This is\n         * the desired effect because this.x.prototype will be redefined */\n\n        /* Bind all current object's methods to bindTarget. */\n        let methodDescriptors = ObjectHelper.getMethodDescriptors(object);\n        for (let methodName in methodDescriptors) {\n            /* Skip the constructor as it serves as no purpose and it breaks the minification */\n            if (methodName === 'constructor') {\n                continue;\n            }\n            let propertyDescriptor = methodDescriptors[methodName];\n            if (propertyDescriptor && propertyDescriptor.get) {\n                propertyDescriptor.get = propertyDescriptor.get.bind(bindTarget);\n            } else if (propertyDescriptor.set) {\n                propertyDescriptor.set = propertyDescriptor.set.bind(bindTarget);\n            } else if (propertyDescriptor.writable) {\n                propertyDescriptor.value = propertyDescriptor.value.bind(bindTarget);\n            }\n            Object.defineProperty(object, methodName, propertyDescriptor);\n        }\n    }\n\n\n    static getMethodDescriptors(object) {\n\n        let methodDescriptors = {};\n\n        for (let propertyName of Object.getOwnPropertyNames(object)) {\n            let propertyDescriptor = Object.getOwnPropertyDescriptor(object, propertyName) || {};\n            /* Initializers can be ignored since they are bound anyways */\n            if (!propertyDescriptor.initializer && (propertyDescriptor.get || typeof object[propertyName] === 'function')) {\n                methodDescriptors[propertyName] = propertyDescriptor;\n            }\n        }\n\n        /* Recursively find prototype's methods until we hit the Object prototype. */\n        let prototype = Object.getPrototypeOf(object);\n        if (prototype.constructor.name !== 'Object' && prototype.constructor.name !== 'Array') {\n            methodDescriptors = extend(ObjectHelper.getMethodDescriptors(prototype), methodDescriptors);\n        }\n\n        return methodDescriptors;\n\n    }\n\n    /* Returns a new object with all enumerable properties of the given object */\n    static getEnumerableProperties(object) {\n\n        return ObjectHelper.getPrototypeEnumerableProperties(object, object);\n\n    }\n\n    static getPrototypeEnumerableProperties(rootObject, prototype) {\n        let result = {};\n\n        /* Collect all propertise in the prototype's keys() enumerable */\n        let propNames = Object.keys(prototype);\n        for (let name of propNames) {\n            let value = rootObject[name];\n\n            /* Value must be a non-null primitive or object to be pushable to a dataSource */\n            if (value !== null && value !== undefined && typeof value !==\n                'function') {\n                if (typeof value === 'object' && !(value instanceof Array)) {\n                    result[name] = ObjectHelper.getEnumerableProperties(value);\n                } else {\n                    result[name] = value;\n                }\n            }\n        }\n\n        /* Collect all properties with accessors (getters/setters) that are enumerable, too */\n        let descriptorNames = Object.getOwnPropertyNames(prototype);\n        descriptorNames = descriptorNames.filter(function (name) {\n            return propNames.indexOf(name) < 0;\n        });\n        for (let name of descriptorNames) {\n            let descriptor = Object.getOwnPropertyDescriptor(prototype, name);\n            if (descriptor && descriptor.enumerable) {\n                let value = rootObject[name];\n\n                /* Value must be a non-null primitive or object to be pushable to a dataSource */\n                if (value !== null && value !== undefined && typeof value !== 'function') {\n                    if (typeof value === 'object' && !(value instanceof Array)) {\n                        result[name] = ObjectHelper.getEnumerableProperties(value);\n                    } else {\n                        result[name] = value;\n                    }\n                }\n            }\n        }\n\n        /* Collect all enumerable properties in the prototype's prototype as well */\n        let superPrototype = Object.getPrototypeOf(prototype);\n        let ignorableTypes = ['Object', 'Array', 'EventEmitter'];\n        if (ignorableTypes.indexOf(superPrototype.constructor.name) === -1) {\n            let prototypeEnumerables = ObjectHelper.getPrototypeEnumerableProperties(rootObject, superPrototype);\n            merge(result, prototypeEnumerables);\n        }\n\n        return result;\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/ObjectHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1156,
    "kind": "class",
    "name": "ObjectHelper",
    "memberof": "src/utils/ObjectHelper.js",
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/ObjectHelper.js",
    "importStyle": "{ObjectHelper}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1157,
    "kind": "method",
    "name": "hideMethodsAndPrivatePropertiesFromObject",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.hideMethodsAndPrivatePropertiesFromObject",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1158,
    "kind": "method",
    "name": "hideMethodsFromObject",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.hideMethodsFromObject",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1159,
    "kind": "method",
    "name": "hidePropertyFromObject",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.hidePropertyFromObject",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "propName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1160,
    "kind": "method",
    "name": "hideAllPropertiesFromObject",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.hideAllPropertiesFromObject",
    "access": "public",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1161,
    "kind": "method",
    "name": "addHiddenPropertyToObject",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.addHiddenPropertyToObject",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "propName",
        "types": [
          "*"
        ]
      },
      {
        "name": "prop",
        "types": [
          "*"
        ]
      },
      {
        "name": "writable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "useAccessors",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1162,
    "kind": "method",
    "name": "addPropertyToObject",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.addPropertyToObject",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "propName",
        "types": [
          "*"
        ]
      },
      {
        "name": "prop",
        "types": [
          "*"
        ]
      },
      {
        "name": "enumerable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "writable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "setCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "getCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "useAccessors",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1163,
    "kind": "method",
    "name": "deepAddAllGetSetPropertyWithShadow",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.deepAddAllGetSetPropertyWithShadow",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "enumerable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "writable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "setCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "getCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "nestedPropertyPath",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1164,
    "kind": "method",
    "name": "addGetSetPropertyWithShadow",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.addGetSetPropertyWithShadow",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "propName",
        "types": [
          "*"
        ]
      },
      {
        "name": "prop",
        "types": [
          "*"
        ]
      },
      {
        "name": "enumerable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "writable",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": true,
        "defaultValue": "true"
      },
      {
        "name": "setCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "getCallback",
        "optional": true,
        "types": [
          "undefined"
        ],
        "defaultValue": "undefined"
      },
      {
        "name": "appendToGetter",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1165,
    "kind": "method",
    "name": "buildPropertyShadow",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.buildPropertyShadow",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "propName",
        "types": [
          "*"
        ]
      },
      {
        "name": "prop",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1166,
    "kind": "method",
    "name": "buildGetSetProperty",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.buildGetSetProperty",
    "access": "public",
    "description": "",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": "The object that we are binding to"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "propName",
        "description": "The name of the property that should be overriden"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enumerable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "writable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "setCallback",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getCallback",
        "description": "A function that takes as a single argument the property that is about to be get. Should\nreturn that thing as well"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1167,
    "kind": "method",
    "name": "bindAllMethods",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.bindAllMethods",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "bindTarget",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1168,
    "kind": "method",
    "name": "getMethodDescriptors",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.getMethodDescriptors",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1169,
    "kind": "method",
    "name": "getEnumerableProperties",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.getEnumerableProperties",
    "access": "public",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1170,
    "kind": "method",
    "name": "getPrototypeEnumerableProperties",
    "memberof": "src/utils/ObjectHelper.js~ObjectHelper",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/ObjectHelper.js~ObjectHelper.getPrototypeEnumerableProperties",
    "access": "public",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "params": [
      {
        "name": "rootObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "prototype",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1171,
    "kind": "file",
    "name": "src/utils/Throttler.js",
    "content": "/**\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport Timer                            from 'famous/utilities/Timer.js';\nimport {ObjectHelper}                   from './ObjectHelper.js';\n\nexport class Throttler {\n    /**\n     *\n     * @param {Number} throttleDelay Minimum amount of time in between each action executed by the Throttler, in milliseconds or ticks.\n     * @param {Boolean} shouldQueue Enable if each added action should be executed consecutively, or disable if a newly\n     * added action should replace a previous one.\n     * @param {Object} actionContext Context to which the actions executed by the Throttler will be bound.\n     * @param {Boolean} useTicks whether ticks should be used instead of milliseconds\n     * @returns {Throttler} Throttler instance.\n     */\n    constructor(throttleDelay = 0, shouldQueue = true, actionContext = this, useTicks = false) {\n        this.delay = throttleDelay;\n        this._useTicks = useTicks;\n        this._timerFunction = useTicks ? Timer.every : Timer.setInterval;\n        this.timer = null;\n        this.shouldQueue = shouldQueue;\n        this.actionContext = actionContext;\n\n        this.queue = [];\n        this.executionTimer = null;\n\n    }\n\n    /**\n     * Adds an executable action to the queue that will be executed consecutively by the Throttler.\n     * If Throttler was constructed with shouldQueue = false, adding a new action will remove the old one.\n     * @param {Function} action Function to execute.\n     * @returns {void}\n     */\n    add(action) {\n        if(this.delay === 0){\n            action.call(this.actionContext);\n        } else {\n            /* If we're not queueing, clear the previous action if present. The new action will replace the old one. */\n            if (!this.shouldQueue) {\n                this.queue.pop();\n            }\n\n            this.queue.push(action);\n            this._setTimer();\n        }\n\n    }\n\n    async _setTimer() {\n        if (!this.timer) {\n            this.timer = this._timerFunction(this._executeTopAction.bind(this), this.delay);\n        }\n    }\n\n    /**\n     * Clears the Throttler's timer if it is set.\n     * @returns {void}\n     * @private\n     */\n    _clearTimer() {\n        Timer.clear(this.timer);\n        this.timer = null;\n    }\n\n    async _awaitPromise() {\n        if(this.waitFor && this.waitFor instanceof Promise) {\n            await this.waitFor;\n            this.waitFor = null;\n        }\n    }\n\n    /**\n     * Removes the top action from the Throttler's queue if any is present, and executes it with the correct binding context.\n     * @returns {void}\n     * @private\n     */\n    async _executeTopAction() {\n        if(this.waitFor && this.waitFor instanceof Promise) {\n            return;\n        }\n\n        let action = this.queue.shift();\n        if (action && typeof action === 'function') {\n            let result = action.call(this.actionContext);\n            this.waitFor = result instanceof Promise ? result : null;\n        }\n\n        if (!this.queue.length) {\n            this._clearTimer();\n        } else {\n            this._clearTimer();\n            await this._awaitPromise();\n            this._setTimer();\n        }\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/Throttler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1172,
    "kind": "class",
    "name": "Throttler",
    "memberof": "src/utils/Throttler.js",
    "static": true,
    "longname": "src/utils/Throttler.js~Throttler",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/Throttler.js",
    "importStyle": "{Throttler}",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1173,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/Throttler.js~Throttler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Throttler} Throttler instance."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "throttleDelay",
        "description": "Minimum amount of time in between each action executed by the Throttler, in milliseconds or ticks."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "shouldQueue",
        "description": "Enable if each added action should be executed consecutively, or disable if a newly\nadded action should replace a previous one."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "actionContext",
        "description": "Context to which the actions executed by the Throttler will be bound."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useTicks",
        "description": "whether ticks should be used instead of milliseconds"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Throttler"
      ],
      "spread": false,
      "description": "Throttler instance."
    }
  },
  {
    "__docId__": 1174,
    "kind": "member",
    "name": "delay",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#delay",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1175,
    "kind": "member",
    "name": "_useTicks",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#_useTicks",
    "access": "private",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1176,
    "kind": "member",
    "name": "_timerFunction",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#_timerFunction",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1177,
    "kind": "member",
    "name": "timer",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#timer",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1178,
    "kind": "member",
    "name": "shouldQueue",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#shouldQueue",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1179,
    "kind": "member",
    "name": "actionContext",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#actionContext",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1180,
    "kind": "member",
    "name": "queue",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#queue",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1181,
    "kind": "member",
    "name": "executionTimer",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#executionTimer",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1182,
    "kind": "method",
    "name": "add",
    "memberof": "src/utils/Throttler.js~Throttler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#add",
    "access": "public",
    "description": "Adds an executable action to the queue that will be executed consecutively by the Throttler.\nIf Throttler was constructed with shouldQueue = false, adding a new action will remove the old one.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "action",
        "description": "Function to execute."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1183,
    "kind": "method",
    "name": "_setTimer",
    "memberof": "src/utils/Throttler.js~Throttler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#_setTimer",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1185,
    "kind": "method",
    "name": "_clearTimer",
    "memberof": "src/utils/Throttler.js~Throttler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#_clearTimer",
    "access": "private",
    "description": "Clears the Throttler's timer if it is set.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1187,
    "kind": "method",
    "name": "_awaitPromise",
    "memberof": "src/utils/Throttler.js~Throttler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#_awaitPromise",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1188,
    "kind": "member",
    "name": "waitFor",
    "memberof": "src/utils/Throttler.js~Throttler",
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#waitFor",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1189,
    "kind": "method",
    "name": "_executeTopAction",
    "memberof": "src/utils/Throttler.js~Throttler",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/Throttler.js~Throttler#_executeTopAction",
    "access": "private",
    "description": "Removes the top action from the Throttler's queue if any is present, and executes it with the correct binding context.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1191,
    "kind": "file",
    "name": "src/utils/di/Decorators.js",
    "content": "/* */\nimport {isFunction} from './Util.js';\n\n// This module contains:\n// - built-in annotation classes\n// - helpers to read/write annotations\n\n\n// ANNOTATIONS\n\n// A built-in token.\n// Used to ask for pre-injected parent constructor.\n// A class constructor can ask for this.\n/**\n * @ignore\n */\nclass SuperConstructor {\n}\n\n// A built-in scope.\n// Never cache.\n/**\n * @ignore\n */\nclass TransientScope {\n}\n\n/**\n * @ignore\n */\nclass Inject {\n    constructor(...tokens) {\n        this.tokens = tokens;\n    }\n}\n\n/**\n * @ignore\n */\nclass Provide {\n    constructor(token) {\n        this.token = token;\n    }\n}\n/**\n * @ignore\n */\nclass ClassProvider {\n}\n/**\n * @ignore\n */\nclass FactoryProvider {\n}\n\n\n// HELPERS\n\n// Append annotation on a function or class.\n// This can be helpful when not using ES6+.\n/**\n * @ignore\n */\nfunction annotate(fn, annotation) {\n    fn.annotations = fn.annotations || [];\n    fn.annotations.push(annotation);\n}\n\n\n// Read annotations on a function or class and return whether given annotation is present.\n/**\n * @ignore\n */\nfunction hasAnnotation(fn, annotationClass) {\n    if (!fn.annotations || fn.annotations.length === 0) {\n        return false;\n    }\n\n    for (var annotation of fn.annotations) {\n        if (annotation instanceof annotationClass) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n\n// Read annotations on a function or class and collect \"interesting\" metadata:\n/**\n * @ignore\n */\nfunction readAnnotations(fn) {\n    var collectedAnnotations = {\n        // Description of the provided value.\n        provide: {\n            token: null\n        },\n\n        // List of parameter descriptions.\n        // A parameter description is an object with properties:\n        // - token (anything)\n        params: []\n    };\n\n    if (fn.annotations && fn.annotations.length) {\n        for (var annotation of fn.annotations) {\n            if (annotation instanceof Inject) {\n                annotation.tokens.forEach((token) => {\n                    collectedAnnotations.params.push({\n                        token: token\n                    });\n                });\n            }\n\n            if (annotation instanceof Provide) {\n                collectedAnnotations.provide.token = annotation.token;\n            }\n        }\n    }\n\n    // Read annotations for individual parameters.\n    if (fn.parameters) {\n        fn.parameters.forEach((param, idx) => {\n            for (var paramAnnotation of param) {\n                // Type annotation.\n                if (isFunction(paramAnnotation) && !collectedAnnotations.params[idx]) {\n                    collectedAnnotations.params[idx] = {\n                        token: paramAnnotation\n                    };\n                } else if (paramAnnotation instanceof Inject) {\n                    collectedAnnotations.params[idx] = {\n                        token: paramAnnotation.tokens[0]\n                    };\n                }\n            }\n        });\n    }\n\n    return collectedAnnotations;\n}\n\n// Decorator versions of annotation classes\n/**\n * @ignore\n */\nfunction inject(...tokens) {\n    return function (fn) {\n        annotate(fn, new Inject(...tokens));\n    };\n}\n\n/**\n * @ignore\n */\nfunction inject(...tokens) {\n    return function (fn) {\n        annotate(fn, new Inject(...tokens));\n    };\n}\n\n/**\n * @ignore\n */\nfunction provide(...tokens) {\n    return function (fn) {\n        annotate(fn, new Provide(...tokens));\n    };\n}\n\nexport {\n    annotate,\n    hasAnnotation,\n    readAnnotations,\n\n    SuperConstructor,\n    TransientScope,\n    Inject,\n    Provide,\n    ClassProvider,\n    FactoryProvider,\n\n    inject,\n    provide,\n};\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/di/Decorators.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1192,
    "kind": "function",
    "name": "inject",
    "memberof": "src/utils/di/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Decorators.js~inject",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 156,
    "ignore": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1193,
    "kind": "function",
    "name": "annotate",
    "memberof": "src/utils/di/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Decorators.js~annotate",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{annotate}",
    "description": "",
    "lineNumber": 64,
    "ignore": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "annotation",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1194,
    "kind": "function",
    "name": "hasAnnotation",
    "memberof": "src/utils/di/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Decorators.js~hasAnnotation",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{hasAnnotation}",
    "description": "",
    "lineNumber": 74,
    "ignore": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      },
      {
        "name": "annotationClass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1195,
    "kind": "function",
    "name": "readAnnotations",
    "memberof": "src/utils/di/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Decorators.js~readAnnotations",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{readAnnotations}",
    "description": "",
    "lineNumber": 93,
    "ignore": true,
    "params": [
      {
        "name": "fn",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1196,
    "kind": "class",
    "name": "SuperConstructor",
    "memberof": "src/utils/di/Decorators.js",
    "static": true,
    "longname": "src/utils/di/Decorators.js~SuperConstructor",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{SuperConstructor}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1197,
    "kind": "class",
    "name": "TransientScope",
    "memberof": "src/utils/di/Decorators.js",
    "static": true,
    "longname": "src/utils/di/Decorators.js~TransientScope",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{TransientScope}",
    "description": "",
    "lineNumber": 25,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1198,
    "kind": "class",
    "name": "Inject",
    "memberof": "src/utils/di/Decorators.js",
    "static": true,
    "longname": "src/utils/di/Decorators.js~Inject",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{Inject}",
    "description": "",
    "lineNumber": 31,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1199,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/di/Decorators.js~Inject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Decorators.js~Inject#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 32,
    "undocument": true
  },
  {
    "__docId__": 1200,
    "kind": "member",
    "name": "tokens",
    "memberof": "src/utils/di/Decorators.js~Inject",
    "static": false,
    "longname": "src/utils/di/Decorators.js~Inject#tokens",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1201,
    "kind": "class",
    "name": "Provide",
    "memberof": "src/utils/di/Decorators.js",
    "static": true,
    "longname": "src/utils/di/Decorators.js~Provide",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{Provide}",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1202,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/di/Decorators.js~Provide",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Decorators.js~Provide#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 41,
    "undocument": true
  },
  {
    "__docId__": 1203,
    "kind": "member",
    "name": "token",
    "memberof": "src/utils/di/Decorators.js~Provide",
    "static": false,
    "longname": "src/utils/di/Decorators.js~Provide#token",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1204,
    "kind": "class",
    "name": "ClassProvider",
    "memberof": "src/utils/di/Decorators.js",
    "static": true,
    "longname": "src/utils/di/Decorators.js~ClassProvider",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{ClassProvider}",
    "description": "",
    "lineNumber": 48,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1205,
    "kind": "class",
    "name": "FactoryProvider",
    "memberof": "src/utils/di/Decorators.js",
    "static": true,
    "longname": "src/utils/di/Decorators.js~FactoryProvider",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{FactoryProvider}",
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1206,
    "kind": "function",
    "name": "inject",
    "memberof": "src/utils/di/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Decorators.js~inject",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{inject}",
    "description": "",
    "lineNumber": 147,
    "ignore": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1207,
    "kind": "function",
    "name": "provide",
    "memberof": "src/utils/di/Decorators.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Decorators.js~provide",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Decorators.js",
    "importStyle": "{provide}",
    "description": "",
    "lineNumber": 165,
    "ignore": true,
    "params": [
      {
        "name": "tokens",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1208,
    "kind": "file",
    "name": "src/utils/di/HashSum.js",
    "content": "/* https://github.com/bevacqua/hash-sum */\n'use strict';\n\nfunction pad(hash, len) {\n    while (hash.length < len) {\n        hash = '0' + hash;\n    }\n    return hash;\n}\n\nfunction fold(hash, text) {\n    var i;\n    var chr;\n    var len;\n    if (text.length === 0) {\n        return hash;\n    }\n    for (i = 0, len = text.length; i < len; i++) {\n        chr = text.charCodeAt(i);\n        hash = ((hash << 5) - hash) + chr;\n        hash |= 0;\n    }\n    return hash < 0 ? hash * -2 : hash;\n}\n\nfunction foldObject(hash, o, seen) {\n    return Object.keys(o).sort().reduce(foldKey, hash);\n    function foldKey(hash, key) {\n        return foldValue(hash, o[key], key, seen);\n    }\n}\n\nfunction foldValue(input, value, key, seen) {\n    var hash = fold(fold(fold(input, key), toString(value)), typeof value);\n    if (value === null) {\n        return fold(hash, 'null');\n    }\n    if (value === undefined) {\n        return fold(hash, 'undefined');\n    }\n    if (typeof value === 'object') {\n        if (seen.indexOf(value) !== -1) {\n            return fold(hash, '[Circular]' + key);\n        }\n        seen.push(value);\n        return foldObject(hash, value, seen);\n    }\n    return fold(hash, value.toString());\n}\n\nfunction toString(o) {\n    return Object.prototype.toString.call(o);\n}\n\nfunction sum(o) {\n    return pad(foldValue(0, o, '', []).toString(16), 8);\n}\n\nmodule.exports = sum;",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/di/HashSum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1209,
    "kind": "function",
    "name": "pad",
    "memberof": "src/utils/di/HashSum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/HashSum.js~pad",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/HashSum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1210,
    "kind": "function",
    "name": "fold",
    "memberof": "src/utils/di/HashSum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/HashSum.js~fold",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/HashSum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "text",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1211,
    "kind": "function",
    "name": "foldObject",
    "memberof": "src/utils/di/HashSum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/HashSum.js~foldObject",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/HashSum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "seen",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1212,
    "kind": "function",
    "name": "foldValue",
    "memberof": "src/utils/di/HashSum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/HashSum.js~foldValue",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/HashSum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "input",
        "types": [
          "*"
        ]
      },
      {
        "name": "value",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "seen",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1213,
    "kind": "function",
    "name": "toString",
    "memberof": "src/utils/di/HashSum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/HashSum.js~toString",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/HashSum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1214,
    "kind": "function",
    "name": "sum",
    "memberof": "src/utils/di/HashSum.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/HashSum.js~sum",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/HashSum.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1215,
    "kind": "file",
    "name": "src/utils/di/Injector.js",
    "content": "/* */\n\nimport hash from './HashSum.js';\nimport {\n    annotate,\n    readAnnotations,\n    hasAnnotation,\n    Provide as ProvideAnnotation,\n    TransientScope as TransientScopeAnnotation\n} from './Decorators.js';\nimport {isFunction, toString} from './Util.js';\nimport {createProviderFromFnOrClass} from './Providers.js';\n\n\nfunction constructResolvingMessage(resolving, token) {\n    // If a token is passed in, add it into the resolving array.\n    // We need to check arguments.length because it can be null/undefined.\n    if (arguments.length > 1) {\n        resolving.push(token);\n    }\n\n    if (resolving.length > 1) {\n        return ` (${resolving.map(toString).join(' -> ')})`;\n    }\n\n    return '';\n}\n\n\n// Injector encapsulate a life scope.\n// There is exactly one instance for given token in given injector.\n//\n// All the state is immutable, the only state changes is the cache. There is however no way to produce different instance under given token. In that sense it is immutable.\n//\n// Injector is responsible for:\n// - resolving tokens into\n//   - provider\n//   - value (cache/calling provider)\n// - loading different \"providers\" and modules\n/**\n * @ignore\n */\nclass Injector {\n\n    constructor(modules = [], parentInjector = null, providers = new Map(), scopes = []) {\n        this._cache = new Map();\n        this._providers = providers;\n        this._parent = parentInjector;\n        this._scopes = scopes;\n\n        this._tokenCache = new Map();\n\n        this._loadModules(modules);\n    }\n\n    _retrieveTokens(classConstructor, constructionParams = []) {\n        /* The class constructor needs to be hashed due to problems with equality of constructors when importing from\n         * non-jspm modules.\n         */\n        let hashedClassConstructor = hash(classConstructor);\n\n        if (!this._tokenCache.has(hashedClassConstructor)) {\n            this._tokenCache.set(hashedClassConstructor, new Map());\n        }\n\n        let paramsHash = hash(constructionParams);\n        let cachedClass = this._tokenCache.get(hashedClassConstructor);\n        if (!cachedClass.has(paramsHash)) {\n            /* Generate a new token */\n            cachedClass.set(paramsHash, `${Date.now()}${Math.random()}`);\n        }\n\n        // let foundHash = cachedClass.get(paramsHash);\n        // return classConstructor.name ? `${classConstructor.name}-${foundHash}` : foundHash;\n        return {\n            classToken: classConstructor.name ? \n                `${classConstructor.name}-${hashedClassConstructor}` : hashedClassConstructor,\n            paramsToken: paramsHash\n        };\n    }\n\n\n    // Collect all registered providers that has given annotation.\n    // Including providers defined in parent injectors.\n    _collectProvidersWithAnnotation(annotationClass, collectedProviders) {\n        this._providers.forEach((provider, token) => {\n            if (!collectedProviders.has(token) && hasAnnotation(provider.provider, annotationClass)) {\n                collectedProviders.set(token, provider);\n            }\n        });\n\n        if (this._parent) {\n            this._parent._collectProvidersWithAnnotation(annotationClass, collectedProviders);\n        }\n    }\n\n\n    // Load modules/function/classes.\n    // This mutates `this._providers`, but it is only called during the constructor.\n    _loadModules(modules) {\n        for (var module of modules) {\n            // A single provider (class or function).\n            if (isFunction(module)) {\n                this._loadFnOrClass(module);\n                continue;\n            }\n\n            throw new Error('Invalid module!');\n        }\n    }\n\n\n    // Load a function or class.\n    // This mutates `this._providers`, but it is only called during the constructor.\n    _loadFnOrClass(classConstructor) {\n        var annotations = readAnnotations(classConstructor);\n        var {classToken, paramsToken} = this._retrieveTokens(annotations.provide.token || classConstructor, []);\n        var provider = createProviderFromFnOrClass(classConstructor, annotations);\n        /* Delete the cache so we try to retrieve it again if replacing an old provider */\n        this._cache.delete(`${classToken}${paramsToken}`);\n        this._providers.set(classToken, provider);\n    }\n\n\n    // Returns true if there is any provider registered for given token.\n    // Including parent injectors.\n    _hasProviderFor(token) {\n        if (this._providers.has(token)) {\n            return true;\n        }\n\n        if (this._parent) {\n            return this._parent._hasProviderFor(token);\n        }\n\n        return false;\n    }\n\n    // Find the correct injector where the default provider should be instantiated and cached.\n    _instantiateDefaultProvider(provider, token, classConstructor, constructionParams, resolving) {\n        // In root injector, instantiate here.\n        if (!this._parent) {\n            this._providers.set(token, provider);\n            return this.get(classConstructor, constructionParams, resolving);\n        }\n\n        // Check if this injector forces new instance of this provider.\n        for (var ScopeClass of this._scopes) {\n            if (hasAnnotation(provider.provider, ScopeClass)) {\n                this._providers.set(token, provider);\n                return this.get(token, resolving);\n            }\n        }\n\n        // Otherwise ask parent injector.\n        return this._parent._instantiateDefaultProvider(provider, token, resolving);\n    }\n\n\n    // Return an instance for given token.\n    get(classConstructor, constructionParams = [], resolving = []) {\n        var resolvingMsg = '';\n        var provider;\n        var instance;\n        var {classToken, paramsToken} = this._retrieveTokens(classConstructor, constructionParams);\n        var combinedToken = `${classToken}${paramsToken}`;\n\n        // Check if there is a cached instance already.\n        if (this._cache.has(combinedToken)) {\n            instance = this._cache.get(combinedToken);\n            return instance;\n        }\n        provider = this._providers.get(classToken);\n\n        // No provider defined (overridden), use the default provider (token).\n        if (!provider && isFunction(classConstructor) && !this._hasProviderFor(classToken)) {\n            provider = createProviderFromFnOrClass(classConstructor, readAnnotations(classConstructor));\n            return this._instantiateDefaultProvider(provider, classToken, classConstructor, constructionParams, resolving);\n        }\n\n        if (!provider) {\n            if (!this._parent) {\n                resolvingMsg = constructResolvingMessage(resolving, classToken);\n                throw new Error(`No provider for ${toString(classToken)}!${resolvingMsg}`);\n            }\n\n            return this._parent.get(combinedToken, resolving);\n        }\n\n        if (resolving.indexOf(combinedToken) !== -1) {\n            resolvingMsg = constructResolvingMessage(resolving, combinedToken);\n            throw new Error(`Cannot instantiate cyclic dependency!${resolvingMsg}`);\n        }\n\n        resolving.push(combinedToken);\n\n        var args = provider.params.map((param) => {\n            return this.get(param.token, undefined, resolving);\n        });\n\n        /* Add custom construction parameters to construction */\n        args = args.concat(constructionParams);\n        instance = provider.create(args);\n\n\n        if (!hasAnnotation(provider.provider, TransientScopeAnnotation)) {\n            this._cache.set(combinedToken, instance);\n        }\n\n        resolving.pop();\n\n        return instance;\n    }\n\n\n    // Create a child injector, which encapsulate shorter life scope.\n    // It is possible to add additional providers and also force new instances of existing providers.\n    createChild(modules = [], forceNewInstancesOf = []) {\n        var forcedProviders = new Map();\n\n        // Always force new instance of TransientScope.\n        forceNewInstancesOf.push(TransientScopeAnnotation);\n\n        for (var annotation of forceNewInstancesOf) {\n            this._collectProvidersWithAnnotation(annotation, forcedProviders);\n        }\n\n        return new Injector(modules, this, forcedProviders, forceNewInstancesOf);\n    }\n}\n\n\nexport {Injector};\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/di/Injector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1216,
    "kind": "function",
    "name": "constructResolvingMessage",
    "memberof": "src/utils/di/Injector.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Injector.js~constructResolvingMessage",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/Injector.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "resolving",
        "types": [
          "*"
        ]
      },
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1217,
    "kind": "class",
    "name": "Injector",
    "memberof": "src/utils/di/Injector.js",
    "static": true,
    "longname": "src/utils/di/Injector.js~Injector",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Injector.js",
    "importStyle": "{Injector}",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1218,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true
  },
  {
    "__docId__": 1219,
    "kind": "member",
    "name": "_cache",
    "memberof": "src/utils/di/Injector.js~Injector",
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_cache",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1220,
    "kind": "member",
    "name": "_providers",
    "memberof": "src/utils/di/Injector.js~Injector",
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_providers",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1221,
    "kind": "member",
    "name": "_parent",
    "memberof": "src/utils/di/Injector.js~Injector",
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_parent",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1222,
    "kind": "member",
    "name": "_scopes",
    "memberof": "src/utils/di/Injector.js~Injector",
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_scopes",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1223,
    "kind": "member",
    "name": "_tokenCache",
    "memberof": "src/utils/di/Injector.js~Injector",
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_tokenCache",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1224,
    "kind": "method",
    "name": "_retrieveTokens",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_retrieveTokens",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [
      {
        "name": "classConstructor",
        "types": [
          "*"
        ]
      },
      {
        "name": "constructionParams",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "{\"classToken\": *, \"paramsToken\": *}"
      ]
    }
  },
  {
    "__docId__": 1225,
    "kind": "method",
    "name": "_collectProvidersWithAnnotation",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_collectProvidersWithAnnotation",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "params": [
      {
        "name": "annotationClass",
        "types": [
          "*"
        ]
      },
      {
        "name": "collectedProviders",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1226,
    "kind": "method",
    "name": "_loadModules",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_loadModules",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "params": [
      {
        "name": "modules",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1227,
    "kind": "method",
    "name": "_loadFnOrClass",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_loadFnOrClass",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [
      {
        "name": "classConstructor",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1228,
    "kind": "method",
    "name": "_hasProviderFor",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_hasProviderFor",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1229,
    "kind": "method",
    "name": "_instantiateDefaultProvider",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#_instantiateDefaultProvider",
    "access": "private",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "provider",
        "types": [
          "*"
        ]
      },
      {
        "name": "token",
        "types": [
          "*"
        ]
      },
      {
        "name": "classConstructor",
        "types": [
          "*"
        ]
      },
      {
        "name": "constructionParams",
        "types": [
          "*"
        ]
      },
      {
        "name": "resolving",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1230,
    "kind": "method",
    "name": "get",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#get",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [
      {
        "name": "classConstructor",
        "types": [
          "*"
        ]
      },
      {
        "name": "constructionParams",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "resolving",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1231,
    "kind": "method",
    "name": "createChild",
    "memberof": "src/utils/di/Injector.js~Injector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Injector.js~Injector#createChild",
    "access": "public",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "modules",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "forceNewInstancesOf",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1232,
    "kind": "file",
    "name": "src/utils/di/Providers.js",
    "content": "/* */\nimport {\n    ClassProvider as ClassProviderAnnotation,\n    FactoryProvider as FactoryProviderAnnotation,\n    SuperConstructor as SuperConstructorAnnotation,\n    readAnnotations,\n    hasAnnotation\n} from './Decorators.js';\nimport {isFunction, isObject, toString, isUpperCase, ownKeys} from './Util.js';\n\nfunction isClass(clsOrFunction) {\n\n    if (hasAnnotation(clsOrFunction, ClassProviderAnnotation)) {\n        return true;\n    } else if (hasAnnotation(clsOrFunction, FactoryProviderAnnotation)) {\n        return false;\n    }\n    /* When code is minified, class names are no longer upper case, so we skip this check\n     * if the name is oddly short (which happens during minification). */\n    else if (clsOrFunction.name && clsOrFunction.name.length && clsOrFunction.name.length > 3) {\n        return isUpperCase(clsOrFunction.name.charAt(0));\n    } else {\n        return ownKeys(clsOrFunction.prototype || {}).length > 0;\n    }\n}\n\n// Provider is responsible for creating instances.\n//\n// responsibilities:\n// - create instances\n//\n// communication:\n// - exposes `create()` which creates an instance of something\n// - exposes `params` (information about which arguments it requires to be passed into `create()`)\n//\n// Injector reads `provider.params` first, create these dependencies (however it wants),\n// then calls `provider.create(args)`, passing in these arguments.\n\n\nvar EmptyFunction = Object.getPrototypeOf(Function);\n\n\n// ClassProvider knows how to instantiate classes.\n//\n// If a class inherits (has parent constructors), this provider normalizes all the dependencies\n// into a single flat array first, so that the injector does not need to worry about inheritance.\n//\n// - all the state is immutable (constructed)\n//\n/**\n * @ignore\n */\nclass ClassProvider {\n    constructor(clazz, params) {\n        // TODO(vojta): can we hide this.provider? (only used for hasAnnotation(provider.provider))\n        this.provider = clazz;\n\n        this.params = [];\n        this._constructors = [];\n\n        this._flattenParams(clazz, params);\n        this._constructors.unshift([clazz, 0, this.params.length - 1]);\n    }\n\n    // Normalize params for all the constructors (in the case of inheritance),\n    // into a single flat array of DependencyDescriptors.\n    // So that the injector does not have to worry about inheritance.\n    //\n    // This function mutates `this.params` and `this._constructors`,\n    // but it is only called during the constructor.\n    // TODO(vojta): remove the annotations argument?\n    _flattenParams(constructor, params) {\n        var SuperConstructor;\n        var constructorInfo;\n\n        for (var param of params) {\n            if (param.token === SuperConstructorAnnotation) {\n                SuperConstructor = Object.getPrototypeOf(constructor);\n\n                if (SuperConstructor === EmptyFunction) {\n                    throw new Error(`${toString(constructor)} does not have a parent constructor. Only classes with a parent can ask for SuperConstructor!`);\n                }\n\n                constructorInfo = [SuperConstructor, this.params.length];\n                this._constructors.push(constructorInfo);\n                this._flattenParams(SuperConstructor, readAnnotations(SuperConstructor).params);\n                constructorInfo.push(this.params.length - 1);\n            } else {\n                this.params.push(param);\n            }\n        }\n    }\n\n    // Basically the reverse process to `this._flattenParams`:\n    // We get arguments for all the constructors as a single flat array.\n    // This method generates pre-bound \"superConstructor\" wrapper with correctly passing arguments.\n    _createConstructor(currentConstructorIdx, context, allArguments) {\n        var constructorInfo = this._constructors[currentConstructorIdx];\n        var nextConstructorInfo = this._constructors[currentConstructorIdx + 1];\n        var argsForCurrentConstructor;\n\n        if (nextConstructorInfo) {\n            argsForCurrentConstructor = allArguments\n                .slice(constructorInfo[1], nextConstructorInfo[1])\n                .concat([this._createConstructor(currentConstructorIdx + 1, context, allArguments)])\n                .concat(allArguments.slice(nextConstructorInfo[2] + 1, constructorInfo[2] + 1));\n        } else {\n            argsForCurrentConstructor = allArguments\n            /*.slice(constructorInfo[1], constructorInfo[2] + 1);*/\n        }\n\n        return function InjectedAndBoundSuperConstructor() {\n            // https://stackoverflow.com/questions/33193310/constr-applythis-args-in-es6-classes\n            return new (Function.prototype.bind.apply(constructorInfo[0], [context].concat(argsForCurrentConstructor)));\n        };\n    }\n\n    // It is called by injector to create an instance.\n    create(args) {\n        var context = Object.create(this.provider.prototype);\n        var constructor = this._createConstructor(0, context, args);\n        var returnedValue = constructor();\n\n        if (isFunction(returnedValue) || isObject(returnedValue)) {\n            return returnedValue;\n        }\n\n        return context;\n    }\n}\n\n\n// FactoryProvider knows how to create instance from a factory function.\n// - all the state is immutable\n/**\n * @ignore\n */\nclass FactoryProvider {\n    constructor(factoryFunction, params) {\n        this.provider = factoryFunction;\n        this.params = params;\n\n        for (var param of params) {\n            if (param.token === SuperConstructorAnnotation) {\n                throw new Error(`${toString(factoryFunction)} is not a class. Only classes with a parent can ask for SuperConstructor!`);\n            }\n        }\n    }\n\n    create(args) {\n        return this.provider.apply(undefined, args);\n    }\n}\n\n/**\n * @ignore\n */\nexport function createProviderFromFnOrClass(fnOrClass, annotations) {\n    if (isClass(fnOrClass)) {\n        return new ClassProvider(fnOrClass, annotations.params);\n    }\n\n    return new FactoryProvider(fnOrClass, annotations.params);\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/di/Providers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1233,
    "kind": "function",
    "name": "isClass",
    "memberof": "src/utils/di/Providers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Providers.js~isClass",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/Providers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "clsOrFunction",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1234,
    "kind": "variable",
    "name": "EmptyFunction",
    "memberof": "src/utils/di/Providers.js",
    "static": true,
    "longname": "src/utils/di/Providers.js~EmptyFunction",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/Providers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1235,
    "kind": "class",
    "name": "ClassProvider",
    "memberof": "src/utils/di/Providers.js",
    "static": true,
    "longname": "src/utils/di/Providers.js~ClassProvider",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/Providers.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 53,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1236,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 54,
    "undocument": true
  },
  {
    "__docId__": 1237,
    "kind": "member",
    "name": "provider",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#provider",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1238,
    "kind": "member",
    "name": "params",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#params",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1239,
    "kind": "member",
    "name": "_constructors",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#_constructors",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1240,
    "kind": "method",
    "name": "_flattenParams",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#_flattenParams",
    "access": "private",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [
      {
        "name": "constructor",
        "types": [
          "*"
        ]
      },
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1241,
    "kind": "method",
    "name": "_createConstructor",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#_createConstructor",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [
      {
        "name": "currentConstructorIdx",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "allArguments",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1242,
    "kind": "method",
    "name": "create",
    "memberof": "src/utils/di/Providers.js~ClassProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Providers.js~ClassProvider#create",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1243,
    "kind": "class",
    "name": "FactoryProvider",
    "memberof": "src/utils/di/Providers.js",
    "static": true,
    "longname": "src/utils/di/Providers.js~FactoryProvider",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/di/Providers.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 138,
    "ignore": true,
    "interface": false
  },
  {
    "__docId__": 1244,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/di/Providers.js~FactoryProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Providers.js~FactoryProvider#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true
  },
  {
    "__docId__": 1245,
    "kind": "member",
    "name": "provider",
    "memberof": "src/utils/di/Providers.js~FactoryProvider",
    "static": false,
    "longname": "src/utils/di/Providers.js~FactoryProvider#provider",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1246,
    "kind": "member",
    "name": "params",
    "memberof": "src/utils/di/Providers.js~FactoryProvider",
    "static": false,
    "longname": "src/utils/di/Providers.js~FactoryProvider#params",
    "access": "public",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1247,
    "kind": "method",
    "name": "create",
    "memberof": "src/utils/di/Providers.js~FactoryProvider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/di/Providers.js~FactoryProvider#create",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1248,
    "kind": "function",
    "name": "createProviderFromFnOrClass",
    "memberof": "src/utils/di/Providers.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Providers.js~createProviderFromFnOrClass",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Providers.js",
    "importStyle": "{createProviderFromFnOrClass}",
    "description": "",
    "lineNumber": 158,
    "ignore": true,
    "params": [
      {
        "name": "fnOrClass",
        "types": [
          "*"
        ]
      },
      {
        "name": "annotations",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1249,
    "kind": "file",
    "name": "src/utils/di/Util.js",
    "content": "// A bunch of helper functions.\n\n/**\n * @ignore\n */\nfunction isUpperCase(char) {\n    return char.toUpperCase() === char;\n}\n\n/**\n * @ignore\n */\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\n\n/**\n * @ignore\n */\nfunction isObject(value) {\n    return typeof value === 'object';\n}\n\n/**\n * @ignore\n */\nfunction toString(token) {\n    if (typeof token === 'string') {\n        return token;\n    }\n\n    if (token === undefined || token === null) {\n        return '' + token;\n    }\n\n    if (token.name) {\n        return token.name;\n    }\n\n    return token.toString();\n}\n\n/**\n * @ignore\n */\nvar ownKeys = (this && this.Reflect && Reflect.ownKeys ? Reflect.ownKeys : function ownKeys(O) {\n    var keys = Object.getOwnPropertyNames(O);\n    if (Object.getOwnPropertySymbols) return keys.concat(Object.getOwnPropertySymbols(O));\n    return keys;\n});\n\n\nexport {\n    isUpperCase,\n    isFunction,\n    isObject,\n    toString,\n    ownKeys\n};\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/di/Util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1250,
    "kind": "function",
    "name": "isUpperCase",
    "memberof": "src/utils/di/Util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Util.js~isUpperCase",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Util.js",
    "importStyle": "{isUpperCase}",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "char",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1251,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/utils/di/Util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Util.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Util.js",
    "importStyle": "{isFunction}",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1252,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/utils/di/Util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Util.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Util.js",
    "importStyle": "{isObject}",
    "description": "",
    "lineNumber": 20,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1253,
    "kind": "function",
    "name": "toString",
    "memberof": "src/utils/di/Util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/di/Util.js~toString",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Util.js",
    "importStyle": "{toString}",
    "description": "",
    "lineNumber": 27,
    "ignore": true,
    "params": [
      {
        "name": "token",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1254,
    "kind": "variable",
    "name": "ownKeys",
    "memberof": "src/utils/di/Util.js",
    "static": true,
    "longname": "src/utils/di/Util.js~ownKeys",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/di/Util.js",
    "importStyle": "{ownKeys}",
    "description": "",
    "lineNumber": 46,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1255,
    "kind": "file",
    "name": "src/utils/dialog/DialogWrapper.js",
    "content": "/**\n * Created by Manuel on 08/02/2017.\n */\n\nimport {View}               from '../../core/View.js';\nimport {layout}             from '../../layout/Decorators.js';\n\n/**\n * Classed used to wrap a dialog, in order to provide a scrollable dialog with appropriate sizing\n */\n@layout.scrollable({overscroll: false})\nexport class DialogWrapper extends View {\n\n    /**\n     * Defines the size that is appropriate for the dialog. The dialog can return undefined on its getSize function for\n     * full-blown sizing instead of true sizing, and it can define a maxSize to specify a maximum that causes the margins\n     * to get larger.\n     * @param size\n     */\n    determineSizeWithMargins (size, maxSize, dimension) {\n        return ~Math.min(maxSize ? maxSize[dimension] : 480, size[dimension] - 32);\n    }\n\n    @layout.size(function(...size) {return this.determineSizeWithMargins(size, this.options.dialog.maxSize, 0)},\n        function(...size) {return this.determineSizeWithMargins(size, this.options.dialog.maxSize, 1)})\n    @layout.stick.center()\n    dialog = this.options.dialog;\n\n    onNewParentSize(parentSize) {\n        this._parentSize = parentSize;\n    }\n\n    /**\n     * The getSize function is used to determine the size by the scrolling behaviour. It will try to make sure that\n     * a too big dialog can be scrolled. If this isn't possible, it let's the dialog capture the entire screen\n     * @returns {*}\n     */\n    getSize() {\n        if (!this._parentSize) {\n            return [undefined, undefined];\n        }\n        let dialogHeight = this.dialog.getSize()[1];\n        let height;\n        if(dialogHeight !== undefined){\n            height = Math.max(this._parentSize[1], dialogHeight);\n        } else {\n            /* undefined height, let's make it the entire height  */\n            height = this._parentSize[1];\n        }\n        return [undefined, height];\n    }\n\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/dialog/DialogWrapper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1256,
    "kind": "class",
    "name": "DialogWrapper",
    "memberof": "src/utils/dialog/DialogWrapper.js",
    "static": true,
    "longname": "src/utils/dialog/DialogWrapper.js~DialogWrapper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/dialog/DialogWrapper.js",
    "importStyle": "{DialogWrapper}",
    "description": "Classed used to wrap a dialog, in order to provide a scrollable dialog with appropriate sizing",
    "lineNumber": 12,
    "decorators": [
      {
        "name": "layout.scrollable",
        "arguments": "({\n  overscroll: false\n})"
      }
    ],
    "interface": false,
    "extends": [
      "src/core/View.js~View"
    ]
  },
  {
    "__docId__": 1257,
    "kind": "method",
    "name": "determineSizeWithMargins",
    "memberof": "src/utils/dialog/DialogWrapper.js~DialogWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/dialog/DialogWrapper.js~DialogWrapper#determineSizeWithMargins",
    "access": "public",
    "description": "Defines the size that is appropriate for the dialog. The dialog can return undefined on its getSize function for\nfull-blown sizing instead of true sizing, and it can define a maxSize to specify a maximum that causes the margins\nto get larger.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1258,
    "kind": "member",
    "name": "dialog",
    "memberof": "src/utils/dialog/DialogWrapper.js~DialogWrapper",
    "static": false,
    "longname": "src/utils/dialog/DialogWrapper.js~DialogWrapper#dialog",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "decorators": [
      {
        "name": "layout.size",
        "arguments": "(function (...size) {\n  return this.determineSizeWithMargins(size, this.options.dialog.maxSize, 0);\n}, function (...size) {\n  return this.determineSizeWithMargins(size, this.options.dialog.maxSize, 1);\n})"
      },
      {
        "name": "layout.stick.center",
        "arguments": "()"
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1259,
    "kind": "method",
    "name": "onNewParentSize",
    "memberof": "src/utils/dialog/DialogWrapper.js~DialogWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/dialog/DialogWrapper.js~DialogWrapper#onNewParentSize",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "params": [
      {
        "name": "parentSize",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1260,
    "kind": "member",
    "name": "_parentSize",
    "memberof": "src/utils/dialog/DialogWrapper.js~DialogWrapper",
    "static": false,
    "longname": "src/utils/dialog/DialogWrapper.js~DialogWrapper#_parentSize",
    "access": "private",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1261,
    "kind": "method",
    "name": "getSize",
    "memberof": "src/utils/dialog/DialogWrapper.js~DialogWrapper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/dialog/DialogWrapper.js~DialogWrapper#getSize",
    "access": "public",
    "description": "The getSize function is used to determine the size by the scrolling behaviour. It will try to make sure that\na too big dialog can be scrolled. If this isn't possible, it let's the dialog capture the entire screen",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1262,
    "kind": "file",
    "name": "src/utils/hotfixes/DisableTextSelection.js",
    "content": "/**\n * Created by tom on 08/07/16.\n */\n\nvar currentLocation = window.location;\nvar isWebsite = currentLocation.protocol.indexOf('http') !== -1 && currentLocation.host.indexOf('localhost') === -1;\n\nif(!isWebsite) {\n    /* Source: https://developer.mozilla.org/en-US/docs/Web/API/CSSStyleSheet/insertRule */\n    var styleElement = document.createElement('style'),\n        styleSheet;\n\n    /* Append style element to head */\n    document.head.appendChild(styleElement);\n\n    /* Grab style sheet */\n    styleSheet = styleElement.sheet;\n    styleSheet.insertRule('*:not(input):not(textarea){-webkit-touch-callout: none; -webkit-user-select: none; -moz-user-select: none; -o-user-select: none; user-select: none;}', 0);\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/DisableTextSelection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1263,
    "kind": "variable",
    "name": "currentLocation",
    "memberof": "src/utils/hotfixes/DisableTextSelection.js",
    "static": true,
    "longname": "src/utils/hotfixes/DisableTextSelection.js~currentLocation",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/hotfixes/DisableTextSelection.js",
    "importStyle": null,
    "description": "Created by tom on 08/07/16.",
    "lineNumber": 5,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1264,
    "kind": "variable",
    "name": "isWebsite",
    "memberof": "src/utils/hotfixes/DisableTextSelection.js",
    "static": true,
    "longname": "src/utils/hotfixes/DisableTextSelection.js~isWebsite",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/hotfixes/DisableTextSelection.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1265,
    "kind": "file",
    "name": "src/utils/hotfixes/FamousKeyboardOffset.js",
    "content": "/**\n Fixes a bug causing the entire viewport to stick when a keyboard is spawned by a user click on an input field.\n When the keyboard is hidden again, the viewport remains in the top of the screen, with the bottom part of the screen being blank.\n\n This is caused by a change in Famo.us 0.3.0, and has been marked as \"won't fix\": https://github.com/Famous/famous/issues/317\n\n\n\n @author: Tom Clement (tjclement)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\nimport './famouskeyboardoffset.css!';\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/FamousKeyboardOffset.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1266,
    "kind": "file",
    "name": "src/utils/hotfixes/IESupport.js",
    "content": "/**\n * Created by tom on 21/01/16.\n */\n\nimport './Polyfills.js';\nimport './ZIndexSetter.js';\nimport './LayoutInvalidator.js';",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/IESupport.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1267,
    "kind": "file",
    "name": "src/utils/hotfixes/LayoutInvalidator.js",
    "content": "/**\n * Created by lundfall on 02/06/2017.\n */\nimport Bowser           from 'bowser';\nimport Timer            from 'famous/utilities/Timer.js';\nimport {Surface}        from '../../surfaces/Surface.js';\nimport ImageSurface     from 'famous/surfaces/ImageSurface.js';\nimport ElementOutput    from 'famous/core/ElementOutput.js';\n\n\n/**\n * Fixing browser bugs, this method makes sure that the layout of a certain DOM element gets invalidated\n * @param element\n */\nexport let invalidateLayoutForElement = (element) => {\n    var disp = element.style.display;\n    element.style.display = 'none';\n    var trick = element.offsetHeight;\n    element.style.display = disp;\n};\n\n\nlet browser = Bowser;\n\n/* Firefox has an issue with new elements not being painted  */\nif (browser.gecko) {\n    let oldAllocateFunction = Surface.prototype.allocate;\n    Surface.prototype.allocate = function (allocator) {\n        let result = oldAllocateFunction.call(this, allocator);\n        //TOOO find out exact cause why this is necessary\n        setTimeout(() => invalidateLayoutForElement(result), 200);\n\n        return result;\n    }\n\n}\n/* Safari has an issue with elements coming back from scale 0 (context.hide==true) not being painted */\nif (browser.safari) {\n    let oldCommitFunction = ElementOutput.prototype.commit;\n    ElementOutput.prototype.commit = function (context) {\n        oldCommitFunction.call(this, context);\n        if(this._wasHidden && !context.hide){\n            invalidateLayoutForElement(this._element);\n        }\n        this._wasHidden = context.hide;\n    };\n\n    //Safari on mobile seems to have troubles displaying images\n    let oldOnLoadedFunction = ImageSurface.prototype._onImageLoadedInDOM;\n    ImageSurface.prototype._onImageLoadedInDOM = function () {\n        Timer.after(() => {\n            this._element && invalidateLayoutForElement(this._element);\n        }, 1);\n        return oldOnLoadedFunction.apply(this, arguments);\n    }\n\n\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/LayoutInvalidator.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1268,
    "kind": "function",
    "name": "invalidateLayoutForElement",
    "memberof": "src/utils/hotfixes/LayoutInvalidator.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/hotfixes/LayoutInvalidator.js~invalidateLayoutForElement",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/hotfixes/LayoutInvalidator.js",
    "importStyle": "{invalidateLayoutForElement}",
    "description": "Fixing browser bugs, this method makes sure that the layout of a certain DOM element gets invalidated",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "element",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1269,
    "kind": "variable",
    "name": "browser",
    "memberof": "src/utils/hotfixes/LayoutInvalidator.js",
    "static": true,
    "longname": "src/utils/hotfixes/LayoutInvalidator.js~browser",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/hotfixes/LayoutInvalidator.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1270,
    "kind": "file",
    "name": "src/utils/hotfixes/Polyfills.js",
    "content": "/**\n * Created by tom on 06/01/16.\n */\n\n/*\n * TODO: Find a way if possible to make chrome handle scaling correctly. There is a bug currently where chrome\n * displaces an object when messing around with scaling\n */\n\n\nimport './polyfills/FunctionName.js';\nimport './polyfills/RequestAnimationFrame.js';\nimport './polyfills/StartsWith.js';\nimport './polyfills/ObjectKeys.js';\n\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/Polyfills.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1271,
    "kind": "file",
    "name": "src/utils/hotfixes/ZIndexSetter.js",
    "content": "/**\n * Created by tom on 21/01/16.\n * Credits: Hein Rutjes (2015)\n *\n * Fix z-index support for famo.us in MSIE / FF\n */\nimport ElementOutput                    from 'famous/core/ElementOutput';\nimport Bowser                           from 'bowser';\n\nlet browser = Bowser;\n\nif (browser.firefox && parseFloat(browser.version) <= 53) {\n    removeSurfacePreserve3D();\n}\n\n\nfunction removeSurfacePreserve3D() {\n    let styleSheets = window.document.styleSheets;\n    for (let sheetIndex in styleSheets) {\n        let sheet = styleSheets[sheetIndex];\n        if (sheet && sheet.href && sheet.href.indexOf('famous.css') !== -1) {\n            for (let ruleIndex in sheet.cssRules) {\n                let rule = sheet.cssRules[ruleIndex];\n                if (rule && rule.selectorText === '.famous-surface') {\n                    rule.style.removeProperty('transform-style');\n                    rule.style.removeProperty('-moz-transform-style');\n                    rule.style.removeProperty('-webkit-transform-style');\n                }\n            }\n        }\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/ZIndexSetter.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1272,
    "kind": "variable",
    "name": "browser",
    "memberof": "src/utils/hotfixes/ZIndexSetter.js",
    "static": true,
    "longname": "src/utils/hotfixes/ZIndexSetter.js~browser",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/hotfixes/ZIndexSetter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1273,
    "kind": "function",
    "name": "removeSurfacePreserve3D",
    "memberof": "src/utils/hotfixes/ZIndexSetter.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/hotfixes/ZIndexSetter.js~removeSurfacePreserve3D",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/hotfixes/ZIndexSetter.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1274,
    "kind": "file",
    "name": "src/utils/hotfixes/polyfills/FunctionName.js",
    "content": "/** Polyfill Function.name for IE9+ support */\n\n/* Credits: http://matt.scharley.me/2012/03/monkey-patch-name-ie.html */\n(function () {\n    if (Function.prototype.name === undefined && Object.defineProperty !== undefined) {\n        Object.defineProperty(Function.prototype, 'name', {\n            get: function () {\n                var funcNameRegex = /function\\s([^(]{1,})\\(/;\n                var results = (funcNameRegex).exec((this).toString());\n                return (results && results.length > 1) ? results[1].trim() : '';\n            },\n            set: function (value) {\n            }\n        });\n    }\n}());",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/polyfills/FunctionName.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1275,
    "kind": "file",
    "name": "src/utils/hotfixes/polyfills/ObjectKeys.js",
    "content": "// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\nif (!Object.keys) {\n    Object.keys = (function () {\n        'use strict';\n        var hasOwnProperty = Object.prototype.hasOwnProperty,\n            hasDontEnumBug = !({toString: null}).propertyIsEnumerable('toString'),\n            dontEnums = [\n                'toString',\n                'toLocaleString',\n                'valueOf',\n                'hasOwnProperty',\n                'isPrototypeOf',\n                'propertyIsEnumerable',\n                'constructor'\n            ],\n            dontEnumsLength = dontEnums.length;\n\n        return function (obj) {\n            if (typeof obj !== 'object' && (typeof obj !== 'function' || obj === null)) {\n                throw new TypeError('Object.keys called on non-object');\n            }\n\n            var result = [], prop, i;\n\n            for (prop in obj) {\n                if (hasOwnProperty.call(obj, prop)) {\n                    result.push(prop);\n                }\n            }\n\n            if (hasDontEnumBug) {\n                for (i = 0; i < dontEnumsLength; i++) {\n                    if (hasOwnProperty.call(obj, dontEnums[i])) {\n                        result.push(dontEnums[i]);\n                    }\n                }\n            }\n            return result;\n        };\n    }());\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/polyfills/ObjectKeys.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1276,
    "kind": "file",
    "name": "src/utils/hotfixes/polyfills/RequestAnimationFrame.js",
    "content": "/** Polyfill requestAnimationFrame for IE9+ support */\n\n/* Credits: Opera engineer Erik Moller */\n(function () {\n    var lastTime = 0;\n    var vendors = ['webkit', 'moz'];\n    for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n        window.cancelAnimationFrame =\n            window[vendors[x] + 'CancelAnimationFrame'] || window[vendors[x] + 'CancelRequestAnimationFrame'];\n    }\n\n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function (callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function () {\n                    callback(currTime + timeToCall);\n                },\n                timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n\n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function (id) {\n            clearTimeout(id);\n        };\n}());",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/polyfills/RequestAnimationFrame.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1277,
    "kind": "file",
    "name": "src/utils/hotfixes/polyfills/StartsWith.js",
    "content": "/**\n * Created by lundfall on 2/4/16.\n */\n\nif (!String.prototype.startsWith) {\n    String.prototype.startsWith = function (searchString, position) {\n        position = position || 0;\n        return this.substr(position, searchString.length) === searchString;\n    };\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/hotfixes/polyfills/StartsWith.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1278,
    "kind": "file",
    "name": "src/utils/request/UrlParser.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\n\n/**\n * @ignore\n * Parses a url\n * @param url\n * @returns {*}\n * @constructor\n */\nexport function UrlParser(url) {\n\n    var e = /^([a-z][a-z0-9+.-]*):(?:\\/\\/((?:(?=((?:[a-z0-9-._~!$&'()*+,;=:]|%[0-9A-F]{2})*))(\\3)@)?(?=(\\[[0-9A-F:.]{2,}\\]|(?:[a-z0-9-._~!$&'()*+,;=]|%[0-9A-F]{2})*))\\5(?::(?=(\\d*))\\6)?)(\\/(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\8)?|(\\/?(?!\\/)(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/]|%[0-9A-F]{2})*))\\10)?)(?:\\?(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\11)?(?:#(?=((?:[a-z0-9-._~!$&'()*+,;=:@\\/?]|%[0-9A-F]{2})*))\\12)?$/i;\n\n    if (url.match(e)) {\n        return {\n            url: RegExp['$&'],\n            protocol: RegExp.$1,\n            host: RegExp.$2,\n            path: RegExp.$8,\n            hash: RegExp.$12\n        };\n    } else {\n        return null;\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/request/UrlParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1279,
    "kind": "function",
    "name": "UrlParser",
    "memberof": "src/utils/request/UrlParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/request/UrlParser.js~UrlParser",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/request/UrlParser.js",
    "importStyle": "{UrlParser}",
    "description": "",
    "lineNumber": 18,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1280,
    "kind": "file",
    "name": "src/utils/request/XmlParser.js",
    "content": "/**\n\n\n @author: Hans van den Akker (mysim1)\n @license NPOSL-3.0\n @copyright Bizboard, 2015\n\n */\n\n/**\n * @ignore\n * @param text\n * @returns {*}\n * @constructor\n */\nexport function ParseStringToXml(text) {\n    try {\n        var xml = null;\n\n        if (window.DOMParser) {\n\n            var parser = new DOMParser();\n            xml = parser.parseFromString(text, 'text/xml');\n\n            var found = xml.getElementsByTagName('parsererror');\n\n            if (!found || !found.length || !found[0].childNodes.length) {\n                return xml;\n            }\n\n            return null;\n        } else {\n\n            if(typeof ActiveXObject !== 'function') { var ActiveXObject = () => {}; }\n\n            xml = new ActiveXObject('Microsoft.XMLDOM');\n\n            xml.async = false;\n            xml.loadXML(text);\n\n            return xml;\n        }\n    } catch (e) {\n        // suppress\n        console.log('Error parsing the string to xml.');\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/request/XmlParser.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1281,
    "kind": "function",
    "name": "ParseStringToXml",
    "memberof": "src/utils/request/XmlParser.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/request/XmlParser.js~ParseStringToXml",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/request/XmlParser.js",
    "importStyle": "{ParseStringToXml}",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1282,
    "kind": "file",
    "name": "src/utils/view/ArrayObserver.js",
    "content": "/**\n * Created by lundfall on 04/07/2017.\n */\nimport EventEmitter     from 'eventemitter3'\nimport { ObjectHelper }               from 'arva-js/utils/ObjectHelper.js'\n\nlet isObserved = Symbol('isObserved');\n\n/**\n * Observes an array for changes and emits events for parties interested in knowing the new states of the array\n */\nexport class ArrayObserver extends EventEmitter {\n\n  _dirtyPositions = {}\n\n  /**\n   *\n   * @param array\n   * @param {Function} hookFunction\n   */\n  constructor (array, hookFunction = () => {}) {\n    super();\n    if (!Array.isArray(array)) {\n      throw new Error(`Array observer created without array!`)\n    }\n    this._hookFunction = hookFunction;\n    this._array = array;\n    Object.defineProperty(this._array, isObserved, {value: true, enumerable: false});\n    this.rebuild();\n    this._overrideMethods();\n    this._hijackMapper();\n  }\n\n  static isArrayObserved (array) {\n    return !!array[isObserved]\n  }\n\n  rebuild () {\n    if (this._arrayLength) {\n      for (let index = this._arrayLength; index < this._array.length; index++) {\n        this._addHookAtIndex(index)\n      }\n    } else {\n      /* Initializing for the first time */\n      for (let [index] of this._array.entries()) {\n        this._addHookAtIndex(index)\n      }\n    }\n    for (let index in this._dirtyPositions) {\n      this._addHookAtIndex(index);\n    }\n\n    this._arrayLength = this._array.length;\n    this._dirtyPositions = {}\n  }\n\n  _overrideModificaitionMethod (methodName, newMethod) {\n    let originalMethod = this._array[methodName]\n    Object.defineProperty(this._array, methodName, {\n      value: function () {\n        let result = originalMethod.apply(this._array, arguments);\n        newMethod.call(this, ...arguments, result);\n        this.emit('modified', {methodName});\n        return result\n      }.bind(this), enumerable: false\n    })\n  }\n\n  _addHookAtIndex (index) {\n    if (this._hasHookAtIndex(index)) {\n      return;\n    }\n\n    ObjectHelper.addGetSetPropertyWithShadow(this._array, index, this._array[index], false, true, ({newValue, oldValue}) => {\n      this.emit('replaced', {newValue, oldValue, index});\n      this._dirtyPositions[index] = true;\n    }, () => {\n      this.emit('accessed', {index});\n    });\n    this._hookFunction(index, this._array[index]);\n  }\n\n  _hijackMapper (callback) {\n    //TODO Finalize and optimize\n    this._overrideReadMethod('map', (originalMapFunction, passedMapper) => {\n      this.emit('mapCalled', originalMapFunction, passedMapper);\n      let mappedEntries = originalMapFunction.call(this._array, passedMapper);\n      return new MappedArray(mappedEntries);\n    })\n  }\n\n  _hasHookAtIndex (index) {\n    let propertyDescriptor = Object.getOwnPropertyDescriptor(this._array, index);\n    return propertyDescriptor && !!propertyDescriptor.get;\n  }\n\n  _overrideMethods () {\n    this._overrideModificaitionMethod('pop', this._pop);\n    this._overrideModificaitionMethod('push', this._push);\n    this._overrideModificaitionMethod('reverse', this._reverse);\n    this._overrideModificaitionMethod('shift', this._shift);\n    this._overrideModificaitionMethod('unshift', this._unshift);\n    this._overrideModificaitionMethod('sort', this._sort);\n    this._overrideModificaitionMethod('splice', this._splice);\n  }\n\n  _overrideReadMethod (methodName, replacement) {\n    let originalMethod = this._array[methodName];\n    Object.defineProperty(this._array, methodName, {\n      value: function () {\n        return replacement(originalMethod, ...arguments);\n      }.bind(this), enumerable: false\n    })\n  }\n\n  _pop (removedElement) {\n    this.emit('removed', {index: this._array.length, oldValue: removedElement});\n  }\n\n  _push (element, newLength) {\n    this.emit('added', {index: newLength - 1, newValue: element});\n  }\n\n  _reverse (reversedArray) {\n    //todo anything todo here? don't think so, because the updates are taken care of elsewhere\n  }\n\n  _shift (shiftedElement) {\n    this.emit('removed', {index: this._array.length, oldValue: this._array[this._array.length - 1]})\n  }\n\n  _sort () {\n    //todo anything todo here? don't think so, because the updates are taken care of elsewhere\n  }\n\n  _splice (start, deleteCount, ...itemsToAddAndDeletedElements) {\n\n    let deletedElements =\n      itemsToAddAndDeletedElements.slice(-deleteCount)\n    let itemsToAdd = itemsToAddAndDeletedElements.slice(0, -deleteCount)\n\n    let maxIndex = Math.max(deletedElements.length, itemsToAdd.length)\n    for (let index = start; index < maxIndex; index++) {\n      if (index < deletedElements.length) {\n        this.emit('removed', {index, oldValue: deletedElements[index]})\n      }\n    }\n\n  }\n\n  _unshift (newLength, ...newItems) {\n    for (let index = this._array.length - newItems.length; index < this._array.length; index++) {\n      this.emit('added', {index, newValue: this._array[index]})\n    }\n  }\n}\n\nexport class MappedArray extends Array {\n  constructor (array) {\n    super(array);\n    this._array = array\n  }\n\n  getArray () {\n    return this._array\n  }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/ArrayObserver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1283,
    "kind": "variable",
    "name": "isObserved",
    "memberof": "src/utils/view/ArrayObserver.js",
    "static": true,
    "longname": "src/utils/view/ArrayObserver.js~isObserved",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/view/ArrayObserver.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1284,
    "kind": "class",
    "name": "ArrayObserver",
    "memberof": "src/utils/view/ArrayObserver.js",
    "static": true,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/ArrayObserver.js",
    "importStyle": "{ArrayObserver}",
    "description": "Observes an array for changes and emits events for parties interested in knowing the new states of the array",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 1285,
    "kind": "member",
    "name": "_dirtyPositions",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_dirtyPositions",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1286,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "hookFunction",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1287,
    "kind": "member",
    "name": "_hookFunction",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_hookFunction",
    "access": "private",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1288,
    "kind": "member",
    "name": "_array",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_array",
    "access": "private",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1289,
    "kind": "method",
    "name": "isArrayObserved",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver.isArrayObserved",
    "access": "public",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1290,
    "kind": "method",
    "name": "rebuild",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#rebuild",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1291,
    "kind": "member",
    "name": "_arrayLength",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_arrayLength",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1293,
    "kind": "method",
    "name": "_overrideModificaitionMethod",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_overrideModificaitionMethod",
    "access": "private",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "types": [
          "*"
        ]
      },
      {
        "name": "newMethod",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1294,
    "kind": "method",
    "name": "_addHookAtIndex",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_addHookAtIndex",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1295,
    "kind": "method",
    "name": "_hijackMapper",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_hijackMapper",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1296,
    "kind": "method",
    "name": "_hasHookAtIndex",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_hasHookAtIndex",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "params": [
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1297,
    "kind": "method",
    "name": "_overrideMethods",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_overrideMethods",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1298,
    "kind": "method",
    "name": "_overrideReadMethod",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_overrideReadMethod",
    "access": "private",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "params": [
      {
        "name": "methodName",
        "types": [
          "*"
        ]
      },
      {
        "name": "replacement",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1299,
    "kind": "method",
    "name": "_pop",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_pop",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "removedElement",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1300,
    "kind": "method",
    "name": "_push",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_push",
    "access": "private",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "element",
        "types": [
          "*"
        ]
      },
      {
        "name": "newLength",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1301,
    "kind": "method",
    "name": "_reverse",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_reverse",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "reversedArray",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1302,
    "kind": "method",
    "name": "_shift",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_shift",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "params": [
      {
        "name": "shiftedElement",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1303,
    "kind": "method",
    "name": "_sort",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_sort",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1304,
    "kind": "method",
    "name": "_splice",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_splice",
    "access": "private",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "params": [
      {
        "name": "start",
        "types": [
          "*"
        ]
      },
      {
        "name": "deleteCount",
        "types": [
          "*"
        ]
      },
      {
        "name": "itemsToAddAndDeletedElements",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 1305,
    "kind": "method",
    "name": "_unshift",
    "memberof": "src/utils/view/ArrayObserver.js~ArrayObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~ArrayObserver#_unshift",
    "access": "private",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [
      {
        "name": "newLength",
        "types": [
          "*"
        ]
      },
      {
        "name": "newItems",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 1306,
    "kind": "class",
    "name": "MappedArray",
    "memberof": "src/utils/view/ArrayObserver.js",
    "static": true,
    "longname": "src/utils/view/ArrayObserver.js~MappedArray",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/ArrayObserver.js",
    "importStyle": "{MappedArray}",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "interface": false,
    "extends": [
      "Array"
    ]
  },
  {
    "__docId__": 1307,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/ArrayObserver.js~MappedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~MappedArray#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true
  },
  {
    "__docId__": 1308,
    "kind": "member",
    "name": "_array",
    "memberof": "src/utils/view/ArrayObserver.js~MappedArray",
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~MappedArray#_array",
    "access": "private",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1309,
    "kind": "method",
    "name": "getArray",
    "memberof": "src/utils/view/ArrayObserver.js~MappedArray",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/ArrayObserver.js~MappedArray#getArray",
    "access": "public",
    "description": null,
    "lineNumber": 164,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1310,
    "kind": "file",
    "name": "src/utils/view/InputOption.js",
    "content": "import {notFound, OptionObserver, listeners} from './OptionObserver';\n\nexport let changeValue = Symbol('changeValue'),\n    unwrapValue = Symbol('unwrapValue'),\n    storedInputOption = Symbol('storedInputOption');\n\n/* Every property has to be represented by Symbols in order to avoid any collisions with option names */\nlet nestedPropertyPath = Symbol('nestedPropertyPath'),\n    optionParentObject = Symbol('optionParentObject'),\n    foreignNestedPropertyPath = Symbol('foreignNestedPropertyPath'),\n    propertyName = Symbol('propertyName'),\n    optionObject = Symbol('optionObject'),\n    optionObserver = Symbol('optionObserver'),\n    /* This is the option observer that consumes the input option */\n    foreignOptionObserver = Symbol('optionObserver'),\n    listenerTree = Symbol('listenerTree');\n\n/**\n * Represents an option where data flows upwards\n */\n\nexport class InputOption {\n    constructor(incomingNestedPropertyPath, incomingOptionObserver, incomingListenerTree) {\n        this[nestedPropertyPath] = incomingNestedPropertyPath.slice(0, -1);\n        this[optionObserver] = incomingOptionObserver;\n        this[propertyName] = incomingNestedPropertyPath[incomingNestedPropertyPath.length - 1];\n        this[listenerTree] = incomingListenerTree;\n    }\n\n\n    [changeValue](newValue) {\n        let storedOptionsObserver = this[optionObserver];\n        if (this._shouldMuteUpdatesWhenChanging) {\n            //todo does this work 100% for arrays?\n            if (!this._entryNames) {\n                throw new Error('Trying to change unwrapped value in InputOption');\n            }\n            storedOptionsObserver.preventEntryFromBeingUpdated(this._entryNames);\n        }\n        let optionParentObject = storedOptionsObserver.accessObjectPath(storedOptionsObserver.getOptions(), this[nestedPropertyPath]);\n        if (optionParentObject === notFound) {\n            throw new Error('Cannot change value of root input option');\n        }\n        optionParentObject[this[propertyName]] = newValue;\n        if (this._shouldMuteUpdatesWhenChanging) {\n            storedOptionsObserver.allowEntryToBeUpdated(this._entryNames);\n        }\n    };\n\n    [unwrapValue] (theForeignOptionObserver, theForeignNestedPropertyPath) {\n\n\n        let storedInputOptions = this[listenerTree][storedInputOption];\n        if(!storedInputOptions){\n            storedInputOptions = this[listenerTree][storedInputOption] = [];\n        }\n        storedInputOptions.push(this);\n        this[foreignNestedPropertyPath] = theForeignNestedPropertyPath;\n        let storedOptionsObserver = this[optionObserver];\n\n        //There should be another solution, but not sure how to implement it\n        let activeRecordings = storedOptionsObserver.getActiveRecordings();\n\n\n        this._determineWhetherShouldMuteUpdates(activeRecordings);\n        if(theForeignOptionObserver && theForeignOptionObserver !== this[foreignOptionObserver]){\n            this._setupForeignOptionObserverListener(theForeignOptionObserver)\n        }\n\n        return storedOptionsObserver.accessObjectPath(this[optionObserver].getOptions(), this[nestedPropertyPath].concat(this[propertyName]));\n    };\n\n    updateValueIfNecessary(){\n        if(this._valueShouldBeInvalidated){\n            this[foreignOptionObserver].flushUpdates();\n        }\n    }\n\n    _setupForeignOptionObserverListener(theForeignOptionObserver) {\n        this[foreignOptionObserver] = theForeignOptionObserver;\n        theForeignOptionObserver.on('propertyUpdated', ({nestedPropertyPath: nestedPathOfUpdate, propertyName, value, oldValue})=> {\n            /* Check if the updated property is a subset of the own nested property */\n            for(let [index, intermediatePropertyName] of nestedPathOfUpdate.concat(propertyName).entries()){\n                if(intermediatePropertyName !== this[foreignNestedPropertyPath][index]){\n                    return;\n                }\n            }\n            this._valueShouldBeInvalidated = true;\n            theForeignOptionObserver.once('postFlush', () =>{\n                this._valueShouldBeInvalidated = false;\n            });\n        })\n    }\n\n    _determineWhetherShouldMuteUpdates(activeRecordings) {\n\n        let recordedEntryNames = Object.keys(activeRecordings);\n        if (recordedEntryNames.length !== 1) {\n            throw new Error(recordedEntryNames[OptionObserver.triggers] ?\n                'Input option cannot be unwrapped inside trigger function' :\n                recordedEntryNames.length === 0 ?\n                    'Cannot unwrap input option outside renderable initializer' :\n                    'Trying to unwrap value in InputOption but OptionObserver should have exactly one recording');\n        }\n        //todo refactor to use symbol for _entryNames and _shouldMuteUpdatesWhenChanging\n        /* Determine if there's already listeners for this. If not, we should suppress certain updates from happening */\n\n\n\n        let recordedEntryName;\n        let listenersInsideListenerTree = this[listenerTree][listeners];\n        let listenerForRecordAlreadyDefined = false;\n\n        if(this._shouldMuteUpdatesWhenChanging !== undefined){\n            let newEntryNames = [], activeRecording = activeRecordings;\n            /* Determine the new entry names by traversing the object */\n            while(activeRecording){\n                let newKey = Object.keys(activeRecording)[0];\n                activeRecording = activeRecording[newKey];\n                if(newKey){\n                    newEntryNames.push(newKey);\n                }\n            }\n            this._shouldMuteUpdatesWhenChanging = this._entryNames.every((entryName, index) => entryName === newEntryNames[index]);\n            return;\n        }\n\n        this._entryNames = [];\n        /* Go into the nested structure to get the full entryNames list (should be quite flat, if not completely) */\n        do {\n            recordedEntryNames = Object.keys(activeRecordings);\n            recordedEntryName = recordedEntryNames[0];\n            if (recordedEntryName) {\n                this._entryNames.push(recordedEntryName);\n            }\n            listenersInsideListenerTree = listenersInsideListenerTree[recordedEntryName] || {};\n            activeRecordings = activeRecordings[recordedEntryName];\n            if (listenersInsideListenerTree === true) {\n                listenerForRecordAlreadyDefined = true;\n            }\n        } while (activeRecordings);\n        this._shouldMuteUpdatesWhenChanging = !listenerForRecordAlreadyDefined;\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/InputOption.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1311,
    "kind": "variable",
    "name": "changeValue",
    "memberof": "src/utils/view/InputOption.js",
    "static": true,
    "longname": "src/utils/view/InputOption.js~changeValue",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/InputOption.js",
    "importStyle": "{changeValue}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1312,
    "kind": "variable",
    "name": "nestedPropertyPath",
    "memberof": "src/utils/view/InputOption.js",
    "static": true,
    "longname": "src/utils/view/InputOption.js~nestedPropertyPath",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/view/InputOption.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1313,
    "kind": "class",
    "name": "InputOption",
    "memberof": "src/utils/view/InputOption.js",
    "static": true,
    "longname": "src/utils/view/InputOption.js~InputOption",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/InputOption.js",
    "importStyle": "{InputOption}",
    "description": "Represents an option where data flows upwards",
    "lineNumber": 22,
    "interface": false
  },
  {
    "__docId__": 1314,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 1315,
    "kind": "member",
    "name": "[nestedPropertyPath]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[nestedPropertyPath]",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1316,
    "kind": "member",
    "name": "[optionObserver]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[optionObserver]",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1317,
    "kind": "member",
    "name": "[propertyName]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[propertyName]",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1318,
    "kind": "member",
    "name": "[listenerTree]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[listenerTree]",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1319,
    "kind": "method",
    "name": "[changeValue]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[changeValue]",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "params": [
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1320,
    "kind": "method",
    "name": "[unwrapValue]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[unwrapValue]",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "theForeignOptionObserver",
        "types": [
          "*"
        ]
      },
      {
        "name": "theForeignNestedPropertyPath",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1321,
    "kind": "member",
    "name": "[foreignNestedPropertyPath]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[foreignNestedPropertyPath]",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1322,
    "kind": "method",
    "name": "updateValueIfNecessary",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#updateValueIfNecessary",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1323,
    "kind": "method",
    "name": "_setupForeignOptionObserverListener",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#_setupForeignOptionObserverListener",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "params": [
      {
        "name": "theForeignOptionObserver",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1324,
    "kind": "member",
    "name": "[foreignOptionObserver]",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#[foreignOptionObserver]",
    "access": "public",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1325,
    "kind": "member",
    "name": "_valueShouldBeInvalidated",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#_valueShouldBeInvalidated",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1327,
    "kind": "method",
    "name": "_determineWhetherShouldMuteUpdates",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#_determineWhetherShouldMuteUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "activeRecordings",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1328,
    "kind": "member",
    "name": "_shouldMuteUpdatesWhenChanging",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#_shouldMuteUpdatesWhenChanging",
    "access": "private",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1329,
    "kind": "member",
    "name": "_entryNames",
    "memberof": "src/utils/view/InputOption.js~InputOption",
    "static": false,
    "longname": "src/utils/view/InputOption.js~InputOption#_entryNames",
    "access": "private",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1331,
    "kind": "file",
    "name": "src/utils/view/LayoutHelpers.js",
    "content": "/**\n * Created by lundfall on 01/09/16.\n */\nimport isEqual                      from 'lodash/isEqual.js';\nimport findIndex                    from 'lodash/findIndex.js';\nimport Easing                       from 'famous/transitions/Easing.js';\n\nimport {Utils}                      from './Utils.js';\nimport {TrueSizedLayoutDockHelper}  from '../../layout/TrueSizedLayoutDockHelper.js';\n\n\nclass BaseLayoutHelper {\n    constructor(sizeResolver) {\n        this._sizeResolver = sizeResolver;\n    }\n\n    layout() {\n        throw Error(\"Not implemented\");\n    }\n\n    boundingBoxSize() {\n        throw Error(\"Not implemented\");\n    }\n\n    /**\n     * Gets the flow information from the renderable\n     * @param {Renderable} renderable\n     * @returns {{transition: Object, callback: Function}}\n     * @private\n     */\n    _getRenderableFlowInformation(renderable) {\n        let { decorations } = renderable;\n        let flowInformation = { transition: undefined, callback: undefined };\n        let { flow } = decorations;\n        if (flow) {\n            flowInformation.transition = flow.currentTransition || (flow.defaults && flow.defaults.transition);\n            flowInformation.callback = flow.callback;\n        }\n        return flowInformation;\n    }\n}\n\n\nexport class DockedLayoutHelper extends BaseLayoutHelper {\n\n    /**\n     * Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked.\n     * @param {OrderedHashMap} dockedRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides.\n     * @param {OrderedHashMap} filledRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled.\n     * @param {Object} context. The famous context with a valid size proportion.\n     * @param {Object} ownDecorators The decorators that are applied to the view.\n     * @param {Array|Number} [ownDecorators.extraTranslate]. A translate to shift the entire layout with.\n     * @param {Array|Number} [ownDecorators.viewMargins] The margins to apply on the outer edges of the view.\n     * @returns {undefined}\n     * @private\n     */\n    layout(dockedRenderables, filledRenderables, context, ownDecorations) {\n        let { extraTranslate, viewMargins: margins } = ownDecorations;\n        let dockHelper = new TrueSizedLayoutDockHelper(context);\n\n        if (margins) {\n            dockHelper.margins(margins);\n        }\n\n        /* Process Renderables with a non-fill dock */\n        let dockedNames = dockedRenderables ? dockedRenderables.keys() : [];\n        for (let renderableName of dockedNames) {\n            let [renderable, renderableCounterpart] = dockedRenderables.get(renderableName);\n            let { dockSize, translate, innerSize, space = (ownDecorations.dockSpacing || 0) } = this._prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins);\n            let { callback, transition } = this._getRenderableFlowInformation(renderable);\n            let { dock, rotate, origin, scale, skew, opacity } = renderable.decorations;\n            let { dockMethod } = dock;\n            if (dockHelper[dockMethod]) {\n                dockHelper[dockMethod](renderableName, dockSize, space, translate, innerSize, {\n                    rotate,\n                    hide: !this._sizeResolver.isSizeFinal(renderable),\n                    opacity,\n                    callback,\n                    transition,\n                    origin,\n                    scale,\n                    skew\n                });\n            }\n        }\n\n        /* Process Renderables with a fill dock (this needs to be done after non-fill docks, since order matters in LayoutDockHelper) */\n        let filledNames = filledRenderables ? filledRenderables.keys() : [];\n        for (let renderableName of filledNames) {\n            let [renderable, renderableCounterpart] = filledRenderables.get(renderableName);\n            let { decorations } = renderable;\n            let { rotate, origin, opacity, skew, scale } = decorations;\n            decorations.dock.size = dockHelper.getFillSize();\n            let { translate, innerSize } = this._prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins);\n            let { callback, transition } = this._getRenderableFlowInformation(renderable);\n            dockHelper.fill(renderableName, innerSize, translate, {\n                rotate,\n                opacity,\n                hide: !this._sizeResolver.isSizeFinal(renderable),\n                origin,\n                callback,\n                transition,\n                skew,\n                scale\n            });\n        }\n    }\n\n    /**\n     * Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked\n     * @param {Renderable} renderable The renderable that is going to be docked\n     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).\n     * @param {Object} context. The famous context with a valid size proportion\n     * @param {Array|Number} extraTranslate. A translate to shift the entire layout with\n     * @param {Array|Nuimber} margins The margins to apply on the outer edges of the view\n     * @returns {{dockSize: (Array|Object), translate, innerSize: (Array|Number), inUseDockSize: (Array|Number}}\n     * @private\n     */\n    _prepareForDockedRenderable(renderable, renderableCounterpart, context, extraTranslate, margins = [0, 0, 0, 0]) {\n        let { decorations } = renderable;\n        let { translate = [0, 0, 0] } = decorations;\n        translate = Utils.addTranslations(extraTranslate, translate);\n        let { dockMethod, space } = decorations.dock;\n        let horizontalMargins = margins[1] + margins[3];\n        let verticalMargins = margins[0] + margins[2];\n        let sizeWithoutMargins = [context.size[0] - horizontalMargins, context.size[1] - verticalMargins];\n        let dockSizeSpecified = !(isEqual(decorations.dock.size, [undefined, undefined]));\n        let dockSize = this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: sizeWithoutMargins }, dockSizeSpecified ? decorations.dock.size : decorations.size);\n        let inUseDockSize = this._sizeResolver.getResolvedSize(renderable);\n        let innerSize;\n        let { origin, align } = decorations;\n        /* If origin and align is used, we have to add this to the translate of the renderable */\n        if (decorations.size || origin || align) {\n\n            let translateWithProportion = (proportion, size, translation, dimension, factor) =>\n                translation[dimension] += size[dimension] ? factor * size[dimension] * proportion[dimension] : 0;\n\n\n            if (decorations.size) {\n\n                this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: dockSizeSpecified ? dockSize : sizeWithoutMargins }, decorations.size);\n                innerSize = this._sizeResolver.getResolvedSize(renderable);\n\n\n                translate = [...translate]; //shallow copy the translation to prevent the translation for happening multiple times\n\n                /* If no docksize was specified in a certain direction, then use the context size without margins */\n                let outerDockSize = dockSize;\n\n                if (!dockSizeSpecified) {\n                    if (dockMethod === 'fill') {\n                        outerDockSize = [...sizeWithoutMargins];\n                    } else {\n                        let dockingDirection = this.getDockType(dockMethod);\n                        let orthogonalDockingDirection = +!dockingDirection;\n                        outerDockSize[dockingDirection] = innerSize[dockingDirection];\n                        outerDockSize[orthogonalDockingDirection] = sizeWithoutMargins[orthogonalDockingDirection];\n                    }\n                }\n\n                if (origin && decorations.size) {\n                    decorations.size.forEach((size, dimension) => {\n                        if (this._sizeResolver.isValueTrueSized(size)) {\n                            /* Because the size is set to true, it is interpreted as 1 by famous. We have to add 1 pixel\n                             *  to make up for this.\n                             */\n                            if (origin[dimension] === 1) {\n                                translate[dimension] += 1;\n                            }\n                        }\n                    });\n                }\n                if (align) {\n                    translateWithProportion(align, outerDockSize, translate, 0, 1);\n                    translateWithProportion(align, outerDockSize, translate, 1, 1);\n                }\n            } else if (align) {\n                for (let i of [0, 1]) {\n                    translateWithProportion(align, decorations.dock.size[i] ? dockSize : sizeWithoutMargins, translate, i, 1);\n                }\n            }\n        }\n        for (let i = 0; i < 2; i++) {\n            if (dockSize[i] === true) {\n                /* If a true size is used, do a tilde on it in order for the dockhelper to recognize it as true-sized */\n                dockSize[i] = ~inUseDockSize[i];\n            }\n        }\n        /* If the renderable is unrenderable due to zero height/width...*/\n        if (inUseDockSize[0] === 0 || inUseDockSize[1] === 0) {\n            /* Don't display the space if the size is 0*/\n            space = 0;\n        }\n        return {\n            dockSize,\n            translate,\n            innerSize,\n            inUseDockSize,\n            space,\n            hide: !this._sizeResolver.isSizeFinal(renderable),\n        };\n    }\n\n    getDockType(dockMethodToGet) {\n        let dockTypes = [['right', 'left'], ['top', 'bottom']];\n        return findIndex(dockTypes, (dockMethods) => ~dockMethods.indexOf(dockMethodToGet));\n    }\n\n    /**\n     * Calculates the bounding box size for all the renderables passed to the function\n     * @param {OrderedHashMap} dockedRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides.\n     * @param {OrderedHashMap} filledRenderables A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled.\n     * @param {Object} ownDecorators The decorators that are applied to the view.\n     * @returns {Array|Number} The bounding box size of all the renderables\n     */\n    boundingBoxSize(dockedRenderables, filledRenderables, ownDecorations) {\n        let fillSize = [undefined, undefined];\n        if (filledRenderables) {\n            /* We support having multiple fills */\n            fillSize = filledRenderables.reduce((resultingSize, [filledRenderable, renderableCounterpart], renderableName) => {\n                this._sizeResolver.settleDecoratedSize(filledRenderable, renderableCounterpart, { size: [NaN, NaN] }, filledRenderable.decorations.size);\n                let resolvedSize = this._sizeResolver.getResolvedSize(filledRenderable);\n                if (resolvedSize) {\n                    for (let [dimension, singleSize] of resolvedSize.entries()) {\n                        if (singleSize !== undefined && ((resultingSize[dimension] === undefined) || resultingSize[dimension] < singleSize)) {\n                            resultingSize[dimension] = singleSize;\n                        }\n                    }\n                }\n                return resultingSize;\n            }, [undefined, undefined]);\n        }\n        let dockSize = [...fillSize];\n        if (dockedRenderables) {\n            let dockSizeInfo = this._getRegularDockBoundingBoxInfo(dockedRenderables, ownDecorations);\n            dockSize = dockSizeInfo.boundingBoxSize;\n            if (fillSize) {\n                for (let [dimension, singleFillSize] of fillSize.entries()) {\n                    if (singleFillSize !== undefined) {\n                        if (dockSize[dimension] === undefined) {\n                            dockSize[dimension] = singleFillSize;\n                        } else if (dockSizeInfo.dockingDirection == dimension) {\n                            dockSize[dimension] += singleFillSize;\n                        } else {\n                            dockSize[dimension] = Math.min(singleFillSize, dockSize[dimension]);\n                        }\n                    }\n                }\n            }\n        }\n\n        for (let i = 0; i < 2; i++) {\n            if (Number.isNaN(dockSize[i])) {\n                dockSize[i] = undefined;\n            }\n            if (dockSize[i] !== undefined && ownDecorations.viewMargins) {\n                let { viewMargins } = ownDecorations;\n                /* if i==0 we want margin left and right, if i==1 we want margin top and bottom */\n                dockSize[i] += viewMargins[(i + 1) % 4] + viewMargins[(i + 3) % 4];\n            }\n        }\n        return dockSize;\n    }\n\n\n    _getRegularDockBoundingBoxInfo(dockedRenderables, ownDecorations) {\n        let { dockMethod } = dockedRenderables.get(dockedRenderables.keyAt(0))[0].decorations.dock;\n        /* Gets the dock type where, 0 is right or left (horizontal) and 1 is top or bottom (vertical) */\n        let dockType = this.getDockType(dockMethod);\n        let dockingDirection = dockType;\n        let orthogonalDirection = !dockType + 0;\n\n\n        /* Previously countered dock size for docking direction and opposite docking direction */\n        let previousDockSize = 0;\n        /* Add up the different sizes to if they are docked all in the same direction */\n        let boundingBoxSize = dockedRenderables.reduce((result, [dockedRenderable, renderableCounterpart], renderableName) => {\n            let { decorations } = dockedRenderable;\n            let { dockMethod: otherDockMethod } = decorations.dock;\n            /* If docking is done orthogonally */\n            if (this.getDockType(otherDockMethod) !== dockType) {\n                return [NaN, NaN];\n            } else {\n                /* Resolve both inner size and outer size */\n                this._sizeResolver.settleDecoratedSize(dockedRenderable, renderableCounterpart, { size: [NaN, NaN] }, decorations.dock.size);\n                let resolvedOuterSize = this._sizeResolver.getResolvedSize(dockedRenderable);\n\n                let resolvedInnerSize = [undefined, undefined];\n                if (dockedRenderable.decorations.size) {\n                    this._sizeResolver.settleDecoratedSize(dockedRenderable, renderableCounterpart, { size: [NaN, NaN] }, decorations.size);\n                    resolvedInnerSize = this._sizeResolver.getResolvedSize(dockedRenderable);\n                }\n\n                if (!resolvedOuterSize || !resolvedInnerSize) {\n                    return [NaN, NaN];\n                }\n                let resolvedSize = [resolvedOuterSize[0] === undefined ? resolvedInnerSize[0] : resolvedOuterSize[0],\n                    resolvedOuterSize[1] === undefined ? resolvedInnerSize[1] : resolvedOuterSize[1]];\n                let newResult = new Array(2);\n                /* If docking is done from opposite directions */\n                let dockingFromOpposite = dockMethod !== otherDockMethod;\n                if (dockingFromOpposite) {\n                    newResult[dockingDirection] = NaN;\n                } else {\n                    /* If this or the previous renderable size is 0, don't add the space */\n                    let spaceSize = (resolvedSize[dockingDirection] === 0 || previousDockSize === 0)\n                        ? 0\n                        : decorations.dock.space || ownDecorations.dockSpacing || 0;\n                    newResult[dockingDirection] = resolvedSize[dockingDirection] + spaceSize + result[dockingDirection];\n                    /* If the resolved size is 0, then the relevant previous dock size should be the one before that */\n                    previousDockSize = resolvedSize[dockingDirection] || previousDockSize;\n                }\n                /* If a size in the orthogonalDirection has been set... */\n                if (resolvedSize[orthogonalDirection] !== undefined && !Number.isNaN(resolvedSize[orthogonalDirection])) {\n                    /* If there is no result in the orthogonal direction specified yet... */\n                    if (result[orthogonalDirection] === undefined) {\n                        newResult[orthogonalDirection] = resolvedSize[orthogonalDirection];\n                    } else {\n                        /* get the max bounding box for the specified orthogonal direction */\n                        newResult[orthogonalDirection] = Math.max(result[orthogonalDirection], resolvedSize[orthogonalDirection]);\n                    }\n                } else {\n                    newResult[orthogonalDirection] = result[orthogonalDirection];\n                }\n                return newResult;\n            }\n        }, dockingDirection ? [undefined, 0] : [0, undefined]);\n        return { boundingBoxSize, dockingDirection, orthogonalDirection };\n    }\n}\n\nexport class FullSizeLayoutHelper extends BaseLayoutHelper {\n\n    /**\n     * Layouts full size renderables\n     * @param {OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the full size renderables.\n     * @param {Object} context The famous-flex context with a valid size property\n     * @param {Object} ownDecorations. The decorators that are applied to the view.\n     */\n    layout(fullScreenRenderables, context, ownDecorations) {\n        let { extraTranslate } = ownDecorations;\n        let names = fullScreenRenderables ? fullScreenRenderables.keys() : [];\n        for (let renderableName of names) {\n            let [renderable] = fullScreenRenderables.get(renderableName);\n            let { callback, transition } = this._getRenderableFlowInformation(renderable);\n            let translate = Utils.addTranslations(extraTranslate, renderable.decorations.translate || [0, 0, 0]);\n            context.set(renderableName, {\n                translate,\n                size: context.size,\n                opacity: renderable.decorations.opacity === undefined ? 1 : renderable.decorations.opacity,\n                callback,\n                rotate: renderable.decorations.rotate,\n                transition\n            });\n        }\n    }\n\n}\n\nexport class TraditionalLayoutHelper extends BaseLayoutHelper {\n\n    layout(traditionalRenderables, context, ownDecorations) {\n        let names = traditionalRenderables ? traditionalRenderables.keys() : [];\n        for (let renderableName of names) {\n            let [renderable, renderableCounterpart] = traditionalRenderables.get(renderableName);\n            let renderableSize = this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, context, renderable.decorations.size) || [undefined, undefined];\n            let {\n                translate = [0, 0, 0], origin = [0, 0], align, rotate,\n                opacity = 1, scale, skew\n            } = renderable.decorations;\n            translate = Utils.addTranslations(ownDecorations.extraTranslate, translate);\n            let { callback, transition } = this._getRenderableFlowInformation(renderable);\n            let adjustedTranslation = Utils.adjustPlacementForTrueSize(renderable, renderableSize, origin, translate, this._sizeResolver);\n            context.set(renderableName, {\n                size: renderableSize,\n                translate: adjustedTranslation,\n                origin,\n                scale,\n                hide: !this._sizeResolver.isSizeFinal(renderable),\n                skew,\n                align,\n                callback,\n                transition,\n                rotate,\n                opacity\n            });\n        }\n    }\n\n    boundingBoxSize(traditionalRenderables) {\n        let renderableNames = traditionalRenderables ? traditionalRenderables.keys() : [];\n        let totalSize = [undefined, undefined];\n        for (let renderableName of renderableNames) {\n            let [renderable, renderableCounterpart] = traditionalRenderables.get(renderableName);\n            this._sizeResolver.settleDecoratedSize(renderable, renderableCounterpart, { size: [NaN, NaN] }, renderable.decorations.size);\n            let size = this._sizeResolver.getResolvedSize(renderable);\n\n            /* Backup: If size can't be resolved, then see if there's a size specified on the decorator */\n            if (!size && renderable.decorations) {\n                let decoratedSize = renderable.decorations.size;\n                let isValidSize = (inputSize) => typeof inputSize == 'number' && inputSize > 0;\n                if (decoratedSize && decoratedSize.every(isValidSize)) {\n                    size = decoratedSize;\n                }\n            }\n            if (!size) {\n                continue;\n            }\n            let renderableSpec;\n            renderableSpec = renderable.decorations;\n            let { align = [0, 0] } = renderableSpec;\n            let translate = Utils.adjustPlacementForTrueSize(renderable, size, renderableSpec.origin || [0, 0], renderableSpec.translate || [0, 0, 0]);\n\n            if (!renderableSpec || !renderableSpec.size) {\n                continue;\n            }\n\n            /* If the renderable has a lower min y/x position, or a higher max y/x position, save its values */\n            for (let i = 0; i < 2; i++) {\n                /* Undefined is the same as context size */\n                if (renderable.decorations.size[i] !== undefined && size[i] !== undefined) {\n                    /* If align is set, then there can be a case where the aligned renderable is the biggest one on the view.\n                     * Therefore, the translation of the align is not taken into account here, only the explicitly specified translate*/\n                    let newPotentialOuterSize = translate[i] + size[i];\n                    if (newPotentialOuterSize > totalSize[i] || totalSize[i] === undefined) {\n                        totalSize[i] = newPotentialOuterSize;\n                    }\n                }\n\n            }\n        }\n        return totalSize;\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/LayoutHelpers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1332,
    "kind": "class",
    "name": "BaseLayoutHelper",
    "memberof": "src/utils/view/LayoutHelpers.js",
    "static": true,
    "longname": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/view/LayoutHelpers.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1333,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true
  },
  {
    "__docId__": 1334,
    "kind": "member",
    "name": "_sizeResolver",
    "memberof": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper",
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper#_sizeResolver",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1335,
    "kind": "method",
    "name": "layout",
    "memberof": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper#layout",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1336,
    "kind": "method",
    "name": "boundingBoxSize",
    "memberof": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper#boundingBoxSize",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1337,
    "kind": "method",
    "name": "_getRenderableFlowInformation",
    "memberof": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~BaseLayoutHelper#_getRenderableFlowInformation",
    "access": "private",
    "description": "Gets the flow information from the renderable",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{transition: Object, callback: Function}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{transition: Object, callback: Function}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1338,
    "kind": "class",
    "name": "DockedLayoutHelper",
    "memberof": "src/utils/view/LayoutHelpers.js",
    "static": true,
    "longname": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/LayoutHelpers.js",
    "importStyle": "{DockedLayoutHelper}",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseLayoutHelper"
    ]
  },
  {
    "__docId__": 1339,
    "kind": "method",
    "name": "layout",
    "memberof": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper#layout",
    "access": "private",
    "description": "Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{undefined}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "OrderedHashMap"
        ],
        "spread": false,
        "optional": false,
        "name": "dockedRenderables",
        "description": "A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides."
      },
      {
        "nullable": null,
        "types": [
          "OrderedHashMap"
        ],
        "spread": false,
        "optional": false,
        "name": "filledRenderables",
        "description": "A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context.",
        "description": "The famous context with a valid size proportion."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ownDecorators",
        "description": "The decorators that are applied to the view."
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "ownDecorators.extraTranslate",
        "description": ". A translate to shift the entire layout with."
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "ownDecorators.viewMargins",
        "description": "The margins to apply on the outer edges of the view."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1340,
    "kind": "method",
    "name": "_prepareForDockedRenderable",
    "memberof": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper#_prepareForDockedRenderable",
    "access": "private",
    "description": "Computes translation, inner size, actual docking size (outer size) and an adjusted docking size for a renderable that is about to be docked",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{dockSize: (Array|Object), translate, innerSize: (Array|Number), inUseDockSize: (Array|Number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": "The renderable that is going to be docked"
      },
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableCounterpart.",
        "description": "The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context.",
        "description": "The famous context with a valid size proportion"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "extraTranslate.",
        "description": "A translate to shift the entire layout with"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Nuimber"
        ],
        "spread": false,
        "optional": false,
        "name": "margins",
        "description": "The margins to apply on the outer edges of the view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{dockSize: (Array|Object), translate, innerSize: (Array|Number), inUseDockSize: (Array|Number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1341,
    "kind": "method",
    "name": "getDockType",
    "memberof": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper#getDockType",
    "access": "public",
    "description": null,
    "lineNumber": 204,
    "undocument": true,
    "params": [
      {
        "name": "dockMethodToGet",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1342,
    "kind": "method",
    "name": "boundingBoxSize",
    "memberof": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper#boundingBoxSize",
    "access": "public",
    "description": "Calculates the bounding box size for all the renderables passed to the function",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array|Number} The bounding box size of all the renderables"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "OrderedHashMap"
        ],
        "spread": false,
        "optional": false,
        "name": "dockedRenderables",
        "description": "A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are attached to the sides."
      },
      {
        "nullable": null,
        "types": [
          "OrderedHashMap"
        ],
        "spread": false,
        "optional": false,
        "name": "filledRenderables",
        "description": "A map containing Array-pairs of [renderable, renderableCounterpart] containing the things that are filled."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ownDecorators",
        "description": "The decorators that are applied to the view."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array",
        "Number"
      ],
      "spread": false,
      "description": "The bounding box size of all the renderables"
    }
  },
  {
    "__docId__": 1343,
    "kind": "method",
    "name": "_getRegularDockBoundingBoxInfo",
    "memberof": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~DockedLayoutHelper#_getRegularDockBoundingBoxInfo",
    "access": "private",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "params": [
      {
        "name": "dockedRenderables",
        "types": [
          "*"
        ]
      },
      {
        "name": "ownDecorations",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"boundingBoxSize\": *, \"dockingDirection\": *, \"orthogonalDirection\": *}"
      ]
    }
  },
  {
    "__docId__": 1344,
    "kind": "class",
    "name": "FullSizeLayoutHelper",
    "memberof": "src/utils/view/LayoutHelpers.js",
    "static": true,
    "longname": "src/utils/view/LayoutHelpers.js~FullSizeLayoutHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/LayoutHelpers.js",
    "importStyle": "{FullSizeLayoutHelper}",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseLayoutHelper"
    ]
  },
  {
    "__docId__": 1345,
    "kind": "method",
    "name": "layout",
    "memberof": "src/utils/view/LayoutHelpers.js~FullSizeLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~FullSizeLayoutHelper#layout",
    "access": "public",
    "description": "Layouts full size renderables",
    "lineNumber": 340,
    "params": [
      {
        "nullable": null,
        "types": [
          "OrderedHashMap"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "map containing Array-pairs of [renderable, renderableCounterpart] containing the full size renderables."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "The famous-flex context with a valid size property"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "ownDecorations.",
        "description": "The decorators that are applied to the view."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1346,
    "kind": "class",
    "name": "TraditionalLayoutHelper",
    "memberof": "src/utils/view/LayoutHelpers.js",
    "static": true,
    "longname": "src/utils/view/LayoutHelpers.js~TraditionalLayoutHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/LayoutHelpers.js",
    "importStyle": "{TraditionalLayoutHelper}",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "interface": false,
    "extends": [
      "BaseLayoutHelper"
    ]
  },
  {
    "__docId__": 1347,
    "kind": "method",
    "name": "layout",
    "memberof": "src/utils/view/LayoutHelpers.js~TraditionalLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~TraditionalLayoutHelper#layout",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "params": [
      {
        "name": "traditionalRenderables",
        "types": [
          "*"
        ]
      },
      {
        "name": "context",
        "types": [
          "*"
        ]
      },
      {
        "name": "ownDecorations",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1348,
    "kind": "method",
    "name": "boundingBoxSize",
    "memberof": "src/utils/view/LayoutHelpers.js~TraditionalLayoutHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/LayoutHelpers.js~TraditionalLayoutHelper#boundingBoxSize",
    "access": "public",
    "description": null,
    "lineNumber": 390,
    "undocument": true,
    "params": [
      {
        "name": "traditionalRenderables",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1349,
    "kind": "file",
    "name": "src/utils/view/LazyLoadedOptionClone.js",
    "content": "/**\n * Clones an option object in a \"lazy\" way, which means that it is only (re-)cloned for the path which the getteres are triggered\n * //TODO Support caching\n */\nimport {Utils}                  from './Utils';\nimport {storedArrayObserver}    from './OptionObserver';\nimport {Model}                  from '../../core/Model';\n\n/* */\nlet deleted = Symbol('deleted');\n\n/**\n * Used to lazily load a structural clone through getter hooks (the structure is also frozen since it's based on getters)\n */\nexport class LazyLoadedOptionClone {\n\n    static get(TargetObjectType, optionToClone, listenerTree, nestedPropertyPath = [], optionObserver) {\n        let root = new TargetObjectType(nestedPropertyPath, optionObserver, listenerTree);\n        let optionIsArray = Array.isArray(optionToClone);\n        let optionIsModel = optionToClone instanceof Model;\n        if (!Utils.isPlainObject(optionToClone) && !optionIsArray && !optionIsModel) {\n            return root;\n        }\n\n        let cachedShallowClone = {};\n\n        //TODO Make sure caching works if stuff is replaced\n        let addCloneGetter = (property) => {\n            /* Clear any previous data in the cachedShallowClone (if it's marked as deleted)*/\n            if (cachedShallowClone[property] === deleted) {\n                delete cachedShallowClone[property];\n                return;\n            }\n            Object.defineProperty(root, property, {\n                get: () => {\n                    if (cachedShallowClone[property]) {\n                        if (cachedShallowClone[property] === deleted) {\n                            return undefined;\n                        }\n                        return cachedShallowClone[property];\n                    }\n                    //TODO Implement a different solution for changing the value without consequences. This relies on 'shadow' that will be deprecated at some point\n                    return cachedShallowClone[property] = LazyLoadedOptionClone.get(TargetObjectType,\n                        optionToClone.shadow[property],\n                        /* Access the listener tree by using dedicated method to be sure that it's done correctly */\n                        listenerTree[property],\n                        nestedPropertyPath.concat(property),\n                        optionObserver)\n                }\n            });\n        };\n\n        /* Arrays mean that the structure can change dynamically. In that case, we listen for added and removed\n        *  properties, which would modify the clone structure */\n        if (optionIsArray) {\n            let arrayObserver = listenerTree[storedArrayObserver];\n            if (!arrayObserver) {\n                Utils.warn('Option passed to LazyLoadedOptionClone without properly initialized listener tree');\n            } else {\n                arrayObserver.on('removed', ({index}) => cachedShallowClone[index] = deleted);\n                arrayObserver.on('added', ({index}) => addCloneGetter(index));\n            }\n        }\n\n        for (let property of Object.keys(optionToClone)) {\n            addCloneGetter(property);\n        }\n        return root;\n\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/LazyLoadedOptionClone.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1350,
    "kind": "variable",
    "name": "deleted",
    "memberof": "src/utils/view/LazyLoadedOptionClone.js",
    "static": true,
    "longname": "src/utils/view/LazyLoadedOptionClone.js~deleted",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/view/LazyLoadedOptionClone.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1351,
    "kind": "class",
    "name": "LazyLoadedOptionClone",
    "memberof": "src/utils/view/LazyLoadedOptionClone.js",
    "static": true,
    "longname": "src/utils/view/LazyLoadedOptionClone.js~LazyLoadedOptionClone",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/LazyLoadedOptionClone.js",
    "importStyle": "{LazyLoadedOptionClone}",
    "description": "Used to lazily load a structural clone through getter hooks (the structure is also frozen since it's based on getters)",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 1352,
    "kind": "method",
    "name": "get",
    "memberof": "src/utils/view/LazyLoadedOptionClone.js~LazyLoadedOptionClone",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/LazyLoadedOptionClone.js~LazyLoadedOptionClone.get",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "TargetObjectType",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionToClone",
        "types": [
          "*"
        ]
      },
      {
        "name": "listenerTree",
        "types": [
          "*"
        ]
      },
      {
        "name": "nestedPropertyPath",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      },
      {
        "name": "optionObserver",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1353,
    "kind": "file",
    "name": "src/utils/view/OptionObserver.js",
    "content": "/**\n * Created by lundfall on 23/02/2017.\n */\nimport EventEmitter from 'eventemitter3';\n\nimport cloneDeepWith from 'lodash/cloneDeepWith';\nimport difference from 'lodash/difference';\nimport each from 'lodash/each';\n\nimport Timer from 'famous/utilities/Timer.js';\nimport {RenderablePrototype} from 'famous/utilities/RenderablePrototype.js';\n\nimport {Utils} from './Utils.js';\nimport {ArrayObserver} from './ArrayObserver.js';\nimport {\n    InputOption, unwrapValue,\n    changeValue, storedInputOption\n} from './InputOption';\nimport {ObjectHelper} from '../ObjectHelper';\nimport {PrioritisedObject} from '../../data/PrioritisedObject';\nimport {Model} from '../../core/Model';\nimport {PrioritisedArray} from '../../data/PrioritisedArray';\nimport {LazyLoadedOptionClone} from './LazyLoadedOptionClone';\n\n\n/* Symbols are used for many properties in order to allow any arbitrary names of options. The names are\n * repeated for the symbols and variable names in order to make debuggability easier */\nlet newChanges = Symbol('newChanges'),\n    originalValue = Symbol('originalValue'),\n    oldValue = Symbol('oldValue'),\n    instanceIdentifier = Symbol('instanceIdentifier'),\n    isArrayListener = Symbol('isArrayListener'),\n    optionRecorder = Symbol('optionRecorder'),\n    arrayRecorder = Symbol('arrayRecorder');\n\n/* Some symbols are exported since they are used elsewhere. Note that the triggers symbol is defined directly on\n*  the OptionObserver to make it easier to access from outside Arva (not just in internal classes) */\nexport let onOptionChange = Symbol('onOptionChange'),\n    storedArrayObserver = Symbol('storedArrayObserver'),\n    notFound = Symbol('notFound'),\n    listeners = Symbol('listeners'),\n    optionMetaData = Symbol('optionMetaData');\n\n//TODO fix falsey value checks, should behave differently for undefined and false\n\n//TODO Not sure if the (nested) array listener tree is setup with maximum efficiency. Furthermore, partial array updates isn't supported\n\n//TODO Think how to solve the case when this.options is passed as a whole to a renderable, maybe there should be a way to state explicit dependence if needed. Maybe implementing a getter trigger of the option on the view can be a viable idea\n\nexport class OptionObserver extends EventEmitter {\n    /* The structure of what thing in the objects is mapped to the corresponding renderable update */\n    _listenerTree = {};\n    /* An array of nested objects representing a reverse lookup to the listener tree */\n    _reverseListenerTree = {};\n    _newReverseListenerTree = {};\n    _listenerTreeMetaData = {};\n    /* We have to keep track of the models, because they use their own getter/setter hooks and we can't use the builtin ones */\n    _modelListeners = {};\n    _activeRecordings = {};\n    /* This contains the option difference to indicate a value change */\n    _newOptionUpdates = {};\n    _updatesForNextTick = {};\n    _forbiddenUpdatesForNextTick = {};\n    _listeningToSetters = true;\n    _arrayObservers = [];\n\n    /* The max supported depth in deep-checking iterations */\n    static maxSupportedDepth = 10;\n    /* Used for trigger function of options, which is a special type of update */\n    static triggers = Symbol('triggers');\n\n    /**\n     *\n     * @param defaultOptions\n     * @param options\n     * @param {Array<Function>} bindingsTriggerFunctions\n     * @param debugName Used for displaying error messages and being able to trace them back more easily\n     */\n    constructor(defaultOptions, options, bindingsTriggerFunctions, debugName) {\n        super();\n        this._errorName = debugName;\n        this._bindingsTriggerMethods = bindingsTriggerFunctions || [];\n        OptionObserver._registerNewInstance(this);\n        this.defaultOptions = defaultOptions;\n        this.options = options;\n        if (!window.optionObservers) {\n            window.optionObservers = [];\n        }\n        window.optionObservers.push(this);\n    }\n\n    /**\n     * Records the updates that happen in options and models (intended to be called before the construction of that renderable)\n     * @param renderableName\n     * @param callback\n     */\n    recordForRenderable(renderableName, callback) {\n        this._recordForEntry([renderableName], false);\n        callback();\n        this._stopRecordingForEntry(renderableName);\n    }\n\n    /**\n     * Returns the options that are being observed\n     * @returns {*}\n     */\n    getOptions() {\n        return this.options\n    }\n\n    /**\n     * Should be called when the renderable isn't relevant anymore\n     * @param {String} renderableName\n     */\n    deleteRecordingForRenderable(renderableName) {\n        //todo implement this (is an efficient way)\n    }\n\n    getInputOptions() {\n        if (this._inputOptions) {\n            return this._inputOptions;\n        }\n        return this._inputOptions = LazyLoadedOptionClone.get(InputOption, this.options, this._listenerTree, [], this);\n    }\n\n    /**\n     * Executes the trigger function. The trigger function is treated similarly to that of a renderable,\n     * but it's identified with the symbol OptionObserver.triggers accompanied by an index, instead of a string\n     *\n     * Different examples of trigger situations:\n     * Scenario 1: Construction\n     * A. The trigger function is called\n     * B. Getters are detected for the pre-process function\n     * C. this.options isn't set, so nothing more happens\n     *\n     * TODO This description is outdated\n     *\n     * Scenario 2. Setter trigger of a trigger function\n     * A. After flushing, it is concluded to belong to the trigger function (and other renderables)\n     * B. The trigger function is triggered immediately and firstly when flushing change events\n     * C. The trigger function re-executes the function and getters are triggered again\n     * D. this.options is defined, and it setters will be notified.\n     * E. An inner flush is forced within the flush, and it there might be new renderables needing update now\n     * F. The flush completes and resets the _updatesForNextTick\n     * G. The outer flush continues, and has nothing more to do\n     * H. Since we made changes within a flush, the static OptionObserver loop _flushAllUpdates, will call the flush function once again, but doing nothing\n     *\n     * Scenario 3. Recombine options\n     * A. After flushing, it is concluded that the option changes belong to one of the trigger functions (and other renderables)\n     * B. Continues same as scenario 2.\n     *\n     * @private\n     */\n    triggerMethodForIndex(incomingOptions, index) {\n        if (!this._bindingsTriggerMethods[index]) {\n            return this._throwError(`Internal error in OptionObserver: trigger function with index ${index} doesn't exist`)\n        }\n\n        this._recordForTriggerMethod(() =>\n            this._bindingsTriggerMethods[index](this), index);\n        /* Prevent the trigger method from being triggered within the next flush. This is important\n         * to do in case the trigger function sets variables that it also gets, (ie if(!options.color) options.color = 'red')\n         */\n        this.preventEntryFromBeingUpdated([OptionObserver.triggers, index])\n    }\n\n    preventEntryFromBeingUpdated(entryNames) {\n        this._accommodateInsideObject(this._forbiddenUpdatesForNextTick, entryNames, true)\n    }\n\n\n    allowEntryToBeUpdated(entryNames){\n        let forbiddenUpdates = this._forbiddenUpdatesForNextTick;\n        for(let [index, entryName] of entryNames.entries()){\n            let forbiddenUpdateKeys = Object.keys(forbiddenUpdates);\n            if(forbiddenUpdateKeys.length === 1 || index === entryNames.length - 1){\n                delete forbiddenUpdates[forbiddenUpdateKeys[0]];\n                break;\n            }\n            forbiddenUpdates = forbiddenUpdates[entryName];\n            if(!forbiddenUpdates){\n                return;\n            }\n        }\n    }\n\n\n    setup() {\n        this._createListenerTree();\n        //todo this order changed, we used to do the option merging after trigger function. What is needed? Pass option to adjust behaviour?\n        this._updatesForNextTick[OptionObserver.triggers] = new Array(this._bindingsTriggerMethods.length).fill(true);\n        this._markAllOptionsAsUpdated();\n    }\n\n    /**\n     * Used by InputOption to determine which recording is currently active\n     * @returns {{}}\n     */\n    getActiveRecordings() {\n        return this._activeRecordings;\n    }\n\n    getListenerTree() {\n        return this._listenerTree;\n    }\n\n    /**\n     * Similar to _.get, except that it returns notFound (a symbol) when not found. It also supports tarversing listeners\n     * @param object\n     * @param path\n     * @param traverseListeners\n     * @returns {*}\n     * @private\n     */\n    accessObjectPath(object, path, traverseListeners = false) {\n        for (let pathString of path) {\n            if (!object || !object.hasOwnProperty(pathString)) {\n                if (traverseListeners) {\n                    if (Array.isArray(object)) {\n                        pathString = 0\n                    }\n                } else {\n                    return notFound\n                }\n            }\n            object = object[pathString];\n            /* If it's a specially registered array listener, the property to read is called value and is being\n             *  used on the listener tree */\n            if (object && object[isArrayListener] && traverseListeners) {\n                /* Return immediately, ignore remaining properties in path. TODO: Verify that this is what we want*/\n                return object.value;\n            }\n        }\n        return object\n    }\n\n\n    /**\n     * Gets the entry names that are there for a certain listener tree\n     * @param localListenerTree\n     * @returns {Array.<*>}\n     */\n    _getUpdatesEntryNamesForLocalListenerTree(localListenerTree) {\n        let forbiddenUpdatesForNextTick = this._forbiddenUpdatesForNextTick;\n        let doubleNestedPaths = Object.keys(localListenerTree)\n            .concat(localListenerTree[OptionObserver.triggers] ? OptionObserver.triggers : [])\n            .map((key) => localListenerTree[key] === true ? [[key]] :\n                this._getDeeplyNestedListenerPaths(localListenerTree[key]).map((path) => [key].concat(path)));\n\n        /* Flatten double nested paths */\n        let paths = [].concat(...doubleNestedPaths);\n        /* Make sure that we are not updating something that is forbidden during this tick */\n        let forbiddenUpdatePathsForNextTick = Object.keys(forbiddenUpdatesForNextTick).concat(\n            forbiddenUpdatesForNextTick[OptionObserver.triggers] ? OptionObserver.triggers : []);\n        if(forbiddenUpdatePathsForNextTick.length){\n            paths = paths.filter((path) => {\n                return this.accessObjectPath(this._forbiddenUpdatesForNextTick, path) === notFound\n            });\n        }\n        return paths;\n\n    }\n\n    _recordForTriggerMethod(callback, triggerIndex) {\n        this._recordForEntry([OptionObserver.triggers, triggerIndex], true);\n        callback();\n        this._stopRecordingForEntry(OptionObserver.triggers)\n    }\n\n    /**\n     * Records for a specific entry\n     * @param {Array} entryNames\n     * @param {Boolean} allowSetters\n     * @private\n     */\n    _recordForEntry(entryNames, allowSetters) {\n        this._accommodateInsideObject(this._activeRecordings, entryNames, {});\n        this._beginListenerTreeUpdates(entryNames);\n        this._listenForModelUpdates(entryNames);\n        //todo need to set optionRecorder as a symbol\n        let opOptionTrigger = this.accessObjectPath(this._activeRecordings, entryNames)[optionRecorder] = ({type, propertyName, nestedPropertyPath}) => {\n            if (type === 'setter') {\n                if (allowSetters) {\n                    /* Be sure to avoid infinite loops if there are setters that trigger getters that are matched to this\n                     *  recording */\n                    this.preventEntryFromBeingUpdated(entryNames)\n                } else {\n                    this._throwError('Setting an option during instanciation of renderable')\n                }\n            } else {\n                let localListenerTree = this._accessListener(nestedPropertyPath.concat(propertyName));\n                this._addToListenerTree(entryNames, localListenerTree)\n            }\n        };\n        this.on('optionTrigger', opOptionTrigger)\n    }\n\n    /**\n     * Accesses a listener in a certain path\n     * @param nestedPropertyPath\n     * @returns {*}\n     * @private\n     */\n    _accessListener(nestedPropertyPath) {\n        return this.accessObjectPath(this._listenerTree, nestedPropertyPath, true);\n    }\n\n    /**\n     *\n     * @param {Array} entryNames\n     * @param {Object} localListenerTree\n     * @private\n     */\n    _addToListenerTree(entryNames, localListenerTree) {\n\n        let listenerStructure = localListenerTree[listeners];\n\n        /* Renderable already added to listener tree, so no need to do that again */\n        let {listenersCanChange, listenersChanged, matchingListenerIndex} = this.accessObjectPath(this._listenerTreeMetaData, entryNames);\n\n        this.accessObjectPath(this._newReverseListenerTree, entryNames).push(listenerStructure);\n\n        if (listenersCanChange && !listenersChanged) {\n            /* We optimize the most common use case, which is that no listeners change.\n             *  In that case, the order of listeners will be the same, otherwise we need to accommodate*/\n\n            let reverseListenerTree = this.accessObjectPath(this._reverseListenerTree, entryNames);\n            let listenerTreeMetaData = this.accessObjectPath(this._listenerTreeMetaData, entryNames);\n\n            if (reverseListenerTree[matchingListenerIndex] !== listenerStructure) {\n                listenerTreeMetaData.listenersChanged = true\n            }\n\n            listenerTreeMetaData.matchingListenerIndex++\n        }\n\n        this._accommodateInsideObject(listenerStructure, entryNames, true)\n\n    }\n\n    /**\n     * Performs all available bindings triggering functions\n     * @param incomingOptions\n     * @private\n     */\n    _doAllTriggerMethods(incomingOptions) {\n        for (let [index] of this._bindingsTriggerMethods.entries()) {\n            this.triggerMethodForIndex(incomingOptions, index)\n        }\n    }\n\n    _endListenerTreeUpdates(renderableName) {\n        if (this._listenerTreeMetaData[renderableName].listenersChanged) {\n            let oldListeners = this._reverseListenerTree[renderableName];\n            /* Remove the old listeners and add the new ones again. In this way, we get O(n + m) complexity\n             *  instead of O(m*n) */\n            for (let listenerTree of oldListeners) {\n                delete listenerTree[renderableName]\n            }\n            let newListeners = this._newReverseListenerTree[renderableName];\n\n            for (let listenerTree of newListeners) {\n                listenerTree[renderableName] = true\n            }\n\n        }\n        this._reverseListenerTree[renderableName] = this._newReverseListenerTree[renderableName];\n        delete this._newReverseListenerTree[renderableName]\n    }\n\n    _beginListenerTreeUpdates(entryNames) {\n        /* The listener meta data sets a counter in order to match the new listeners in comparison to the old listeners*/\n        let numberOfExistingListenerPaths = this.accessObjectPath(this._reverseListenerTree, entryNames.concat('length'));\n        if (numberOfExistingListenerPaths === notFound) {\n            numberOfExistingListenerPaths = 0\n        }\n        this._accommodateInsideObject(this._listenerTreeMetaData, entryNames, {\n            matchingListenerIndex: 0,\n            listenersCanChange: !!numberOfExistingListenerPaths,\n            listenersChanged: false\n        });\n        this._accommodateInsideObject(this._newReverseListenerTree, entryNames, [])\n\n    }\n\n    /**\n     * Called when a renderable shouldn't be recorded anymore\n     * @param entryName\n     */\n    _stopRecordingForEntry(entryName) {\n        this._endListenerTreeUpdates(entryName);\n        PrioritisedObject.removePropertyGetterSpy();\n        this.removeListener('optionTrigger', this._activeRecordings[entryName][optionRecorder]);\n        // Todo when we start listening for mapcalled, use this code (if that is what we'll do)\n        //this.removeListener('mapCalled', this._activeRecordings[entryName][arrayRecorder]);\n        delete this._activeRecordings[entryName]\n    }\n\n    /**\n     * Updates the options from an external reason\n     * @param newOptions\n     */\n    recombineOptions(newOptions = {}) {\n        let newOptionsAreAlsoOptions = !!newOptions[optionMetaData];\n        if (newOptionsAreAlsoOptions) {\n            if (newOptions === this.options) {\n                return\n            }\n            this.options = newOptions;\n            this._markAllOptionsAsUpdated();\n            return\n        }\n        this._deepTraverse(this.options, (nestedPropertyPath, optionObject, existingOptionValue, key, [newOptionObject, defaultOption]) => {\n            let newOptionValue = newOptionObject[key];\n            if (newOptionValue === undefined && optionObject[key] !== null) {     //todo confirm whether this check is appropriate (I don't think it is)\n                let defaultOptionValue = defaultOption[key];\n                if (defaultOptionValue !== newOptionValue && (defaultOptionValue !== existingOptionValue &&\n                        /* If new value is undefined, and the previous one was already the default, then don't update (will go false)*/\n                        !Utils.isPlainObject(existingOptionValue) && existingOptionValue[optionMetaData] && existingOptionValue[optionMetaData].isDefault)\n                ) {\n                    this._markPropertyAsUpdated(nestedPropertyPath, key, newOptionObject[key], existingOptionValue)\n                }\n                /* Cancel traversion in this direction */\n                return true\n            } else if (!(newOptionValue && Utils.isPlainObject(newOptionValue)) && existingOptionValue !== newOptionValue) {\n                /* Triggers the appriopriate events */\n                this._markPropertyAsUpdated(nestedPropertyPath, key, newOptionObject[key], existingOptionValue)\n            }\n        }, [newOptions, this.defaultOptions]);\n\n        /* Flush the updates in order to trigger the updates immediately */\n        this.flushUpdates()\n    }\n\n\n    _markAllOptionsAsUpdated() {\n        let rootProperties = Object.keys(this.defaultOptions);\n        this._updateOptionsStructure(rootProperties, this.options, [], rootProperties.map((rootProperty) => undefined));\n        this.flushUpdates()\n    }\n\n    _setupOptionLink(object, key, newValue, nestedPropertyPath, listenerTree) {\n\n        if (this._isMyOption(newValue)) {\n            /* Shallow clone at this level, which will become a deep clone when we're finished traversing */\n            newValue = this._shallowCloneOption(newValue)\n        }\n\n        /* Only add the getter/setter hook if there isn't one yet */\n        this._addGetterSetterHook(object, key, newValue, nestedPropertyPath, listenerTree);\n        //TODO there might be more optimal ways of doing this, the option will be marked 4-5 times on setup\n        this._markAsOption(object);\n        this._markAsOption(newValue);\n        return newValue\n    }\n\n    _isMyOption(value) {\n        return Utils.isPlainObject(value) && value[optionMetaData] && value[optionMetaData].owners.includes(this)\n    }\n\n    _shallowCloneOption(optionToShallowClone) {\n        if (!Utils.isPlainObject(optionToShallowClone)) {\n            return optionToShallowClone\n        }\n        let result = {};\n        Object.defineProperties(result, Object.getOwnPropertyDescriptors(optionToShallowClone));\n        return result\n    }\n\n    /**\n     * Adds a getter/setter hook to a certain object for a key with a value, where object[key]===value.\n     * @param object\n     * @param key\n     * @param value\n     * @param {Array} nestedPropertyPath\n     * @param {Object} listenerTree\n     * @private\n     */\n    _addGetterSetterHook(object, key, value, nestedPropertyPath, listenerTree) {\n        ObjectHelper.addGetSetPropertyWithShadow(object, key, value, true, true,\n            (info) =>\n                this._onEventTriggered({...info, type: 'setter', parentObject: object, nestedPropertyPath, listenerTree})\n            , (info) =>\n                this._onEventTriggered({...info, type: 'getter', parentObject: object, nestedPropertyPath, listenerTree}))\n    }\n\n    /**\n     * Called when a model is changed\n     * @param model\n     * @param {Array} changedProperties\n     * @param {String} modelKeyInParent The key of the parent object\n     * @param {Array} nestedPropertyPath\n     * @private\n     */\n    _onModelChanged(model, changedProperties, modelKeyInParent, nestedPropertyPath) {\n        let nestedPropretyPathToModel = nestedPropertyPath.concat(modelKeyInParent);\n        /* We need to check for undefined options here, since we can catch unreferenced properties, which we should ignore */\n        //TODO Optimize so that the listener doesn't have to be accessed twice when the check doesn't go through\n        let localListenerTree = this._accessListener(nestedPropretyPathToModel);\n        if (!localListenerTree) {\n            return;\n        }\n        changedProperties = changedProperties.filter((changedProperty) => localListenerTree[changedProperty]);\n        if (!changedProperties.length) {\n            return;\n        }\n        this._updateOptionsStructure(changedProperties, model, nestedPropretyPathToModel);\n    }\n\n    /**\n     * Happens when an event is triggered (getter/setter)\n     * @param {Object} info ({ nestedPropertyPath, propertyName, parentObject })\n     * @private\n     */\n    _onEventTriggered(info) {\n        if (this._ignoreListeners) {\n            return;\n        }\n        this.emit('optionTrigger', info);\n\n        if (info.type === 'setter' && this._listeningToSetters) {\n            /* In order to avoid accidentally triggering getters when reading and manipulating data, set boolean flag */\n            this._ignoreListeners = true;\n            let {nestedPropertyPath, propertyName, parentObject, oldValue, newValue} = info;\n            /* If reassignment to exactly the same thing, then don't do any update */\n            if (oldValue !== newValue) {\n                this._updateOptionsStructure([propertyName], parentObject, nestedPropertyPath, [oldValue]);\n            }\n            this._ignoreListeners = false;\n        } else if (info.type === 'getter' && info.listenerTree[storedInputOption]){\n            for(let inputOption of info.listenerTree[storedInputOption]){\n                inputOption.updateValueIfNecessary();\n            }\n        }\n    }\n\n    /**\n     * Deep updates the options based on parameter\n     * @param changedProperties\n     * @param parentObject\n     * @param nestedPropertyPath\n     * @param oldValues\n     * @private\n     */\n    _updateOptionsStructure(changedProperties, parentObject, nestedPropertyPath, oldValues = []) {\n        for (let [index, property] of changedProperties.entries()) {\n            this._markPropertyAsUpdated(nestedPropertyPath, property, parentObject[property], oldValues[index])\n        }\n    }\n\n    flushUpdates() {\n        this._flushArrayObserverChanges();\n        /* Do a traverse only for the leafs of the new updates, to avoid doing extra work */\n        this._deepTraverseWithShallowArrays(this._newOptionUpdates, (nestedPropertyPath, updateObjectParent, updateObject, propertyName, [defaultOptionParent, listenerTree, optionObject]) => {\n                    this._handleNewOptionUpdateLeaf(nestedPropertyPath, updateObject, propertyName, defaultOptionParent, listenerTree, optionObject);\n            }, [this.defaultOptions, this._listenerTree, this.options],\n            [true, false, false],\n            true\n        );\n        this._newOptionUpdates = {};\n        this._handleResultingUpdates();\n        this.emit('postFlush');\n    }\n\n    /**\n     * Marks a certain property as updated\n     * @param nestedPropertyPath\n     * @param propertyName\n     * @param value\n     * @param oldValue\n     * @private\n     */\n    _markPropertyAsUpdated(nestedPropertyPath, propertyName, value, oldValue) {\n\n        OptionObserver._markInstanceAsDirty(this);\n        /* Mark the object as changes in the most common path */\n        let updateObject = this._accommodateObjectPathUnless(this._newOptionUpdates, nestedPropertyPath, (object) =>\n            object[newChanges]\n        );\n        /* We rest upon the assumption that no function can access a nested path (options.nested.myString)\n         * without also accessing intermediary properties (options.nested getter is triggered). If this isn't\n         * true for some reason, updates will be missed */\n        if (updateObject !== notFound) {\n            let fullNestedPropertyPath = nestedPropertyPath.concat([propertyName]);\n            let localListenerTree = this._accessListener(fullNestedPropertyPath);\n            if (!localListenerTree || !(localListenerTree[listeners] || localListenerTree[0])) {\n                this._throwError(`Assignment to undefined option ${fullNestedPropertyPath.join('->')}`);\n            }\n            let localListeners = localListenerTree[listeners] || localListenerTree[0][listeners];\n            for (let entryNames of this._getUpdatesEntryNamesForLocalListenerTree(localListeners)) {\n                this._accommodateInsideObject(this._updatesForNextTick, entryNames, true)\n            }\n            updateObject[propertyName] = {\n                [newChanges]: value,\n                [originalValue]: oldValue\n            };\n            this.emit('propertyUpdated', {nestedPropertyPath, propertyName, value, oldValue});\n        }\n    }\n\n    /**\n     * Traverses an object with shallow arrays. Thin wrapper around deepTraverse\n     *\n     * @param object\n     * @param callback with arguments (nestedPropertyPath, object, value, key, {Array} extraObjectsToTraverse)\n     * @param {Array} extraObjectsToTraverse A couple of extra objects that are assumed to have the same structure\n     * @param {Array} isShallowObjects An array with the same length as extraObjectsToTraverse, with booleans indicating whether\n     * the objects are shallow (for example, the default options specified for arrays)\n     * @param {Boolean} onlyForLeaves\n     * @param {Array} nestedPropertyPath Used to keep track of the current nestedPropertyPath\n     * @param {Number} depthCount Internally used depth count to prevent infinite (or too nested) recursion\n     * @private\n     */\n    _deepTraverseWithShallowArrays(object,\n                                   callback,\n                                   extraObjectsToTraverse = [],\n                                   isShallowObjects = [],\n                                   onlyForLeaves = false,\n                                   nestedPropertyPath = [],\n                                   depthCount = 0) {\n        return this._deepTraverse(\n            object,\n            callback,\n            extraObjectsToTraverse,\n            (suggestedTraversals, key, parents) =>\n                Array.isArray(parents[0]) ? isShallowObjects.map((isShallowObject, index) => isShallowObject ? parents[index][0] : suggestedTraversals[index])\n                    : suggestedTraversals,\n            onlyForLeaves,\n            nestedPropertyPath,\n            depthCount\n        )\n    }\n\n\n\n    _getDeeplyNestedListenerPaths(localListenerTree, accumulator = []) {\n        if (localListenerTree === true) {\n            return accumulator;\n        }\n        let nestedPaths = [];\n        for (let key in localListenerTree) {\n            let nestedPath = this._getDeeplyNestedListenerPaths(localListenerTree[key], accumulator.concat(key));\n            /* If the resulting paths are doubled nested, then they need to be flattened one step */\n            if (Array.isArray(nestedPath[0])) {\n                nestedPaths.push(...nestedPath);\n            } else {\n                nestedPaths.push(nestedPath);\n            }\n        }\n        return nestedPaths;\n    }\n\n    /**\n     * Mark an object as being part of an option\n     * @param objectInOptionStructure\n     * @private\n     */\n    _markAsOption(objectInOptionStructure) {\n        if (!Utils.isPlainObject(objectInOptionStructure)) {\n            return\n        }\n        //TODO This might be able to be optimized\n        let originalOwners = (objectInOptionStructure[optionMetaData] && objectInOptionStructure[optionMetaData].owners) || [];\n        if (!originalOwners.includes(this)) {\n            objectInOptionStructure[optionMetaData] = {\n                owners: originalOwners.concat(this)\n            }\n        }\n\n    }\n\n    _throwError(message) {\n        throw new Error(`${this._errorName}: ${message}`)\n    }\n\n    /**\n     * Sets up a model that will be synchronized to update the options object whenever something is updated, after startListener() is called\n     *\n     * @param nestedPropertyPath\n     * @param model\n     * @param localListenerTree\n     * @param property\n     * @private\n     */\n    _setupModel(nestedPropertyPath, model, localListenerTree, property) {\n\n        //TODO This won't work if the id can be set to something else, so verify that this shouldn't be possible\n        /* We assume that the constructor name is unique */\n        let onModelChanged = (model, changedProperties) =>\n            this._onModelChanged(model, changedProperties, property, nestedPropertyPath);\n        let isListening = false;\n        for(let property of Object.keys(model)){\n            if(!localListenerTree[property]){\n                localListenerTree[property] = {[listeners]: {}};\n            }\n        }\n        return this._accommodateObjectPath(this._modelListeners, [model.constructor.name])[model.id] = {\n            startListening: () => {\n                if (!isListening) {\n                    model.on('changed', onModelChanged);\n                    isListening = true\n                }\n            },\n            stopListening: () => {\n                if (isListening) {\n                    model.removeListener('changed', onModelChanged);\n                    isListening = false\n                }\n            },\n            localListenerTree,\n            nestedPropertyPath: nestedPropertyPath.concat(property),\n            isListening: () => isListening\n        }\n    }\n\n    /**\n     * Deep traverses an object\n     * @param object\n     * @param callback with arguments (nestedPropertyPath, object, value, key, {Array} extraObjectsToTraverse)\n     * @param {Array} extraObjectsToTraverse A couple of extra objects that are assumed to have the same structure\n     * @param {Function} extraObjectProcessor Function to do extra work for the extra objects to process\n     * @param {Boolean} onlyForLeaves\n     * @param {Array} nestedPropertyPath Used to keep track of the current nestedPropertyPath\n     * @param {Number} depthCount Internally used depth count to prevent infinite (or too nested) recursion\n     * @private\n     */\n\n    /*TODO Refactor this function to use name parameters instead of order-based parameters */\n    _deepTraverse(object,\n                  callback,\n                  extraObjectsToTraverse = [],\n                  extraObjectProcessor = (item) => item,\n                  onlyForLeaves = false,\n                  nestedPropertyPath = [],\n                  depthCount = 0) {\n        if (!Utils.isPlainObject(object) && !Array.isArray(object)) {\n            return\n        }\n        if (depthCount > OptionObserver.maxSupportedDepth) {\n            this._throwError(`Encountered circular structure or an exceeded maximum depth of ${OptionObserver.maxSupportedDepth} exceeded`)\n        }\n        each(object, (value, key) => {\n\n            let valueIsPlainObject = value && typeof value === 'object' && value.constructor.name === 'Object';\n            let valueIsLeaf = valueIsPlainObject && Object.keys(value).length === 0;\n            if (!onlyForLeaves || valueIsLeaf) {\n                /* If the callback returns true, then cancel traversion */\n                if (callback(nestedPropertyPath, object, value, key, extraObjectsToTraverse)) {\n                    return //canceled traverse\n                }\n            }\n            if (valueIsPlainObject) {\n                this._deepTraverse(\n                    value,\n                    callback,\n                    extraObjectProcessor(extraObjectsToTraverse.map(\n                        (extraObjectToTraverse) => extraObjectToTraverse[key] || {}\n                    ), key, extraObjectsToTraverse),\n                    extraObjectProcessor,\n                    onlyForLeaves,\n                    nestedPropertyPath.concat(key),\n                    depthCount + 1\n                )\n            }\n        })\n    }\n\n    /**\n     * When properties are removed from options, they are reset to the value specified\n     * @private\n     * @param newValue\n     * @param oldValue\n     * @param defaultOptionValue\n     */\n    _resetRemovedPropertiesIfNeeded(newValue, oldValue, defaultOptionValue) {\n        if (!oldValue || !Utils.isPlainObject(oldValue) || !defaultOptionValue) {\n            return\n        }\n        let properties = Object.keys(newValue);\n        let oldProperties = Object.keys(oldValue);\n\n        let removedProperties = difference(oldProperties, properties);\n\n        for (let property of removedProperties) {\n            newValue[property] = defaultOptionValue[property]\n        }\n    }\n\n    /**\n     * Compares something to see if it's predictibly equal\n     * @param firstThing\n     * @param secondThing\n     * @returns {boolean}\n     * @private\n     */\n    _isPredictablyEqual(firstThing, secondThing) {\n        /* Object comparison is not reliable */\n        if (Utils.isPlainObject(firstThing)) {\n            return false\n        }\n        return firstThing === secondThing\n    }\n\n    /**\n     * Stops when any path is found with certain criteria\n     * @param object\n     * @param path\n     * @param criteriaCallback\n     * @returns {*}\n     * @private\n     */\n    _accommodateObjectPathUnless(object, path, criteriaCallback) {\n        for (let property of path) {\n            if (object[property] && criteriaCallback(object[property])) {\n                return notFound\n            }\n            object[property] = {};\n            object = object[property]\n        }\n        return object\n    }\n\n    /**\n     * Accommodates a path in an object\n     * @param object\n     * @param {Array<String>} path\n     * @returns {*}\n     * @private\n     */\n    _accommodateObjectPath(object, path) {\n        for (let property of path) {\n            if (!object[property]) {\n                object[property] = {}\n            }\n            object = object[property]\n        }\n        if (!object) {\n            object = {}\n        }\n        return object\n    }\n\n    /**\n     * Accommodates a path and puts the third argument at the end of that path\n     * @param {Object} object\n     * @param {Array<String>} path\n     * @param stuffToInsert\n     * @private\n     */\n    _accommodateInsideObject(object, path, stuffToInsert) {\n        this._accommodateObjectPath(object, path.slice(0, -1))[path[path.length - 1]] = stuffToInsert\n    }\n\n\n\n    _iterateInObjectPath(object, path, callback) {\n        for (let pathString of path) {\n            let objectToPassToCallback = notFound;\n            if (object.hasOwnProperty(pathString)) {\n                object = object[pathString];\n                objectToPassToCallback = object\n            }\n            callback(objectToPassToCallback)\n        }\n        return object\n    }\n\n    /**\n     * Deep traverses the entire options structure\n     * @param callback\n     * @returns {*}\n     * @private\n     */\n    _deepTraverseOptions(callback) {\n        return this._deepTraverse(this.options, callback)\n    }\n\n    whenSettled() {\n        if(Object.keys(this._updatesForNextTick).length || Object.keys(this._newOptionUpdates).length){\n            return new Promise((resolve) => this.once('settled', resolve));\n        }\n        return Promise.resolve();\n    }\n\n    _handleResultingUpdates() {\n        let triggerIndices = this._updatesForNextTick[OptionObserver.triggers];\n        if (triggerIndices && Object.keys(triggerIndices).length) {\n            for (let index in triggerIndices) {\n                this.triggerMethodForIndex(this.options, index);\n                delete triggerIndices[index];\n            }\n            /* Reflush to take the changes made by the trigger methods into account */\n            this.flushUpdates();\n            delete this._updatesForNextTick[OptionObserver.triggers];\n        }\n\n        /* Currently, all renderables are \"one dimensional\", they only have one name. That is why this is just a simple\n         * over the first shallow level of this object\n        */\n        for (let renderableName in this._updatesForNextTick) {\n            this.emit('needUpdate', renderableName)\n        }\n        this._updatesForNextTick = {};\n        this.emit('settled');\n        this._forbiddenUpdatesForNextTick = {};\n    }\n\n\n    /**\n     *\n     * @param newValue\n     * @param oldValue\n     * @param defaultOptionValue\n     * @private\n     */\n    _processImmediateOptionReassignment({newValue, oldValue, defaultOptionValue}) {\n        //This is kept a stub if there's more stuff needed to be added here. TODO Refactor function if not\n        this._resetRemovedPropertiesIfNeeded(newValue, oldValue, defaultOptionValue)\n    }\n\n    /**\n     * The most important function of the class. It traverses an ontouched level in the hierarchy of options\n     * and acts accordingly\n     *\n     * @param nestedPropertyPath\n     * @param defaultOption\n     * @param newValue\n     * @param propertyName\n     * @param newValueParent\n     * @param listenerTree\n     * @param defaultOptionParent\n     * @returns {*}\n     * @private\n     */\n    _processNewOptionUpdates({nestedPropertyPath, defaultOption, newValue, propertyName, newValueParent, listenerTree, defaultOptionParent}) {\n\n        let valueIsModelProperty = newValueParent instanceof Model && typeof defaultOptionParent === 'function';\n\n        let parentIsArray = Array.isArray(defaultOptionParent);\n        if (!valueIsModelProperty && !defaultOptionParent.hasOwnProperty(propertyName)) {\n            if (parentIsArray) {\n                defaultOption = defaultOptionParent[0]\n            } else {\n                this._throwError(`Assignment to undefined option: ${nestedPropertyPath.concat(propertyName).join('->')}`)\n            }\n        }\n\n        if (typeof defaultOption === 'function' &&\n            ( (defaultOption.prototype instanceof Model || defaultOption === Model) ||\n                (defaultOption.prototype instanceof PrioritisedArray || defaultOption === PrioritisedArray)\n            )\n        ) {\n            if (!newValue || !(newValue instanceof defaultOption)) {\n                this._throwError(`Failed to specify required: ${nestedPropertyPath.concat(propertyName).join('->')}.\n          ${newValue} is not of type ${defaultOption.name}!`)\n            }\n        }\n\n\n        let onChangeFunction = listenerTree[onOptionChange];\n        let newValueIsInputOption = newValue instanceof InputOption;\n\n        if (onChangeFunction !== undefined && !newValueIsInputOption) {\n            onChangeFunction(newValue)\n        } else if (newValueIsInputOption) {\n            let inputOptionObject = newValue;\n            onChangeFunction = (innerValue) => inputOptionObject[changeValue](innerValue);\n            listenerTree[onOptionChange] = onChangeFunction;\n            newValue = inputOptionObject[unwrapValue](this, nestedPropertyPath.concat(propertyName));\n        }\n\n        if (valueIsModelProperty) {\n            return\n        }\n\n        let valueToLinkTo;\n\n        /* If set to something undefined, then set to the default option. Does not apply for default options */\n\n        /*\n         * If the new value is undefined, and the array has been emptied, then we assign this to the default option.\n         * TODO: Come up with a more robust solution for default options of arrays */\n        if (newValue === undefined && (!parentIsArray || newValueParent.length === 0)) {\n            newValue = defaultOption;\n            if(onChangeFunction){\n                onChangeFunction(newValue);\n            }\n            if (Utils.isPlainObject(newValue)) {\n                valueToLinkTo = {};\n                this._markAsOption(valueToLinkTo);\n                valueToLinkTo[optionMetaData].isDefault = true\n            }\n        }\n\n        if (valueToLinkTo === undefined) {\n            valueToLinkTo = newValue\n        }\n\n        if (valueToLinkTo !== undefined) {\n            this._setupOptionLink(newValueParent, propertyName, valueToLinkTo, nestedPropertyPath, listenerTree);\n        }\n\n        //TODO clean up code if needed (why is it even needed?)\n        for (let property of Object.keys(defaultOptionParent)\n            .filter((property) => Utils.isPlainObject(defaultOptionParent[property]) && newValueParent[property] === undefined)\n            ) {\n            newValueParent[property] = {}\n        }\n\n        if (newValue instanceof Model) {\n            this._handleNewModelUpdate(nestedPropertyPath, newValue, listenerTree, propertyName)\n        }\n\n        if (Array.isArray(newValue)) {\n            this._setupArray(nestedPropertyPath, newValue, listenerTree, propertyName, defaultOption)\n        }\n\n        return newValue\n    }\n\n    /**\n     *\n     * @param nestedPropertyPath\n     * @param newValue\n     * @param listenerTree\n     * @param outerPropertyName\n     * @param defaultOption\n     * @private\n     */\n    _setupArray(nestedPropertyPath, newValue, listenerTree, outerPropertyName, defaultOption) {\n        if (!listenerTree[isArrayListener]) {\n            this._throwError(`The parameter ${nestedPropertyPath.concat(outerPropertyName).join('->')} is not registered as an array in the listener tree.`)\n        }\n\n        if (ArrayObserver.isArrayObserved(newValue)) {\n            //TODO Confirm that returning early is wished for\n            return\n        }\n        /* Continue traversing down the array and update the rest like normal, using the array observer as a stepping stone*/\n        let arrayObserver = new ArrayObserver(newValue, (index, value) => {\n            /* copy the listener tree information */\n            listenerTree[index] = listenerTree.value;\n            //TODO This might be overkill since it's already handled in the flush function (Try removing code below and see if it still works)\n            value = this._processNewOptionUpdates({\n                defaultOptionParent: defaultOption,\n                nestedPropertyPath: nestedPropertyPath.concat(outerPropertyName),\n                defaultOption: defaultOption[index],\n                newValueParent: newValue,\n                newValue: value,\n                propertyName: index,\n                listenerTree: listenerTree[index]\n            });\n\n            this._deepTraverse(defaultOption[0], (innerNestedPropertyPath, defaultOptionParent, defaultOption, propertyName, [newValueParent, listenerTreeParent]) => {\n\n                this._processNewOptionUpdates({\n                    nestedPropertyPath: nestedPropertyPath.concat(outerPropertyName, index, innerNestedPropertyPath),\n                    newValue: newValueParent[propertyName],\n                    propertyName,\n                    defaultOption,\n                    defaultOptionParent,\n                    listenerTree: listenerTreeParent[propertyName],\n                    newValueParent\n                })\n            }, [value, listenerTree.value])\n        });\n\n        listenerTree[storedArrayObserver] = arrayObserver;\n\n        //TODO utilize optimizations from partial updates (probably by implementing special events towards the view for this, aside from 'needUpdate')\n        arrayObserver.on('mapCalled',\n            (originalMapFunction, passedMapper) =>\n                //todo this isn't used. DOes it need to be here?\n                this.emit('mapCalled', {nestedPropertyPath, listenerTree, originalMapFunction, passedMapper})\n        );\n        let onArrayChanged = ({index, newValue, oldValue}) => {\n            this._markPropertyAsUpdated(nestedPropertyPath.concat(outerPropertyName), index, newValue, oldValue)\n        };\n        arrayObserver.on('replaced', onArrayChanged);\n        arrayObserver.on('added', onArrayChanged);\n        arrayObserver.on('removed', onArrayChanged);\n        this._arrayObservers.push(arrayObserver)\n\n    }\n\n    _handleNewModelUpdate(nestedPropertyPath, newValue, listenerTree, key) {\n        //TODO This implementation is a bit naive, won't work always (or in second thought, won't it?)\n        let oldListenerStructureBase = this.accessObjectPath(this._modelListeners, [oldValue.constructor.name]);\n\n        if (oldListenerStructureBase === notFound || !oldListenerStructureBase[oldValue.id]) {\n            return this._setupModel(nestedPropertyPath, newValue, listenerTree, key).startListening()\n        }\n\n        let oldListenerStructure = oldListenerStructureBase[oldValue.id];\n\n        if (oldListenerStructure.isListening()) {\n            oldListenerStructure.stopListening();\n            delete oldListenerStructureBase[oldValue.id];\n            this._setupModel(nestedPropertyPath, newValue, listenerTree, key).startListening()\n        }\n    }\n\n    _createListenerTree() {\n        this._listenerTree = cloneDeepWith(this.defaultOptions, this._listenerTreeCloner.bind(this)) || {[listeners]: {}}\n    }\n\n    /**\n     * Creates the listener tree\n     * We are interested in a tree that is a copy of the defaultOptions and with a symbol [listeners] set to {} everywhere applicable\n     * @param value\n     * @param propertyName\n     * @returns {*}\n     * @private\n     */\n    _listenerTreeCloner(value, propertyName) {\n        if ([listeners, isArrayListener].includes(propertyName)) {\n            return value\n        }\n        let isPlainObject = Utils.isPlainObject(value), isArray = Array.isArray(value);\n        /* If the object already has the listeners set*/\n        if (typeof value === 'object' && value[listeners] && !Object.keys(value).length) {\n            return value\n        }\n        if (isPlainObject || isArray) {\n\n            let listenersIfExists = value[listeners];\n            if (!listenersIfExists) {\n                let valueToClone = {...value, [listeners]: {}};\n                if (isArray) {\n                    valueToClone = {value: value[0] || {}, [listeners]: {}, [isArrayListener]: true}\n                }\n\n                return cloneDeepWith(valueToClone, this._listenerTreeCloner.bind(this));\n            }\n        } else {\n            return {[listeners]: {}}\n        }\n    }\n\n\n    _flushArrayObserverChanges() {\n        for (let arrayObserver of this._arrayObservers) {\n            arrayObserver.rebuild()\n        }\n    }\n\n    _listenForModelUpdates(entryNames) {\n        PrioritisedObject.setPropertyGetterSpy((model, propertyName) => {\n            /* TODO handle the case where this can be undefined */\n            let modelListenerOfType = this._modelListeners[model.constructor.name] || {};\n            let modelListener = modelListenerOfType[model.id];\n            if (!modelListenerOfType || !modelListener) {\n                //TODO, instead of throwing an error, accommodate property in local listener\n                return this._throwError(`Model when creating ${entryNames.join('')} not declared as a valid binding`);\n            }\n            let localListenerTree = modelListener.localListenerTree[propertyName];\n            this._addToListenerTree(entryNames, localListenerTree);\n            modelListener.startListening();\n        })\n    }\n\n    _handleNewOptionUpdateLeaf(nestedPropertyPath, updateObject, propertyName, defaultOptionParent, listenerTree, optionObject) {\n        let newValue = updateObject[newChanges],\n            oldValue = updateObject[originalValue];\n        let defaultOption = defaultOptionParent[propertyName];\n        let innerListenerTree = listenerTree[propertyName];\n\n        if (Utils.isPlainObject(defaultOptionParent)) {\n            this._processImmediateOptionReassignment({\n                newValue, oldValue, defaultOption\n            })\n        }\n\n        this._processNewOptionUpdates({\n            defaultOptionParent: defaultOptionParent,\n            nestedPropertyPath,\n            defaultOption,\n            newValueParent: optionObject,\n            newValue,\n            propertyName,\n            listenerTree: innerListenerTree\n        });\n\n        /* If the parent is a model or function, then no need to continue */\n        if (!Utils.isPlainObject(defaultOption)) {\n            return\n        }\n\n        let outerNestedPropertyPath = nestedPropertyPath.concat(propertyName);\n\n        this._deepTraverseWithShallowArrays(defaultOption, (innerNestedPropertyPath, defaultOptionParent, defaultOption, propertyName, [listenerTreeParent, newValueParent]) => {\n            this._processNewOptionUpdates({\n                nestedPropertyPath: outerNestedPropertyPath.concat(innerNestedPropertyPath),\n                defaultOption,\n                newValueParent,\n                newValue: newValueParent[propertyName],\n                propertyName,\n                defaultOptionParent,\n                listenerTree: listenerTreeParent[propertyName]\n            })\n        }, [innerListenerTree, optionObject[propertyName]], [false, false])\n    }\n\n\n    static _instances = [];\n    static _dirtyInstances = {};\n\n    static _tickCount = 0;\n\n    /**\n     * Every tick, the changes are flushed in the options object. The _isFlushingUpdates flag gives an indication whether\n     * the flushings are in progress or not\n     *\n     * @private\n     */\n    static _flushAllUpdates() {\n        //TODO Add guards/errors for infinite updates here\n        this._isFlushingUpdates = true;\n        OptionObserver._tickCount++;\n        /* Reset dirty instances, because we are going to traverse all instances anyways */\n        OptionObserver._dirtyInstances = {};\n        for (let optionObserver of OptionObserver._instances) {\n            optionObserver.flushUpdates()\n        }\n        /* Flush dirty instances until there are no more dirty instances left */\n        while (Object.keys(OptionObserver._dirtyInstances).length) {\n            let dirtyInstances = {...OptionObserver._dirtyInstances};\n            OptionObserver._dirtyInstances = {};\n            for (let optionObserverID in dirtyInstances) {\n                dirtyInstances[optionObserverID].flushUpdates()\n            }\n        }\n        this._isFlushingUpdates = false;\n    }\n\n    static _registerNewInstance(newInstance) {\n        this._instances.push(newInstance);\n        newInstance[instanceIdentifier] = this._instances.length\n    }\n\n    static _markInstanceAsDirty(dirtyInstance) {\n        OptionObserver._dirtyInstances[dirtyInstance[instanceIdentifier]] = dirtyInstance\n    }\n}\n\n/* Flush updates, if they exist, every tick */\nTimer.every(OptionObserver._flushAllUpdates);",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/OptionObserver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1354,
    "kind": "variable",
    "name": "newChanges",
    "memberof": "src/utils/view/OptionObserver.js",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~newChanges",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/view/OptionObserver.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1355,
    "kind": "variable",
    "name": "onOptionChange",
    "memberof": "src/utils/view/OptionObserver.js",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~onOptionChange",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/OptionObserver.js",
    "importStyle": "{onOptionChange}",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1356,
    "kind": "class",
    "name": "OptionObserver",
    "memberof": "src/utils/view/OptionObserver.js",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/OptionObserver.js",
    "importStyle": "{OptionObserver}",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 1357,
    "kind": "member",
    "name": "_listenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_listenerTree",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1358,
    "kind": "member",
    "name": "_reverseListenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_reverseListenerTree",
    "access": "private",
    "description": null,
    "lineNumber": 54,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1359,
    "kind": "member",
    "name": "_newReverseListenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_newReverseListenerTree",
    "access": "private",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1360,
    "kind": "member",
    "name": "_listenerTreeMetaData",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_listenerTreeMetaData",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1361,
    "kind": "member",
    "name": "_modelListeners",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_modelListeners",
    "access": "private",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1362,
    "kind": "member",
    "name": "_activeRecordings",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_activeRecordings",
    "access": "private",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1363,
    "kind": "member",
    "name": "_newOptionUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_newOptionUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1364,
    "kind": "member",
    "name": "_updatesForNextTick",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_updatesForNextTick",
    "access": "private",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1365,
    "kind": "member",
    "name": "_forbiddenUpdatesForNextTick",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_forbiddenUpdatesForNextTick",
    "access": "private",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1366,
    "kind": "member",
    "name": "_listeningToSetters",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_listeningToSetters",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1367,
    "kind": "member",
    "name": "_arrayObservers",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_arrayObservers",
    "access": "private",
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1368,
    "kind": "member",
    "name": "maxSupportedDepth",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver.maxSupportedDepth",
    "access": "public",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1369,
    "kind": "member",
    "name": "triggers",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver.triggers",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1370,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOptions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Function>"
        ],
        "spread": false,
        "optional": false,
        "name": "bindingsTriggerFunctions",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "debugName",
        "description": "Used for displaying error messages and being able to trace them back more easily"
      }
    ]
  },
  {
    "__docId__": 1371,
    "kind": "member",
    "name": "_errorName",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_errorName",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1372,
    "kind": "member",
    "name": "_bindingsTriggerMethods",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_bindingsTriggerMethods",
    "access": "private",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1373,
    "kind": "member",
    "name": "defaultOptions",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#defaultOptions",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1374,
    "kind": "member",
    "name": "options",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#options",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1375,
    "kind": "method",
    "name": "recordForRenderable",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#recordForRenderable",
    "access": "public",
    "description": "Records the updates that happen in options and models (intended to be called before the construction of that renderable)",
    "lineNumber": 97,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1376,
    "kind": "method",
    "name": "getOptions",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#getOptions",
    "access": "public",
    "description": "Returns the options that are being observed",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1377,
    "kind": "method",
    "name": "deleteRecordingForRenderable",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#deleteRecordingForRenderable",
    "access": "public",
    "description": "Should be called when the renderable isn't relevant anymore",
    "lineNumber": 115,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1378,
    "kind": "method",
    "name": "getInputOptions",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#getInputOptions",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1379,
    "kind": "method",
    "name": "triggerMethodForIndex",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#triggerMethodForIndex",
    "access": "private",
    "description": "Executes the trigger function. The trigger function is treated similarly to that of a renderable,\nbut it's identified with the symbol OptionObserver.triggers accompanied by an index, instead of a string\n\nDifferent examples of trigger situations:\nScenario 1: Construction\nA. The trigger function is called\nB. Getters are detected for the pre-process function\nC. this.options isn't set, so nothing more happens\n\nTODO This description is outdated\n\nScenario 2. Setter trigger of a trigger function\nA. After flushing, it is concluded to belong to the trigger function (and other renderables)\nB. The trigger function is triggered immediately and firstly when flushing change events\nC. The trigger function re-executes the function and getters are triggered again\nD. this.options is defined, and it setters will be notified.\nE. An inner flush is forced within the flush, and it there might be new renderables needing update now\nF. The flush completes and resets the _updatesForNextTick\nG. The outer flush continues, and has nothing more to do\nH. Since we made changes within a flush, the static OptionObserver loop _flushAllUpdates, will call the flush function once again, but doing nothing\n\nScenario 3. Recombine options\nA. After flushing, it is concluded that the option changes belong to one of the trigger functions (and other renderables)\nB. Continues same as scenario 2.",
    "lineNumber": 154,
    "params": [
      {
        "name": "incomingOptions",
        "types": [
          "*"
        ]
      },
      {
        "name": "index",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1380,
    "kind": "method",
    "name": "preventEntryFromBeingUpdated",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#preventEntryFromBeingUpdated",
    "access": "public",
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "params": [
      {
        "name": "entryNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1381,
    "kind": "method",
    "name": "allowEntryToBeUpdated",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#allowEntryToBeUpdated",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "entryNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1382,
    "kind": "method",
    "name": "setup",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#setup",
    "access": "public",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1383,
    "kind": "method",
    "name": "getActiveRecordings",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#getActiveRecordings",
    "access": "public",
    "description": "Used by InputOption to determine which recording is currently active",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{}}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{}"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1384,
    "kind": "method",
    "name": "getListenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#getListenerTree",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1385,
    "kind": "method",
    "name": "accessObjectPath",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#accessObjectPath",
    "access": "private",
    "description": "Similar to _.get, except that it returns notFound (a symbol) when not found. It also supports tarversing listeners",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "traverseListeners",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1386,
    "kind": "method",
    "name": "_getUpdatesEntryNamesForLocalListenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_getUpdatesEntryNamesForLocalListenerTree",
    "access": "private",
    "description": "Gets the entry names that are there for a certain listener tree",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<*>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "localListenerTree",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<*>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1387,
    "kind": "method",
    "name": "_recordForTriggerMethod",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_recordForTriggerMethod",
    "access": "private",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "params": [
      {
        "name": "callback",
        "types": [
          "*"
        ]
      },
      {
        "name": "triggerIndex",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1388,
    "kind": "method",
    "name": "_recordForEntry",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_recordForEntry",
    "access": "private",
    "description": "Records for a specific entry",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "entryNames",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "allowSetters",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1389,
    "kind": "method",
    "name": "_accessListener",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_accessListener",
    "access": "private",
    "description": "Accesses a listener in a certain path",
    "lineNumber": 304,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1390,
    "kind": "method",
    "name": "_addToListenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_addToListenerTree",
    "access": "private",
    "description": "",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "entryNames",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "localListenerTree",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1391,
    "kind": "method",
    "name": "_doAllTriggerMethods",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_doAllTriggerMethods",
    "access": "private",
    "description": "Performs all available bindings triggering functions",
    "lineNumber": 346,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "incomingOptions",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1392,
    "kind": "method",
    "name": "_endListenerTreeUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_endListenerTreeUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [
      {
        "name": "renderableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1393,
    "kind": "method",
    "name": "_beginListenerTreeUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_beginListenerTreeUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 371,
    "undocument": true,
    "params": [
      {
        "name": "entryNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1394,
    "kind": "method",
    "name": "_stopRecordingForEntry",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_stopRecordingForEntry",
    "access": "private",
    "description": "Called when a renderable shouldn't be recorded anymore",
    "lineNumber": 390,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "entryName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1395,
    "kind": "method",
    "name": "recombineOptions",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#recombineOptions",
    "access": "public",
    "description": "Updates the options from an external reason",
    "lineNumber": 403,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newOptions",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1397,
    "kind": "method",
    "name": "_markAllOptionsAsUpdated",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_markAllOptionsAsUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1398,
    "kind": "method",
    "name": "_setupOptionLink",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_setupOptionLink",
    "access": "private",
    "description": null,
    "lineNumber": 442,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "nestedPropertyPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "listenerTree",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1399,
    "kind": "method",
    "name": "_isMyOption",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_isMyOption",
    "access": "private",
    "description": null,
    "lineNumber": 457,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1400,
    "kind": "method",
    "name": "_shallowCloneOption",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_shallowCloneOption",
    "access": "private",
    "description": null,
    "lineNumber": 461,
    "undocument": true,
    "params": [
      {
        "name": "optionToShallowClone",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1401,
    "kind": "method",
    "name": "_addGetterSetterHook",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_addGetterSetterHook",
    "access": "private",
    "description": "Adds a getter/setter hook to a certain object for a key with a value, where object[key]===value.",
    "lineNumber": 479,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "key",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "listenerTree",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1402,
    "kind": "method",
    "name": "_onModelChanged",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_onModelChanged",
    "access": "private",
    "description": "Called when a model is changed",
    "lineNumber": 495,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "changedProperties",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "modelKeyInParent",
        "description": "The key of the parent object"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1403,
    "kind": "method",
    "name": "_onEventTriggered",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_onEventTriggered",
    "access": "private",
    "description": "Happens when an event is triggered (getter/setter)",
    "lineNumber": 515,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "({ nestedPropertyPath, propertyName, parentObject })"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1404,
    "kind": "member",
    "name": "_ignoreListeners",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_ignoreListeners",
    "access": "private",
    "description": null,
    "lineNumber": 523,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1406,
    "kind": "method",
    "name": "_updateOptionsStructure",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_updateOptionsStructure",
    "access": "private",
    "description": "Deep updates the options based on parameter",
    "lineNumber": 545,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "changedProperties",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parentObject",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldValues",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1407,
    "kind": "method",
    "name": "flushUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#flushUpdates",
    "access": "public",
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1409,
    "kind": "method",
    "name": "_markPropertyAsUpdated",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_markPropertyAsUpdated",
    "access": "private",
    "description": "Marks a certain property as updated",
    "lineNumber": 573,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldValue",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1410,
    "kind": "method",
    "name": "_deepTraverseWithShallowArrays",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_deepTraverseWithShallowArrays",
    "access": "private",
    "description": "Traverses an object with shallow arrays. Thin wrapper around deepTraverse",
    "lineNumber": 614,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "with arguments (nestedPropertyPath, object, value, key, {Array} extraObjectsToTraverse)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "extraObjectsToTraverse",
        "description": "A couple of extra objects that are assumed to have the same structure"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "isShallowObjects",
        "description": "An array with the same length as extraObjectsToTraverse, with booleans indicating whether\nthe objects are shallow (for example, the default options specified for arrays)"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "onlyForLeaves",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": "Used to keep track of the current nestedPropertyPath"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "depthCount",
        "description": "Internally used depth count to prevent infinite (or too nested) recursion"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1411,
    "kind": "method",
    "name": "_getDeeplyNestedListenerPaths",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_getDeeplyNestedListenerPaths",
    "access": "private",
    "description": null,
    "lineNumber": 636,
    "undocument": true,
    "params": [
      {
        "name": "localListenerTree",
        "types": [
          "*"
        ]
      },
      {
        "name": "accumulator",
        "optional": true,
        "types": [
          "*[]"
        ],
        "defaultRaw": [],
        "defaultValue": "[]"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1412,
    "kind": "method",
    "name": "_markAsOption",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_markAsOption",
    "access": "private",
    "description": "Mark an object as being part of an option",
    "lineNumber": 658,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectInOptionStructure",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1413,
    "kind": "method",
    "name": "_throwError",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_throwError",
    "access": "private",
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1414,
    "kind": "method",
    "name": "_setupModel",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_setupModel",
    "access": "private",
    "description": "Sets up a model that will be synchronized to update the options object whenever something is updated, after startListener() is called",
    "lineNumber": 685,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "localListenerTree",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "property",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1415,
    "kind": "method",
    "name": "_deepTraverse",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_deepTraverse",
    "access": "private",
    "description": "Deep traverses an object",
    "lineNumber": 729,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "with arguments (nestedPropertyPath, object, value, key, {Array} extraObjectsToTraverse)"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "extraObjectsToTraverse",
        "description": "A couple of extra objects that are assumed to have the same structure"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "extraObjectProcessor",
        "description": "Function to do extra work for the extra objects to process"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "onlyForLeaves",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": "Used to keep track of the current nestedPropertyPath"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "depthCount",
        "description": "Internally used depth count to prevent infinite (or too nested) recursion"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1416,
    "kind": "method",
    "name": "_resetRemovedPropertiesIfNeeded",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_resetRemovedPropertiesIfNeeded",
    "access": "private",
    "description": "When properties are removed from options, they are reset to the value specified",
    "lineNumber": 775,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOptionValue",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1417,
    "kind": "method",
    "name": "_isPredictablyEqual",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_isPredictablyEqual",
    "access": "private",
    "description": "Compares something to see if it's predictibly equal",
    "lineNumber": 796,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "firstThing",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "secondThing",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1418,
    "kind": "method",
    "name": "_accommodateObjectPathUnless",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_accommodateObjectPathUnless",
    "access": "private",
    "description": "Stops when any path is found with certain criteria",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "criteriaCallback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1419,
    "kind": "method",
    "name": "_accommodateObjectPath",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_accommodateObjectPath",
    "access": "private",
    "description": "Accommodates a path in an object",
    "lineNumber": 830,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1420,
    "kind": "method",
    "name": "_accommodateInsideObject",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_accommodateInsideObject",
    "access": "private",
    "description": "Accommodates a path and puts the third argument at the end of that path",
    "lineNumber": 850,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<String>"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stuffToInsert",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1421,
    "kind": "method",
    "name": "_iterateInObjectPath",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_iterateInObjectPath",
    "access": "private",
    "description": null,
    "lineNumber": 856,
    "undocument": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      },
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "callback",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1422,
    "kind": "method",
    "name": "_deepTraverseOptions",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_deepTraverseOptions",
    "access": "private",
    "description": "Deep traverses the entire options structure",
    "lineNumber": 874,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1423,
    "kind": "method",
    "name": "whenSettled",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#whenSettled",
    "access": "public",
    "description": null,
    "lineNumber": 878,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1424,
    "kind": "method",
    "name": "_handleResultingUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_handleResultingUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 885,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1427,
    "kind": "method",
    "name": "_processImmediateOptionReassignment",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_processImmediateOptionReassignment",
    "access": "private",
    "description": "",
    "lineNumber": 916,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOptionValue",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1428,
    "kind": "method",
    "name": "_processNewOptionUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_processNewOptionUpdates",
    "access": "private",
    "description": "The most important function of the class. It traverses an ontouched level in the hierarchy of options\nand acts accordingly",
    "lineNumber": 935,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOption",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValueParent",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "listenerTree",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOptionParent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1429,
    "kind": "method",
    "name": "_setupArray",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_setupArray",
    "access": "private",
    "description": "",
    "lineNumber": 1030,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "nestedPropertyPath",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newValue",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "listenerTree",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outerPropertyName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "defaultOption",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1430,
    "kind": "method",
    "name": "_handleNewModelUpdate",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_handleNewModelUpdate",
    "access": "private",
    "description": null,
    "lineNumber": 1086,
    "undocument": true,
    "params": [
      {
        "name": "nestedPropertyPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "newValue",
        "types": [
          "*"
        ]
      },
      {
        "name": "listenerTree",
        "types": [
          "*"
        ]
      },
      {
        "name": "key",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1431,
    "kind": "method",
    "name": "_createListenerTree",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_createListenerTree",
    "access": "private",
    "description": null,
    "lineNumber": 1103,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1433,
    "kind": "method",
    "name": "_listenerTreeCloner",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_listenerTreeCloner",
    "access": "private",
    "description": "Creates the listener tree\nWe are interested in a tree that is a copy of the defaultOptions and with a symbol [listeners] set to {} everywhere applicable",
    "lineNumber": 1115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "propertyName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1434,
    "kind": "method",
    "name": "_flushArrayObserverChanges",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_flushArrayObserverChanges",
    "access": "private",
    "description": null,
    "lineNumber": 1141,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1435,
    "kind": "method",
    "name": "_listenForModelUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_listenForModelUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 1147,
    "undocument": true,
    "params": [
      {
        "name": "entryNames",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1436,
    "kind": "method",
    "name": "_handleNewOptionUpdateLeaf",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver#_handleNewOptionUpdateLeaf",
    "access": "private",
    "description": null,
    "lineNumber": 1162,
    "undocument": true,
    "params": [
      {
        "name": "nestedPropertyPath",
        "types": [
          "*"
        ]
      },
      {
        "name": "updateObject",
        "types": [
          "*"
        ]
      },
      {
        "name": "propertyName",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultOptionParent",
        "types": [
          "*"
        ]
      },
      {
        "name": "listenerTree",
        "types": [
          "*"
        ]
      },
      {
        "name": "optionObject",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1437,
    "kind": "member",
    "name": "_instances",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._instances",
    "access": "private",
    "description": null,
    "lineNumber": 1205,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1438,
    "kind": "member",
    "name": "_dirtyInstances",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._dirtyInstances",
    "access": "private",
    "description": null,
    "lineNumber": 1206,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1439,
    "kind": "member",
    "name": "_tickCount",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._tickCount",
    "access": "private",
    "description": null,
    "lineNumber": 1208,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1440,
    "kind": "method",
    "name": "_flushAllUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._flushAllUpdates",
    "access": "private",
    "description": "Every tick, the changes are flushed in the options object. The _isFlushingUpdates flag gives an indication whether\nthe flushings are in progress or not",
    "lineNumber": 1216,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1441,
    "kind": "member",
    "name": "_isFlushingUpdates",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._isFlushingUpdates",
    "access": "private",
    "description": null,
    "lineNumber": 1218,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1443,
    "kind": "method",
    "name": "_registerNewInstance",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._registerNewInstance",
    "access": "private",
    "description": null,
    "lineNumber": 1236,
    "undocument": true,
    "params": [
      {
        "name": "newInstance",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1444,
    "kind": "method",
    "name": "_markInstanceAsDirty",
    "memberof": "src/utils/view/OptionObserver.js~OptionObserver",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/OptionObserver.js~OptionObserver._markInstanceAsDirty",
    "access": "private",
    "description": null,
    "lineNumber": 1241,
    "undocument": true,
    "params": [
      {
        "name": "dirtyInstance",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1445,
    "kind": "file",
    "name": "src/utils/view/RenderableHelper.js",
    "content": "/**\n * Created by lundfall on 02/09/16.\n */\n\nimport OrderedHashMap from 'ordered-hashmap'\nimport merge from 'lodash/merge.js'\nimport Modifier from 'famous/core/Modifier.js'\nimport Transform from 'famous/core/Transform.js'\nimport RenderNode from 'famous/core/RenderNode.js'\nimport Timer from 'famous/utilities/Timer.js'\nimport MouseSync from 'famous/inputs/MouseSync.js'\nimport TouchSync from 'famous/inputs/TouchSync.js'\nimport GenericSync from 'famous/inputs/GenericSync.js'\nimport Easing from 'famous/transitions/Easing.js'\nimport Draggable from 'famous/modifiers/Draggable.js'\nimport AnimationController from 'famous-flex/AnimationController.js'\nimport ContainerSurface from 'famous/surfaces/ContainerSurface.js'\nimport Transitionable from 'famous/transitions/Transitionable.js'\n\nimport {Throttler} from 'arva-js/utils/Throttler.js'\n\nimport {Utils} from './Utils.js'\nimport {limit} from '../Limiter.js'\nimport {\n    callbackToPromise,\n    waitMilliseconds\n} from '../CallbackHelpers.js'\n\nexport class RenderableHelper {\n\n    /**\n     * Creates a utility for maintaining proper state of decorated renderables\n     * @param {Function} bindMethod\n     * @param {Function} pipeMethod\n     * @param {Function} getIDfromLocalNameMethod\n     * @param {Object|Renderable} outputRenderables\n     * @param sizeResolver\n     */\n    constructor(bindMethod, pipeMethod, getIDfromLocalNameMethod, outputRenderables, sizeResolver) {\n        this._bindMethod = bindMethod;\n        this._renderableCounterparts = outputRenderables;\n        this._sizeResolver = sizeResolver;\n        this._pipeToView = pipeMethod;\n        this._getIDfromLocalName = getIDfromLocalNameMethod;\n        this.waitingAnimations = [];\n        this._renderables = {};\n        this._ongoingTransitions = {};\n        this._groupedRenderables = {};\n        this._pipedRenderables = {};\n        this._groupedRenderables = {};\n        this._queuedRenderableTransitions = {};\n        this._delayedTransitions = {};\n        this._newRenderables = {};\n    }\n\n    /**\n     * Adds a new renderable\n     * @param renderable\n     * @param renderableName\n     */\n    assignRenderable(renderable, renderableName) {\n        this._renderables[renderableName] = renderable;\n        this._newRenderables[renderableName] = true;\n        let renderableEquivalent = renderable;\n        if (renderable.decorations) {\n            renderableEquivalent = this._addDecoratedRenderable(renderable, renderableName);\n        }\n        this._renderableCounterparts[renderableName] = renderableEquivalent;\n        this._setupAllRenderableListeners(renderableName);\n    }\n\n    getRenderableNames() {\n        return Object.keys(this._renderables)\n    }\n\n    /**\n     * Setups all renderable listeners (decoration events, decoration pipes, pipe to the view)\n     * @param {String} renderableName the name of the renderable\n     * @param {Boolean} enabled set to false to unset all the events\n     * @private\n     */\n    _setupAllRenderableListeners(renderableName, enabled = true) {\n        /* If the this._renderableCounterparts equivalent doesn't have the pipe function as is the case with the draggable, then use the regular renderable */\n        let renderableOrEquivalent = this._getPipeableRenderableFromName(renderableName)\n        if (enabled) {\n            this._pipeRenderable(renderableOrEquivalent, renderableName)\n        } else {\n            this._unpipeRenderable(renderableOrEquivalent, renderableName)\n        }\n        let {decorations} = this._renderables[renderableName]\n        if (decorations) {\n            this._setDecorationPipes(renderableOrEquivalent, decorations.pipes, enabled);\n            this._setDecorationEvents(renderableOrEquivalent, decorations.eventSubscriptions, enabled);\n        }\n    }\n\n    /**\n     * Sets the decoration events that are specified with (among potential others) @layout.on and @layout.once\n     * @param {String} renderableName\n     * @param enable. If false, removes the events.\n     * @private\n     */\n    _setDecorationEvents(renderable, subscriptions, enable = true) {\n        for (let subscription of subscriptions || []) {\n            let subscriptionType = subscription.type || 'on';\n            let {options} = subscription;\n            if (!enable) {\n                /* In famous, you remove a listener by calling 'removeListener', but some classes might have another event\n                 * listener that is called 'off'\n                 */\n                subscriptionType = renderable.removeListener ? 'removeListener' : 'off';\n            }\n            let eventName = subscription.eventName;\n            let callback = subscription.callback;\n            if (subscriptionType in renderable) {\n                renderable[subscriptionType](eventName, this._bindMethod(callback), options)\n            }\n        }\n    }\n\n    /**\n     * Pipes the renderable to a list of other renderables\n     * @param {Renderable} renderable\n     * @param {Array|String} Names of renderables that have to be piped.\n     * @param {Boolean} enabled. Set to false to unpipe\n     * @private\n     */\n    _setDecorationPipes(renderable, pipes, enabled = true) {\n        for (let pipeToName of pipes || []) {\n            let target = this._renderables[this._getIDfromLocalName(pipeToName)];\n            if (!target) {\n                Utils.warn(`Cannot pipe to unknown renderable: ${pipeToName}`);\n            }\n            let pipeFn = (enabled ? '' : 'un') + 'pipe';\n            /* In order to keep things consistent and easier to use, we pipe from the renderable equivalent */\n            if (renderable[pipeFn]) {\n                renderable[pipeFn](target)\n            }\n            if (renderable[pipeFn] && target._eventOutput) {\n                renderable[pipeFn](target._eventOutput)\n            }\n        }\n\n    }\n\n    /**\n     * Unpipes a renderables that has been piped to this view\n     * @param {String} renderableName The name of the renderable\n     * @private\n     */\n    _unpipeRenderable(renderableName) {\n        if (this._pipeToView(this._pipedRenderables[renderableName], false)) {\n            delete this._pipedRenderables[renderableName]\n        }\n    }\n\n    /**\n     * Pipes a renderable to this view\n     * @param {Renderable} renderable. The renderable that is going to be piped\n     * @param {String} renderableName. The name of the renderable that is going to be piped.\n     * @private\n     */\n    _pipeRenderable(renderable, renderableName) {\n        /* Auto pipe events from the renderable to the view */\n        if (this._pipeToView(renderable, true)) {\n            this._pipedRenderables[renderableName] = renderable\n        }\n    }\n\n    /**\n     * Determines whether the renderable counterpart (i.e. animationcontroller or containersurface) should be used\n     * when piping, or the renderable itself\n     * @param {String} renderableName The name of the renderable\n     * @returns {Renderable} the renderable or its counterpart\n     * @private\n     */\n    _getPipeableRenderableFromName(renderableName) {\n        return this._renderableCounterparts[renderableName].pipe ? this._renderableCounterparts[renderableName] : this._renderables[renderableName]\n    }\n\n    /**\n     * Adds a decorated renderable to the bookkeeping of the view\n     * @param renderable\n     * @param renderableName\n     * @returns {Renderable} newRenderable The renderable that is normally stored this._renderableCounterpart[renderableName]\n     * @private\n     */\n    _addDecoratedRenderable(renderable, renderableName) {\n        let {decorations} = renderable;\n        let {flow, size, dock} = decorations;\n\n        if (size) {\n            this._bindSizeFunctions(size)\n        }\n        if (dock && dock.size) {\n            this._bindSizeFunctions(dock.size)\n        }\n        this._handleDecoratorTransitions(renderableName, decorations, false);\n\n        let renderableCounterpart = this._processsDecoratedRenderableCounterpart(renderable, renderableName)\n\n        this._addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName)\n        return renderableCounterpart\n    }\n\n    /**\n     * Bind the size functions so that they don't have to be bound afterwards\n     * @param {Array|Number} size\n     * @private\n     */\n    _bindSizeFunctions(size) {\n        for (let index = 0; index < 2; index++) {\n            if (typeof size[index] === 'function') {\n                size[index] = this._bindMethod(size[index])\n            }\n        }\n    }\n\n    /**\n     * Returns true if there are any flowy renderables.\n     * @returns {Boolean} hasFlowyRenderables\n     */\n    hasFlowyRenderables() {\n        for (let groupName in this._groupedRenderables) {\n            let renderableGroup = this._groupedRenderables[groupName]\n            if (!renderableGroup.keys().every((renderableName) => !renderableGroup.get(renderableName)[0].decorations.flow)) {\n                return true\n            }\n        }\n        return false\n    }\n\n    /**\n     * Processes the renderable counter-part of the renderable. The counterpart is different from the renderable\n     * in @layout.draggable, @layout.swipable, @layout.animate, and others.\n     * @param {Renderable} renderable the renderable which has renderable.decorations set to determine the counter part\n     * @param {String} renderableName the name of the renderable\n     * @returns {AnimationController|ContainerSurface|RenderNode|*} The renderable counterpart\n     * @private\n     */\n    _processsDecoratedRenderableCounterpart(renderable, renderableName) {\n        let {draggableOptions, swipableOptions, clip, animation, flow, modifier} = renderable.decorations\n\n        /* If we clip, then we need to create a containerSurface */\n        if (clip) {\n            let clipSize = clip.size\n            /* Resolve clipSize specified as undefined */\n            let containerSurface = new ContainerSurface({\n                size: clipSize,\n                properties: {overflow: 'hidden', ...clip.properties}\n            })\n            containerSurface.add(renderable)\n            if (renderable.pipe) {\n                renderable.pipe(containerSurface._eventOutput)\n            }\n            renderable.containerSurface = containerSurface\n        }\n\n        if (animation) {\n            this._processAnimatedRenderable(renderable, renderableName, animation)\n        }\n\n        if (swipableOptions) {\n            renderable = this._initSwipable(swipableOptions, renderable);\n        } else if (draggableOptions && !renderable.node) {\n            renderable.node = new RenderNode();\n            let draggable = new Draggable(draggableOptions);\n            renderable.draggable = draggable;\n            renderable.node.add(draggable).add(renderable);\n            renderable.pipe(draggable);\n            //TODO: We don't do an unpiping of the draggable, which might be dangerous\n            this._pipeToView(draggable);\n        } else if (modifier) {\n            renderable.node = new RenderNode();\n            renderable.node.add(modifier).add(renderable);\n        }\n\n        if (renderable.node) {\n            /* Assign output handler */\n            renderable.node._eventOutput = renderable._eventOutput\n        }\n\n        let renderableCounterpart = renderable.animationController || renderable.containerSurface || renderable.node || renderable\n        /* If a renderable has an AnimationController used to animate it, add that to this._renderableCounterparts.\n         * If a renderable has an ContainerSurface used to clip it, add that to this._renderableCounterparts.\n         * this._renderableCounterparts is used in the LayoutController in this.layout to render this view. */\n        if (flow) {\n            renderableCounterpart.isFlowy = true\n        }\n        return renderableCounterpart\n    }\n\n    /**\n     * Pipes the output events of all items in the renderable counterparts that might have been forgotten due to legacy way of declaring\n     * renderables\n     * @returns {void}\n     * @private\n     */\n    pipeAllRenderables() {\n        for (let renderableName in this.renderables) {\n            if (!this._pipedRenderables[renderableName]) {\n                this._pipeRenderable(this._getPipeableRenderableFromName(renderableName), renderableName)\n            }\n        }\n    }\n\n    /**\n     * Initialize all animation set by @layout.animate\n     */\n    initializeAnimations() {\n        for (let animation of (this.waitingAnimations || [])) {\n            let renderableToWaitFor = this._renderables[animation.waitFor]\n            if (renderableToWaitFor && renderableToWaitFor.on) {\n                renderableToWaitFor.on('shown', function subscription() {\n                    animation.showMethod()\n                    if ('off' in renderableToWaitFor) {\n                        renderableToWaitFor.off('shown', subscription)\n                    }\n                    if ('removeListener' in renderableToWaitFor) {\n                        renderableToWaitFor.removeListener('shown', subscription)\n                    }\n                })\n            } else {\n                Utils.warn(`Attempted to delay showing renderable ${animation.waitFor}, which does not exist or contain an on() method.`)\n            }\n        }\n    }\n\n    /**\n     * Processes an animated renderable\n     * @param renderable\n     * @param renderableName\n     * @param options\n     * @private\n     */\n    _processAnimatedRenderable(renderable, renderableName, options) {\n\n        let pipeRenderable = () => {\n            if (renderable.pipe) renderable.pipe(renderable.animationController._eventOutput)\n        }\n\n        /* If there's already an animationcontroller present, just change the options */\n        let renderableCounterpart = this._renderableCounterparts[renderableName]\n        if (renderableCounterpart instanceof AnimationController) {\n            renderable.animationController = renderableCounterpart\n            renderable.animationController.setOptions(options)\n            pipeRenderable();\n        } else {\n            let animationController = renderable.animationController = new AnimationController(options);\n            pipeRenderable();\n            let showMethod = this.showWithAnimationController.bind(this, animationController, renderable);\n\n            if (options.delay && options.delay > 0 && options.showInitially) {\n                Timer.setTimeout(showMethod, options.delay)\n            } else if (options.waitFor) {\n                this.waitingAnimations.push({showMethod: showMethod, waitFor: options.waitFor})\n            } else if (options.showInitially) {\n                showMethod()\n            }\n\n        }\n    }\n\n    /**\n     * Shows a renderable using the animationController specified. When operation is complete, the renderable emits\n     * the one events 'show' or 'hide', depending on what operation that was done.\n     * @param animationController\n     * @param renderable\n     * @param show\n     * @private\n     */\n    showWithAnimationController(animationController, renderable, callback, show = true, options = {}) {\n        animationController._showingRenderable = show\n        let callbackIfExists = () => {\n            if (callback) {\n                callback()\n            }\n        };\n        let emitOnFinished = () => {\n            if (renderable.emit) {\n                renderable.emit(show ? 'shown' : 'hidden');\n            }\n            callbackIfExists();\n        };\n\n        if (show) {\n            animationController.show(renderable.containerSurface || renderable, options, emitOnFinished);\n        } else {\n            animationController.hide(null, emitOnFinished);\n        }\n    }\n\n    _addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName) {\n        /* Group the renderable */\n        let groupName = this._getGroupName(renderable);\n\n        if (groupName) {\n            if (!(groupName in this._groupedRenderables)) {\n                this._groupedRenderables[groupName] = new OrderedHashMap()\n            }\n            /* We save the both the renderable and the renderable counterpart in pairs */\n            this._groupedRenderables[groupName].set(renderableName, [renderable, renderableCounterpart])\n        }\n    }\n\n    _getGroupName(renderable) {\n        let {decorations} = renderable;\n\n        if (!!decorations.dock) {\n            /* 'filled' is a special subset of 'docked' renderables, that need to be rendered after the normal 'docked' renderables are rendered. */\n            return decorations.dock.dockMethod === 'fill' ? 'filled' : 'docked';\n        } else if (!!decorations.fullSize) {\n            return 'fullSize'\n        } else if (decorations.size || decorations.origin || decorations.align || decorations.translate) {\n            return 'traditional'\n        } else {\n            /* This occurs e.g. when a renderable is only marked @renderable, and its parent view has a @layout.custom decorator to define its context. */\n            return 'ignored'\n        }\n    }\n\n    /**\n     * Gets the renderables of a certain group\n     * @param {String} The name of the group\n     * @returns {OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the renderables of the specified type.\n     */\n    getRenderableGroup(groupName) {\n        return this._groupedRenderables[groupName]\n    }\n\n    /**\n     * Removes the renderable from the view\n     * @param {String} renderableName The name of the renderable\n     */\n    removeRenderable(renderableName) {\n        let renderable = this._renderables[renderableName];\n        this._setDecorationPipes(renderableName, false);\n        this._setDecorationEvents(renderableName, false);\n        this._unpipeRenderable(renderableName, renderableName);\n        this._removeRenderableFromDecoratorGroup(renderable, renderableName);\n        delete this._ongoingTransitions[renderableName];\n        delete this._queuedRenderableTransitions[renderableName];\n        delete this._renderableCounterparts[renderableName];\n        delete this._renderables[renderableName];\n    }\n\n    //Done\n    _removeRenderableFromDecoratorGroup(renderable, renderableName) {\n        let groupName = this._getGroupName(renderable)\n        this._removeRenderableFromGroupWithName(renderableName, groupName)\n    }\n\n    _removeRenderableFromGroupWithName(renderableName, groupName) {\n        let group = this._groupedRenderables[groupName]\n        group.remove(renderableName)\n        if (!group.count()) {\n            delete this._groupedRenderables[groupName]\n        }\n    }\n\n    /**\n     * @example\n     * decorateRenderable('myRenderable',layout.size(100, 100));\n     *\n     * Decorates a renderable with other decorators. Using the same decorators as used previously will override the old ones.\n     * @param {String} renderableName The name of the renderable\n     * @param ...decorators The decorators that should be applied\n     */\n    decorateRenderable(renderableName, ...decorators) {\n        let renderable = this._renderables[renderableName];\n        /* Add translate and rotate to be sure that there decorators translateFrom and rotateFrom work */\n        let fakeRenderable = {\n            decorations: {\n                translate: renderable.decorations.translate || [0, 0, 0],\n                rotate: renderable.decorations.rotate || [0, 0, 0]\n            }\n        };\n\n        /* There can be existing decorators already, which are preserved. We are extending the decorators object,\n         * by first creating a fake renderable that gets decorators */\n        this.applyDecoratorFunctionsToRenderable(fakeRenderable, decorators);\n        let {decorations} = fakeRenderable;\n        this.applyDecoratorObjectToRenderable(renderableName, decorations);\n\n    }\n\n    _handleDecoratorTransitions(renderableName, decorations, inQueue) {\n        let {tweenTransitions} = decorations;\n        if (tweenTransitions) {\n            if (!inQueue) {\n                /* If it's not a queued animation, then it means that it is something that should execute asap and cancelled the last animaiton */\n                this.cancelRenderableTransition(renderableName);\n            }\n            /* We shouldn't worry about priority if it's a brand new renderable, it should just execute immediately */\n            let priority = this._newRenderables[renderableName] ?\n                undefined : tweenTransitions[0].transition.queuePriority;\n\n            this._ongoingTransitions[renderableName] = {callbacks: [], priority};\n            if (typeof priority === 'number') {\n                if (this._mostUrgentTransitionPriority === undefined) {\n                    this._mostUrgentTransitionPriority = priority;\n                } else {\n                    this._mostUrgentTransitionPriority = Math.min(this._mostUrgentTransitionPriority, priority);\n                }\n            }\n\n            this._queuedRenderableTransitions[renderableName] = tweenTransitions;\n        }\n    }\n\n    applyDecoratorObjectToRenderable(renderableName, decorations, inQueue = false) {\n        this._handleDecoratorTransitions(renderableName, decorations, inQueue);\n        let renderable = this._renderables[renderableName];\n        let renderableOrEquivalent = this._getPipeableRenderableFromName(renderableName);\n        /* We might need to do extra piping */\n        this._setDecorationPipes(renderableOrEquivalent, decorations.pipes);\n        this._setDecorationEvents(renderableOrEquivalent, decorations.eventSubscriptions);\n\n        /* If the renderable is surface, we need to do some special things if there is a true size being used */\n        if (Utils.renderableIsSurface(renderable)) {\n            let sizesToCheck = [];\n            let {size, dock} = decorations;\n            if (size) {\n                sizesToCheck.push(size);\n            }\n            if (dock) {\n                sizesToCheck.push(dock.size);\n            }\n            let isTrueSized = false;\n            let trueSizedInfo = this._sizeResolver.getSurfaceTrueSizedInfo(renderable);\n            for (let sizeToCheck of sizesToCheck) {\n                for (let dimension of [0, 1]) {\n                    if (this._sizeResolver.isValueTrueSized(sizeToCheck[dimension])) {\n                        isTrueSized = true;\n                        if (!trueSizedInfo) {\n                            this._sizeResolver.configureTrueSizedSurface(renderable, sizeToCheck);\n                        }\n                    }\n                }\n            }\n            /* When the renderable used to be true sized, and now isn't, the size property has to be reset in order for the renderable\n            *  to read the context size*/\n            if (trueSizedInfo && !isTrueSized && size) {\n                renderable.setSize(null);\n            }\n        }\n        let oldRenderableGroupName = this._getGroupName(renderable);\n        let wasFlowy = !!renderable.decorations.flow;\n        let shouldDisableDock = (decorations.disableDock && renderable.decorations.dock)\n        let shouldDisableFullSize = (decorations.size && renderable.decorations.fullSize)\n        if (shouldDisableDock) {\n            delete renderable.decorations.dock\n        }\n        if (shouldDisableFullSize) {\n            delete renderable.decorations.fullSize\n        }\n\n        /* Merge existing flow decorations so they won't be discarded */\n        if (renderable.decorations.flow && decorations.flow) {\n            merge(decorations.flow, renderable.decorations.flow)\n        }\n\n        /* Extend the object */\n        Object.assign(renderable.decorations, decorations);\n        /* See if we have to redo the grouping */\n        let needToChangeDecoratorGroup = (oldRenderableGroupName !== this._getGroupName(renderable)) || shouldDisableDock || shouldDisableFullSize\n        /* Process new renderable equivalent, if that applies */\n        let renderableCounterpart = this._renderableCounterparts[renderableName] = this._processsDecoratedRenderableCounterpart(renderable, renderableName)\n        if (needToChangeDecoratorGroup) {\n            this._removeRenderableFromGroupWithName(renderableName, oldRenderableGroupName)\n            this._addRenderableToDecoratorGroup(renderable, renderableCounterpart, renderableName)\n        }\n    }\n\n    applyDecoratorFunctionsToRenderable(renderable, decorators) {\n        for (let decorator of decorators) {\n            /* There can be existing decorators already, which are preserved. We are extending the decorators object,\n             * by first creating a fake renderable that gets decorators */\n            decorator(renderable)\n        }\n    }\n\n    /**\n     * Replaces one renderable with the other, making sure that the decorators stay consistent\n     * @param oldRenderableName\n     * @param newRenderable\n     * @param newRenderableName\n     */\n    replaceRenderable(oldRenderableName, newRenderable, newRenderableName) {\n        let renderable = this._renderables[oldRenderableName]\n        let renderableHasAnimationController = (this._renderableCounterparts[oldRenderableName] instanceof AnimationController)\n        /* If there isn't a renderable equivalent animationController that does the piping, then we need to redo the event piping */\n        if (!renderableHasAnimationController) {\n            /* Remove the listeners */\n            this._setupAllRenderableListeners(oldRenderableName, false)\n        }\n        newRenderable.decorations = {...newRenderable.decorations, ...renderable.decorations}\n        let newRenderableCounterpart = this._processsDecoratedRenderableCounterpart(newRenderable, oldRenderableName)\n        if (!renderableHasAnimationController) {\n            this._renderableCounterparts[oldRenderableName] = newRenderableCounterpart\n            this._setupAllRenderableListeners(oldRenderableName, true)\n        }\n        let renderableGroup = this._groupedRenderables[this._getGroupName(renderable)]\n        let indexOfRenderable = renderableGroup.indexOf(oldRenderableName)\n        renderableGroup.remove(oldRenderableName)\n        renderableGroup.insert(indexOfRenderable, newRenderableName, [newRenderable, newRenderableCounterpart])\n        this._renderables[newRenderableName] = newRenderable;\n        this._renderableCounterparts[newRenderableName] = this._renderableCounterparts[oldRenderableName]\n        delete this._renderables[oldRenderableName]\n        delete this._renderableCounterparts[oldRenderableName]\n    }\n\n    async setRenderableFlowState(renderableName = '', stateName = '') {\n\n        let renderable = this._renderables[renderableName]\n        if (!renderable || !renderable.decorations || !renderable.decorations.flow) {\n            return Utils.warn(`setRenderableFlowState called on non-existing or renderable '${renderableName}' without flowstate`)\n        }\n        let flowOptions = renderable.decorations.flow\n\n        /* Keep track of which flow state changes are running. We only allow one at a time per renderable.\n         * The latest one is always the valid one.\n         */\n        let flowWasInterrupted = false\n\n        flowOptions.currentState = stateName\n        for (let {transformations, options} of flowOptions.states[stateName].steps) {\n            flowOptions.currentTransition = options.transition\n            this.decorateRenderable(renderableName, ...transformations)\n\n            /* Make sure FlowLayoutNode.set() is called next render tick */\n            this._sizeResolver.requestReflow();\n\n            /* Set the callback of the renderable so it's passed to the flowLayoutNode */\n            let resolveData = await new Promise((resolve) => renderable.decorations.flow.callback = resolve)\n\n            /* Optionally, we insert a delay in between ending the previous state change, and starting on the new one. */\n            if (options.delay) {\n                await waitMilliseconds(options.delay)\n            }\n\n            /* If the flow has been interrupted */\n            if (resolveData.reason === 'flowInterrupted') {\n                flowWasInterrupted = true\n                break\n            }\n\n            let emit = (renderable._eventOutput && renderable._eventOutput.emit || renderable.emit).bind(renderable._eventOutput || renderable)\n            emit('flowStep', {state: stateName})\n        }\n\n        return !flowWasInterrupted\n    }\n\n    async setViewFlowState(stateName = '', flowOptions) {\n        let steps = flowOptions.viewStates[stateName]\n\n        if (!steps) {\n            Utils.warn(`Warning: flow state name '${stateName}' does not exist`);\n            return false;\n        }\n\n        /* If there is just one step, it might not be an array */\n        if (!Array.isArray(steps)) {\n            steps = [steps]\n        }\n\n        /* This is intended to be overwritten by other asynchronous calls to this method, see the stateName check below. */\n        flowOptions.currentState = stateName\n\n        for (let step of steps) {\n            await Promise.all(this.generateWaitQueueFromViewStateStep(step))\n\n            /* If another state has been set since the invocation of this method, skip any remaining transformations. */\n            if (flowOptions.currentState !== stateName) {\n                break\n            }\n        }\n\n        return true\n    }\n\n    generateWaitQueueFromViewStateStep(step) {\n        let waitQueue = []\n        for (let localRenderableName in step) {\n            let state = step[localRenderableName]\n            waitQueue.push(this.setRenderableFlowState(this._getIDfromLocalName(localRenderableName), state))\n        }\n        return waitQueue\n    }\n\n    getRenderableFlowState(renderableName = '') {\n        let renderable = this._renderables[renderableName]\n        if (!renderable || !renderable.decorations || !renderable.decorations.flow) {\n            return Utils.warn(`getRenderableFlowState called on non-existing or renderable '${renderableName}' without flowstate`)\n        }\n        let flowOptions = renderable.decorations.flow\n        return flowOptions.currentState\n    }\n\n    getViewFlowState(flowOptions = {}) {\n        return flowOptions.currentState\n    }\n\n    /**\n     * Create the swipable and register all the event logic for a swipable renderable\n     * @private\n     */\n    _initSwipable(swipableOptions = {}, renderable = {}) {\n        GenericSync.register({\n            'mouse': MouseSync,\n            'touch': TouchSync\n        })\n\n        let sync = new GenericSync({\n            'mouse': {},\n            'touch': {}\n        })\n\n        renderable.pipe(sync)\n\n        /* Translation modifier */\n        var positionModifier = new Modifier({\n            transform: function () {\n                let [x, y] = position.get()\n                return Transform.translate(x, y, 0)\n            }\n        })\n\n        var position = new Transitionable([0, 0])\n\n        sync.on('update', (data) => {\n            let [x, y] = position.get()\n            x += !swipableOptions.snapX ? data.delta[0] : 0\n            y += !swipableOptions.snapY ? data.delta[1] : 0\n            let {yRange = [0, 0], xRange = [0, 0]} = swipableOptions\n            y = limit(yRange[0], y, yRange[1])\n            x = limit(xRange[0], x, xRange[1])\n            position.set([x, y])\n        })\n\n        sync.on('end', (data) => {\n            let [x, y] = position.get()\n            data.velocity[0] = Math.abs(data.velocity[0]) < 0.5 ? data.velocity[0] * 2 : data.velocity[0]\n            let endX = swipableOptions.snapX ? 0 : x + data.delta[0] + (data.velocity[0] * 175)\n            let endY = swipableOptions.snapY ? 0 : y + data.delta[1] + (data.velocity[1] * 175)\n            let {yRange = [0, 0], xRange = [0, 0]} = swipableOptions\n            endY = limit(yRange[0], endY, yRange[1])\n            endX = limit(xRange[0], endX, xRange[1])\n            position.set([endX, endY], {\n                curve: Easing.outCirc,\n                duration: (750 - Math.abs((data.velocity[0] * 150)))\n            })\n\n            this._determineSwipeEvents(renderable, swipableOptions, endX, endY)\n\n        })\n\n        renderable.node = new RenderNode()\n        renderable.node.add(positionModifier).add(renderable)\n\n        return renderable\n    }\n\n    _determineSwipeEvents(renderable, swipableOptions = {}, endX = 0, endY = 0) {\n\n        if (!renderable || !renderable._eventOutput) return\n\n        let xThreshold = swipableOptions.xThreshold || [undefined, undefined]\n        let yThreshold = swipableOptions.yThreshold || [undefined, undefined]\n\n        if (xThreshold[1] && endX > xThreshold[1]) {\n            renderable._eventOutput.emit('swiped', {\n                direction: 0,\n                displacement: 'right'\n            })\n        }\n\n        if (xThreshold[0] && endX < xThreshold[0]) {\n            renderable._eventOutput.emit('swiped', {\n                direction: 0,\n                displacement: 'left'\n            })\n        }\n\n        if (yThreshold[1] && endY > yThreshold[1]) {\n            renderable._eventOutput.emit('swiped', {\n                direction: 1,\n                displacement: 'bottom'\n            })\n        }\n\n        if (yThreshold[0] && endY < yThreshold[0]) {\n            renderable._eventOutput.emit('swiped', {\n                direction: 1,\n                displacement: 'top'\n            })\n        }\n    }\n\n    /**\n     * Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed\n     * before 'nextRenderableName'.\n     * @param {String} renderableName\n     * @param {String} nextRenderableName\n     */\n    prioritiseDockBefore(renderableName, nextRenderableName) {\n        let dockedRenderables = this._groupedRenderables.docked\n        if (!dockedRenderables) {\n            Utils.warn(`Could not prioritise '${renderableName}' before '${nextRenderableName}': no docked renderables present.`)\n            return false\n        }\n        let result = this._prioritiseDockAtIndex(renderableName, dockedRenderables.indexOf(nextRenderableName))\n        if (!result) {\n            Utils.warn(`Could not prioritise '${renderableName}' before '${nextRenderableName}': could not find one of the renderables by name.\n                        The following docked renderables are present: ${dockedRenderables.keys()}`)\n        }\n        return result\n    }\n\n    /**\n     * @param {String} renderableName\n     * @param {String} prevRenderableName\n     */\n    prioritiseDockAfter(renderableName, prevRenderableName) {\n        let dockedRenderables = this._groupedRenderables.docked\n        if (!dockedRenderables) {\n            Utils.warn(`Could not prioritise '${renderableName}' after '${prevRenderableName}': no docked renderables present.`)\n            return false\n        }\n        let result = this._prioritiseDockAtIndex(renderableName, dockedRenderables.indexOf(prevRenderableName) + 1)\n        if (!result) {\n            Utils.warn(`Could not prioritise '${renderableName}' after '${prevRenderableName}': could not find one of the renderables by name.\n                        The following docked renderables are present: ${dockedRenderables.keys()}`)\n        }\n        return result\n    }\n\n    /**\n     * Helper function used by prioritiseDockBefore and prioritiseDockAfter to change order of docked renderables\n     * @param renderableName\n     * @param index\n     * @returns {boolean}\n     * @private\n     */\n    _prioritiseDockAtIndex(renderableName, index) {\n        let dockedRenderables = this._groupedRenderables.docked\n        let renderableToRearrange = dockedRenderables.get(renderableName);\n\n        if (index < 0 || !renderableToRearrange) {\n            return false\n        }\n\n        dockedRenderables.remove(renderableName);\n        dockedRenderables.insert(index, renderableName, renderableToRearrange);\n\n        return true\n\n    }\n\n    applyDirectDecoratorsFromRenderablePrototype(decorations, renderablePrototype) {\n        /* Instead of passing the renderable here, we pass the decorations-object directly, since this is what the\n         * directly applied decorator functions expect. This makes it a very simple function but it's kept as a separate\n         * for explanatory purposes */\n        this.applyDecoratorFunctionsToRenderable(decorations, renderablePrototype.getDirectlyAppliedDecoratorFunctions());\n    }\n\n    waitForRenderableTransition(renderableID) {\n        if (this._ongoingTransitions[renderableID]) {\n            return new Promise((resolve, reject) => {\n                this._ongoingTransitions[renderableID].callbacks.push({resolve, reject})\n            })\n\n        }\n        return Promise.resolve();\n    }\n\n    cancelRenderableTransition(renderableID) {\n        this._terminateRenderableTransition(renderableID, false);\n    }\n\n    completeRenderableTransition(renderableID) {\n        this._terminateRenderableTransition(renderableID, true);\n    }\n\n    _terminateRenderableTransition(renderableID, wasSuccessful) {\n        let ongoingTransitions = this._ongoingTransitions[renderableID];\n        if (!ongoingTransitions) {\n            return;\n        }\n        for (let transitionCallback of ongoingTransitions.callbacks) {\n            wasSuccessful ? transitionCallback.resolve(renderableID) : transitionCallback.reject({reason: 'Canceled'});\n        }\n        delete this._ongoingTransitions[renderableID];\n        this._determineMostUrgentTransitionPriority();\n    }\n\n    _determineMostUrgentTransitionPriority() {\n        let lowestPriority;\n        for (let [_, {priority}] of Object.entries(this._ongoingTransitions)) {\n            if (priority !== undefined) {\n                if (lowestPriority === undefined) {\n                    lowestPriority = Infinity;\n                }\n                lowestPriority = Math.min(lowestPriority, priority);\n            }\n        }\n        this._mostUrgentTransitionPriority = lowestPriority;\n    }\n\n    flushTransitions(context) {\n        for (let [renderableID, transitions] of Object.entries(this._queuedRenderableTransitions || {})) {\n\n            let priority = transitions[0].transition.queuePriority;\n            if (this._mostUrgentTransitionPriority !== undefined && priority > this._mostUrgentTransitionPriority) {\n                this._delayedTransitions[renderableID] = transitions;\n                continue;\n            }\n            delete this._delayedTransitions[renderableID];\n\n            /* Take the first transition off */\n            let currentTransitionObject = transitions.shift();\n\n            this.applyDecoratorObjectToRenderable(renderableID, currentTransitionObject.decorations, true);\n\n            context.transition(renderableID, currentTransitionObject.transition,\n                (() => {\n                    Object.assign(this._queuedRenderableTransitions, this._delayedTransitions);\n                    /* Only apply the callback if there are transitions left in queue */\n                    if (!transitions.length) {\n                        this.completeRenderableTransition(renderableID);\n                    } else {\n                        let ongoingTransition = this._ongoingTransitions[renderableID];\n                        if (ongoingTransition) {\n                            ongoingTransition.priority = transitions[0].transition.queuePriority;\n                        }\n                        this._determineMostUrgentTransitionPriority();\n                        this._queuedRenderableTransitions[renderableID] = transitions;\n                    }\n                    this._sizeResolver.requestReflow();\n                }));\n        }\n        this._queuedRenderableTransitions = {};\n        /* Unmark the renderbles as new */\n        this._newRenderables = {};\n    }\n\n\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/RenderableHelper.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1446,
    "kind": "class",
    "name": "RenderableHelper",
    "memberof": "src/utils/view/RenderableHelper.js",
    "static": true,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/RenderableHelper.js",
    "importStyle": "{RenderableHelper}",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1447,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#constructor",
    "access": "public",
    "description": "Creates a utility for maintaining proper state of decorated renderables",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "bindMethod",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pipeMethod",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "getIDfromLocalNameMethod",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object",
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "outputRenderables",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "sizeResolver",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1448,
    "kind": "member",
    "name": "_bindMethod",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_bindMethod",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1449,
    "kind": "member",
    "name": "_renderableCounterparts",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_renderableCounterparts",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1450,
    "kind": "member",
    "name": "_sizeResolver",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_sizeResolver",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1451,
    "kind": "member",
    "name": "_pipeToView",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_pipeToView",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1452,
    "kind": "member",
    "name": "_getIDfromLocalName",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_getIDfromLocalName",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1453,
    "kind": "member",
    "name": "waitingAnimations",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#waitingAnimations",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1454,
    "kind": "member",
    "name": "_renderables",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_renderables",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1455,
    "kind": "member",
    "name": "_ongoingTransitions",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_ongoingTransitions",
    "access": "private",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1456,
    "kind": "member",
    "name": "_groupedRenderables",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_groupedRenderables",
    "access": "private",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1457,
    "kind": "member",
    "name": "_pipedRenderables",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_pipedRenderables",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1459,
    "kind": "member",
    "name": "_queuedRenderableTransitions",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_queuedRenderableTransitions",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1460,
    "kind": "member",
    "name": "_delayedTransitions",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_delayedTransitions",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1461,
    "kind": "member",
    "name": "_newRenderables",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_newRenderables",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1462,
    "kind": "method",
    "name": "assignRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#assignRenderable",
    "access": "public",
    "description": "Adds a new renderable",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1463,
    "kind": "method",
    "name": "getRenderableNames",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#getRenderableNames",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1464,
    "kind": "method",
    "name": "_setupAllRenderableListeners",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_setupAllRenderableListeners",
    "access": "private",
    "description": "Setups all renderable listeners (decoration events, decoration pipes, pipe to the view)",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": "the name of the renderable"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled",
        "description": "set to false to unset all the events"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1465,
    "kind": "method",
    "name": "_setDecorationEvents",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_setDecorationEvents",
    "access": "private",
    "description": "Sets the decoration events that are specified with (among potential others) @layout.on and @layout.once",
    "lineNumber": 103,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable.",
        "description": "If false, removes the events."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1466,
    "kind": "method",
    "name": "_setDecorationPipes",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_setDecorationPipes",
    "access": "private",
    "description": "Pipes the renderable to a list of other renderables",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "Names",
        "description": "of renderables that have to be piped."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "enabled.",
        "description": "Set to false to unpipe"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1467,
    "kind": "method",
    "name": "_unpipeRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_unpipeRenderable",
    "access": "private",
    "description": "Unpipes a renderables that has been piped to this view",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": "The name of the renderable"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1468,
    "kind": "method",
    "name": "_pipeRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_pipeRenderable",
    "access": "private",
    "description": "Pipes a renderable to this view",
    "lineNumber": 163,
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable.",
        "description": "The renderable that is going to be piped"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName.",
        "description": "The name of the renderable that is going to be piped."
      }
    ],
    "return": null
  },
  {
    "__docId__": 1469,
    "kind": "method",
    "name": "_getPipeableRenderableFromName",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_getPipeableRenderableFromName",
    "access": "private",
    "description": "Determines whether the renderable counterpart (i.e. animationcontroller or containersurface) should be used\nwhen piping, or the renderable itself",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Renderable} the renderable or its counterpart"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": "The name of the renderable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Renderable"
      ],
      "spread": false,
      "description": "the renderable or its counterpart"
    }
  },
  {
    "__docId__": 1470,
    "kind": "method",
    "name": "_addDecoratedRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_addDecoratedRenderable",
    "access": "private",
    "description": "Adds a decorated renderable to the bookkeeping of the view",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Renderable} newRenderable The renderable that is normally stored this._renderableCounterpart[renderableName]"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Renderable"
      ],
      "spread": false,
      "description": "newRenderable The renderable that is normally stored this._renderableCounterpart[renderableName]"
    }
  },
  {
    "__docId__": 1471,
    "kind": "method",
    "name": "_bindSizeFunctions",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_bindSizeFunctions",
    "access": "private",
    "description": "Bind the size functions so that they don't have to be bound afterwards",
    "lineNumber": 211,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1472,
    "kind": "method",
    "name": "hasFlowyRenderables",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#hasFlowyRenderables",
    "access": "public",
    "description": "Returns true if there are any flowy renderables.",
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} hasFlowyRenderables"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "hasFlowyRenderables"
    },
    "params": []
  },
  {
    "__docId__": 1473,
    "kind": "method",
    "name": "_processsDecoratedRenderableCounterpart",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_processsDecoratedRenderableCounterpart",
    "access": "private",
    "description": "Processes the renderable counter-part of the renderable. The counterpart is different from the renderable\nin @layout.draggable, @layout.swipable, @layout.animate, and others.",
    "lineNumber": 241,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{AnimationController|ContainerSurface|RenderNode|*} The renderable counterpart"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": "the renderable which has renderable.decorations set to determine the counter part"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": "the name of the renderable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "AnimationController",
        "ContainerSurface",
        "RenderNode",
        "*"
      ],
      "spread": false,
      "description": "The renderable counterpart"
    }
  },
  {
    "__docId__": 1474,
    "kind": "method",
    "name": "pipeAllRenderables",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#pipeAllRenderables",
    "access": "private",
    "description": "Pipes the output events of all items in the renderable counterparts that might have been forgotten due to legacy way of declaring\nrenderables",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 1475,
    "kind": "method",
    "name": "initializeAnimations",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#initializeAnimations",
    "access": "public",
    "description": "Initialize all animation set by @layout.animate",
    "lineNumber": 310,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1476,
    "kind": "method",
    "name": "_processAnimatedRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_processAnimatedRenderable",
    "access": "private",
    "description": "Processes an animated renderable",
    "lineNumber": 336,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1477,
    "kind": "method",
    "name": "showWithAnimationController",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#showWithAnimationController",
    "access": "private",
    "description": "Shows a renderable using the animationController specified. When operation is complete, the renderable emits\nthe one events 'show' or 'hide', depending on what operation that was done.",
    "lineNumber": 372,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "animationController",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "show",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1478,
    "kind": "method",
    "name": "_addRenderableToDecoratorGroup",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_addRenderableToDecoratorGroup",
    "access": "private",
    "description": null,
    "lineNumber": 393,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderableCounterpart",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1479,
    "kind": "method",
    "name": "_getGroupName",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_getGroupName",
    "access": "private",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1480,
    "kind": "method",
    "name": "getRenderableGroup",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#getRenderableGroup",
    "access": "public",
    "description": "Gets the renderables of a certain group",
    "lineNumber": 427,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{OrderedHashMap} A map containing Array-pairs of [renderable, renderableCounterpart] containing the renderables of the specified type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "The",
        "description": "name of the group"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "OrderedHashMap"
      ],
      "spread": false,
      "description": "A map containing Array-pairs of [renderable, renderableCounterpart] containing the renderables of the specified type."
    }
  },
  {
    "__docId__": 1481,
    "kind": "method",
    "name": "removeRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#removeRenderable",
    "access": "public",
    "description": "Removes the renderable from the view",
    "lineNumber": 435,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": "The name of the renderable"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1482,
    "kind": "method",
    "name": "_removeRenderableFromDecoratorGroup",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_removeRenderableFromDecoratorGroup",
    "access": "private",
    "description": null,
    "lineNumber": 448,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderableName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1483,
    "kind": "method",
    "name": "_removeRenderableFromGroupWithName",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_removeRenderableFromGroupWithName",
    "access": "private",
    "description": null,
    "lineNumber": 453,
    "undocument": true,
    "params": [
      {
        "name": "renderableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "groupName",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1484,
    "kind": "method",
    "name": "decorateRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#decorateRenderable",
    "access": "public",
    "description": "",
    "examples": [
      "decorateRenderable('myRenderable',layout.size(100, 100));\n\nDecorates a renderable with other decorators. Using the same decorators as used previously will override the old ones."
    ],
    "lineNumber": 469,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": "The name of the renderable"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "...decorators",
        "description": "The decorators that should be applied"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1485,
    "kind": "method",
    "name": "_handleDecoratorTransitions",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_handleDecoratorTransitions",
    "access": "private",
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "params": [
      {
        "name": "renderableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "decorations",
        "types": [
          "*"
        ]
      },
      {
        "name": "inQueue",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1486,
    "kind": "member",
    "name": "_mostUrgentTransitionPriority",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_mostUrgentTransitionPriority",
    "access": "private",
    "description": null,
    "lineNumber": 501,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1488,
    "kind": "method",
    "name": "applyDecoratorObjectToRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#applyDecoratorObjectToRenderable",
    "access": "public",
    "description": null,
    "lineNumber": 511,
    "undocument": true,
    "params": [
      {
        "name": "renderableName",
        "types": [
          "*"
        ]
      },
      {
        "name": "decorations",
        "types": [
          "*"
        ]
      },
      {
        "name": "inQueue",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1489,
    "kind": "method",
    "name": "applyDecoratorFunctionsToRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#applyDecoratorFunctionsToRenderable",
    "access": "public",
    "description": null,
    "lineNumber": 575,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "decorators",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1490,
    "kind": "method",
    "name": "replaceRenderable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#replaceRenderable",
    "access": "public",
    "description": "Replaces one renderable with the other, making sure that the decorators stay consistent",
    "lineNumber": 589,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "oldRenderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newRenderable",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "newRenderableName",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1491,
    "kind": "method",
    "name": "setRenderableFlowState",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#setRenderableFlowState",
    "access": "public",
    "description": null,
    "lineNumber": 613,
    "undocument": true,
    "params": [
      {
        "name": "renderableName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "stateName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1492,
    "kind": "method",
    "name": "setViewFlowState",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#setViewFlowState",
    "access": "public",
    "description": null,
    "lineNumber": 655,
    "undocument": true,
    "params": [
      {
        "name": "stateName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      },
      {
        "name": "flowOptions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1493,
    "kind": "method",
    "name": "generateWaitQueueFromViewStateStep",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#generateWaitQueueFromViewStateStep",
    "access": "public",
    "description": null,
    "lineNumber": 683,
    "undocument": true,
    "params": [
      {
        "name": "step",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1494,
    "kind": "method",
    "name": "getRenderableFlowState",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#getRenderableFlowState",
    "access": "public",
    "description": null,
    "lineNumber": 692,
    "undocument": true,
    "params": [
      {
        "name": "renderableName",
        "optional": true,
        "types": [
          "string"
        ],
        "defaultRaw": "",
        "defaultValue": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1495,
    "kind": "method",
    "name": "getViewFlowState",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#getViewFlowState",
    "access": "public",
    "description": null,
    "lineNumber": 701,
    "undocument": true,
    "params": [
      {
        "name": "flowOptions",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1496,
    "kind": "method",
    "name": "_initSwipable",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_initSwipable",
    "access": "private",
    "description": "Create the swipable and register all the event logic for a swipable renderable",
    "lineNumber": 709,
    "params": [
      {
        "name": "swipableOptions",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "renderable",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1497,
    "kind": "method",
    "name": "_determineSwipeEvents",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_determineSwipeEvents",
    "access": "private",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "swipableOptions",
        "optional": true,
        "types": [
          "{}"
        ],
        "defaultRaw": {},
        "defaultValue": "{}"
      },
      {
        "name": "endX",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "endY",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 1498,
    "kind": "method",
    "name": "prioritiseDockBefore",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#prioritiseDockBefore",
    "access": "public",
    "description": "Rearranges the order in which docked renderables are parsed for rendering, ensuring that 'renderableName' is processed\nbefore 'nextRenderableName'.",
    "lineNumber": 807,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "nextRenderableName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1499,
    "kind": "method",
    "name": "prioritiseDockAfter",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#prioritiseDockAfter",
    "access": "public",
    "description": "",
    "lineNumber": 825,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "prevRenderableName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1500,
    "kind": "method",
    "name": "_prioritiseDockAtIndex",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_prioritiseDockAtIndex",
    "access": "private",
    "description": "Helper function used by prioritiseDockBefore and prioritiseDockAfter to change order of docked renderables",
    "lineNumber": 846,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1501,
    "kind": "method",
    "name": "applyDirectDecoratorsFromRenderablePrototype",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#applyDirectDecoratorsFromRenderablePrototype",
    "access": "public",
    "description": null,
    "lineNumber": 861,
    "undocument": true,
    "params": [
      {
        "name": "decorations",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderablePrototype",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1502,
    "kind": "method",
    "name": "waitForRenderableTransition",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#waitForRenderableTransition",
    "access": "public",
    "description": null,
    "lineNumber": 868,
    "undocument": true,
    "params": [
      {
        "name": "renderableID",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1503,
    "kind": "method",
    "name": "cancelRenderableTransition",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#cancelRenderableTransition",
    "access": "public",
    "description": null,
    "lineNumber": 878,
    "undocument": true,
    "params": [
      {
        "name": "renderableID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1504,
    "kind": "method",
    "name": "completeRenderableTransition",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#completeRenderableTransition",
    "access": "public",
    "description": null,
    "lineNumber": 882,
    "undocument": true,
    "params": [
      {
        "name": "renderableID",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1505,
    "kind": "method",
    "name": "_terminateRenderableTransition",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_terminateRenderableTransition",
    "access": "private",
    "description": null,
    "lineNumber": 886,
    "undocument": true,
    "params": [
      {
        "name": "renderableID",
        "types": [
          "*"
        ]
      },
      {
        "name": "wasSuccessful",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1506,
    "kind": "method",
    "name": "_determineMostUrgentTransitionPriority",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#_determineMostUrgentTransitionPriority",
    "access": "private",
    "description": null,
    "lineNumber": 898,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1508,
    "kind": "method",
    "name": "flushTransitions",
    "memberof": "src/utils/view/RenderableHelper.js~RenderableHelper",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/RenderableHelper.js~RenderableHelper#flushTransitions",
    "access": "public",
    "description": null,
    "lineNumber": 911,
    "undocument": true,
    "params": [
      {
        "name": "context",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1511,
    "kind": "file",
    "name": "src/utils/view/SizeResolver.js",
    "content": "/**\n * Created by lundfall on 01/09/16.\n */\n\nimport EventEmitter                 from 'eventemitter3';\nimport browser                      from 'bowser';\n\nimport _unescape                    from 'lodash/unescape.js';\nimport LayoutUtility                from 'famous-flex/LayoutUtility.js';\nimport Engine                       from 'famous/core/Engine.js';\nimport Timer                        from 'famous/utilities/Timer.js';\nimport {limit}                      from 'arva-js/utils/Limiter.js';\n\nimport ImageSurface                 from 'famous/surfaces/ImageSurface.js';\nimport AnimationController          from 'famous-flex/AnimationController.js';\n\nimport {View}                       from '../../core/View.js';\nimport {Utils}                      from './Utils.js';\n\nimport ElementOutput                from 'famous/core/ElementOutput';\n\nlet isWebKit = browser.check('webkit');\n\n/**\n * Used by the view to keep track of sizes. Emits events to communicate with the view to do certain actions\n */\nexport class SizeResolver extends EventEmitter {\n\n    constructor() {\n        super();\n        this._resolvedSizesCache = new Map();\n        this._sizeIsFinalFor = new Map();\n        this._sizeIsResolvedFor = new Map();\n        this._trueSizedSurfaceInfo = new Map();\n    }\n\n    /**\n     *\n     *\n     * Determines the decorated size. If there is true sizing involved, then it will not return the resolved true size.\n     * Instead, this can be accessed through getResolvedSize()\n     * @param {Renderable} renderable. The renderable for which we need the size\n     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).\n     * @param {Object} context. The context, with a specified size. The size can be set to NaN in order to return NaN\n     * @param {Array} specifiedSize. The size to use which is specified as a decorator\n     * @returns {*}\n     */\n    settleDecoratedSize(renderable, renderableCounterpart, context, specifiedSize = [undefined, undefined]) {\n        let size = specifiedSize.map((size, dimension) => this.resolveSingleSize(size, context.size, dimension));\n        let cacheResolvedSize = [];\n        for (let dimension = 0; dimension < 2; dimension++) {\n            if (this.isValueTrueSized(size[dimension])) {\n                cacheResolvedSize[dimension] = this._resolveSingleTrueSizedRenderable(renderable, size, dimension, renderableCounterpart, specifiedSize, context.size);\n                if (Utils.renderableIsSurface(renderable)) {\n                    size[dimension] = true;\n                } else {\n                    size[dimension] = cacheResolvedSize[dimension];\n                }\n            } else {\n                size[dimension] = size[dimension] === undefined ? (context.size[dimension] || size[dimension]) : size[dimension];\n                cacheResolvedSize[dimension] = size[dimension];\n            }\n        }\n\n        this._resolvedSizesCache.set(renderable, [cacheResolvedSize[0], cacheResolvedSize[1]]);\n\n        return (size[0] !== null && size[1] !== null) ? size : null;\n    }\n\n    /**\n     * Resolves a single dimension (i.e. x or y) size of a renderable.\n     * @param {Number|Boolean|Object|Undefined|Function} renderableSize Renderable's single dimension size.\n     * @param {Array.Number} contextSize The context size\n     * @param {Number} dimension The dimension of the size that is being evaluated (e.g. 1 or 0)\n     * @returns {Number} The resulting size\n     * @private\n     */\n    resolveSingleSize(renderableSize, contextSize, dimension) {\n        switch (typeof renderableSize) {\n            case 'function':\n                return this.resolveSingleSize(renderableSize(...contextSize), contextSize, dimension);\n            case 'number':\n                /* If 0 < renderableSize < 1, we interpret renderableSize as a fraction of the contextSize */\n                return renderableSize < 1 && renderableSize > 0 ? renderableSize * Math.max(contextSize[dimension], 0) : renderableSize;\n            default:\n                /* renderableSize can be true, undefined, or something unkown. */\n                return renderableSize;\n        }\n    }\n\n    /**\n     * Resolves a true size to an actual size of a truesized renderable. size[dim] must be negative or true.\n     * @param {Renderable} renderable the renderable\n     * @param {Array} size the size as specified\n     * @param dim the dimensions e.g. 0,1 that should be processed\n     * @param {Renderable} renderableCounterpart. The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface).\n     * @param {Array} specifiedSize The size as specified\n     * @returns {Number} size[dim] will be returned with a non-truesized value\n     * @private\n     */\n    _resolveSingleTrueSizedRenderable(renderable, size, dim, renderableCounterpart, specifiedSize, contextSize) {\n        if (size[dim] === -1) {\n            Utils.warn('-1 detected as set size. If you want a true sized element to take ' +\n                'up a proportion of your view, please define a function doing so by ' +\n                'using the context size');\n        }\n        /* If there is an AnimationController without content, display 0 size */\n        if (renderableCounterpart instanceof AnimationController && !renderableCounterpart._showingRenderable) {\n            return 0;\n        }\n        /* True sized element. This has been specified as ~100 where 100 is the initial size\n         * applying this operator again (e.g. ~~100) gives us the value 100 back\n         * */\n        if (Utils.renderableIsComposite(renderable)) {\n            let twoDimensionalSize = renderable.getSize();\n            if (!twoDimensionalSize) {\n                return this._specifyUndeterminedSingleHeight(renderable, size, dim);\n            } else {\n                let renderableIsView = renderable instanceof View;\n                /* If the renderable isn't displaying, we must simply consider it final.\n                 TODO: There might be better ways to reason about non-displaying renderables  */\n                let sizeConsideredFinal = !(renderableIsView && renderable.layout.isDisplaying()) ||\n                    ((renderableIsView && (renderable._initialised && !renderable.containsUncalculatedSurfaces())) || !renderableIsView);\n                if (size[dim] === true && twoDimensionalSize[dim] === undefined && sizeConsideredFinal) {\n                    Utils.warn(`True sized renderable '${renderable.constructor.name}' is taking up the entire context size.`);\n                    return contextSize[dim];\n                } else {\n                    let approximatedSize = size[dim] === true ? twoDimensionalSize[dim] : ~size[dim];\n                    let resultingSize = twoDimensionalSize[dim] !== undefined ? twoDimensionalSize[dim] : approximatedSize;\n                    if (renderableIsView) {\n                        resultingSize = sizeConsideredFinal ? resultingSize : approximatedSize;\n                    }\n                    this._sizeIsFinalFor.set(renderable, sizeConsideredFinal);\n                    return resultingSize;\n                }\n            }\n        } else if (Utils.renderableIsSurface(renderable)) {\n            let trueSizedSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable);\n\n            if (!trueSizedSurfaceInfo) {\n                /* Seems like the surface isn't properly configured, let's get that going */\n                trueSizedSurfaceInfo = this.configureTrueSizedSurface(renderable, specifiedSize);\n            }\n            let { isUncalculated, trueSizedDimensions } = trueSizedSurfaceInfo;\n\n            this._sizeIsFinalFor.set(renderable, !isUncalculated);\n\n            if (isUncalculated === false && trueSizedDimensions[dim]) {\n                return trueSizedSurfaceInfo.size[dim];\n            }\n\n            if (!trueSizedDimensions[dim]) {\n                trueSizedDimensions[dim] = true;\n                this._evaluateTrueSizedSurface(renderable);\n            }\n\n            if (size[dim] === true) {\n                /* If size is set to true, and it can't be resolved, then settle with size undefined*/\n                size[dim] = undefined;\n            }\n            let fallbackSize = ~size[dim];\n\n            let approximatedSize = size[dim] === undefined ? (contextSize[dim] || fallbackSize) : fallbackSize\n            /* Return an approximated size, if possible */\n            return (trueSizedSurfaceInfo.size[dim] || approximatedSize);\n        } else {\n            this._sizeIsFinalFor.set(renderable, true);\n            return this._specifyUndeterminedSingleHeight(renderable, size, dim);\n        }\n    }\n\n    async invalidateFontForBrowserBugFix(font) {\n        let dummyContext = Engine.getCachedCanvas().getContext(\"2d\");\n        dummyContext.font = font;\n        dummyContext.measureText('A');\n        await new Promise((resolve) => Timer.after(resolve, 1));\n\n    }\n\n    _measureRenderableWidth(surface, text = surface.getContent()) {\n        /* The canvas API is too unreliable for now */\n        if (true) {\n            return;\n        }\n        let surfaceProperties = surface.getProperties();\n        let {\n            fontStyle = 'normal',\n            fontSize = 'medium',\n            fontWeight = 'normal',\n            fontVariant = 'normal',\n            lineHeight = 'normal',\n            fontFamily,\n            letterSpacing = '0px',\n            font\n        } = surfaceProperties;\n        if (!font && fontFamily) {\n            font = `${fontStyle} ${fontVariant} ${fontWeight} ${fontSize}/${lineHeight} \"${fontFamily}\"`;\n        }\n        if (!font) return;\n\n\n        let context = Engine.getCachedCanvas().getContext(\"2d\");\n\n        if (font) {\n            context.font = font;\n        }\n\n\n        let [paddingTop, paddingRight, paddingBottom, paddingLeft] = this._getParsedPadding(surfaceProperties);\n        let content = _unescape(text);\n        context.measureText(content);\n        let textWidth = context.measureText(content).width + content.length * this._cssValueToPixels(letterSpacing, undefined);\n        let resultingWidth = this._cssValueToPixels(paddingLeft, textWidth) + textWidth + this._cssValueToPixels(paddingRight, textWidth);\n        /* Mozilla Firefox appreciates the values rounded upwards */\n        return Math.ceil(resultingWidth);\n    }\n\n    _getParsedPadding(properties) {\n        let {\n            padding,\n            paddingRight = '0px',\n            paddingLeft = '0px',\n            paddingTop = '0px',\n            paddingBottom = '0px'\n        } = properties;\n        if (padding) {\n            [paddingTop, paddingRight, paddingBottom, paddingLeft] = LayoutUtility.normalizeMargins(padding.split(\" \"));\n        }\n        return [paddingTop, paddingRight, paddingBottom, paddingLeft];\n    }\n\n    _estimateRenderableHeight(surface) {\n        let surfaceProperties = surface.getProperties();\n        let { fontSize, lineHeight } = surface.getProperties();\n        if (!fontSize) {\n            return NaN;\n        }\n        let [paddingTop, paddingRight, paddingBottom, paddingLeft] = this._getParsedPadding(surfaceProperties);\n        /* If using a percentage in font, it refers to 16px */\n        let estimatedHeight;\n        if (!surface.getContent()) {\n            estimatedHeight = 0;\n        } else {\n            estimatedHeight = this._cssValueToPixels(fontSize, 16);\n        }\n        if (lineHeight) {\n            estimatedHeight = this._cssValueToPixels(lineHeight, estimatedHeight);\n        }\n        return this._cssValueToPixels(paddingTop, estimatedHeight) + estimatedHeight + this._cssValueToPixels(paddingBottom, estimatedHeight);\n    }\n\n    _cssValueToPixels(value = NaN, parentSize = NaN) {\n        if (value.endsWith('px')) {\n            return parseFloat(value);\n        }\n        /* Pixels are points times 1 and a third */\n        if (value.endsWith('pt')) {\n            return parseFloat(value) * (1 + 1 / 3);\n        }\n        if (value === 'normal') {\n            return parentSize;\n        }\n\n        if (value.endsWith('%')) {\n            return (parseFloat(value) / 100) * parentSize;\n        }\n        //value ends with number, assume proportion\n        return parseFloat(value) * parentSize;\n    }\n\n    /**\n     * Determines whether the size is considered final or not, and may affect whether the rendering will take place or\n     * not\n     * @param {Renderable} renderable\n     * @returns {Boolean} sizeIsFinal\n     */\n    isSizeFinal(renderable) {\n        let consideredFinal = this._sizeIsFinalFor.get(renderable) || this._sizeIsResolvedFor.get(renderable);\n\n        /* Return true if nothing is known, to be sure not to make false negatives */\n        if (consideredFinal === undefined) {\n            consideredFinal = true;\n        }\n        /* If the size has been considered final once, we should mark the renderable as being final forever */\n        if(consideredFinal === true){\n            this._sizeIsResolvedFor.set(renderable, true);\n        }\n        return consideredFinal;\n    }\n\n    /**\n     * Determines if the value is true sized\n     * @param {*} value\n     * @returns {boolean} True if the value is true sized\n     * @private\n     */\n    isValueTrueSized(value) {\n        return value < 0 || value === true\n    }\n\n\n    _specifyUndeterminedSingleHeight(renderable, size, dim) {\n        let resultingSize = size[dim] < 0 ? ~size[dim] : 5;\n        Utils.warn(`Cannot determine size of ${renderable.constructor.name}, falling back to default size or ${resultingSize}px. If the renderable is using legacy declaration this.renderables = ... this isn't supported for true sizing.`);\n        return resultingSize;\n    }\n\n    containsUncalculatedSurfaces() {\n        for (let [surface, { isUncalculated }] of this._trueSizedSurfaceInfo) {\n            if (isUncalculated) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Calculates a surface size, if possible\n     * @param renderable\n     * @returns Boolean True if the surface could be calculated\n     * @private\n     */\n    _tryCalculateTrueSizedSurface(renderable) {\n        let renderableHtmlElement = renderable._element;\n        if (!renderableHtmlElement) return false;\n        let trueSizedInfo = this._trueSizedSurfaceInfo.get(renderable);\n        let { trueSizedDimensions } = trueSizedInfo;\n\n        /* HTML treats white space as nothing at all, so we need to be sure that \"  \" == \"\" */\n        let trimmedContent = (renderable.getContent() && renderable.getContent().trim) ? renderable.getContent().trim() : renderable.getContent();\n\n        if (renderableHtmlElement &&\n            ((\n                    renderableHtmlElement.offsetWidth && renderableHtmlElement.offsetHeight\n                ) ||\n                (!trimmedContent && !(renderable instanceof ImageSurface))\n            ) &&\n            /* If the content is dirty, that means that the content is about to change, so we shouldn't resolve the size */\n            !renderable._contentDirty &&\n            (!renderableHtmlElement.style.width || !trueSizedDimensions[0]) && (!renderableHtmlElement.style.height || !trueSizedDimensions[1])) {\n            let newSize;\n\n\n            newSize = [renderableHtmlElement.offsetWidth, renderableHtmlElement.offsetHeight];\n\n            let oldSize = trueSizedInfo.size;\n            let sizeChange = false;\n            if (oldSize) {\n                for (let i = 0; i < 2; i++) {\n                    if (trueSizedDimensions[i] && oldSize[i] !== newSize[i]) {\n                        sizeChange = true;\n                    }\n                }\n            } else {\n                sizeChange = true;\n            }\n\n            if (sizeChange) {\n                trueSizedInfo.size = newSize;\n                trueSizedInfo.isUncalculated = false;\n                this.requestRecursiveReflow();\n            }\n\n            return true;\n        } else {\n            this.requestReflow();\n            this.requestLayoutControllerReflow();\n            return false;\n        }\n    }\n\n    requestRecursiveReflow() {\n        this.emit('reflowRecursively');\n    }\n\n    requestReflow() {\n        this.emit('reflow');\n    }\n\n    requestLayoutControllerReflow() {\n        this.emit('layoutControllerReflow');\n    }\n\n    /**\n     * Sets up a true sized surface\n     * @param renderable\n     * @returns {{isUncalculated: boolean, trueSizedDimensions: boolean[], name: *}} an entry in this._trueSizedSurfaceInfo\n     * @private\n     */\n    configureTrueSizedSurface(renderable, specifiedSize) {\n        let trueSizedDimensions = specifiedSize.map((singleSize) => this.isValueTrueSized(singleSize));\n        let trueSizedSurfaceInfo = {\n            isUncalculated: true,\n            trueSizedDimensions,\n            size: [undefined, undefined],\n            specifiedSize\n        };\n\n        /* We assume both dimensions not to be truesized, they are set in this._resolveDecoratedSize */\n        this._trueSizedSurfaceInfo.set(renderable, trueSizedSurfaceInfo);\n\n\n        this._evaluateTrueSizedSurface(renderable);\n\n        return trueSizedSurfaceInfo;\n    }\n\n    /**\n     * Investigates the surfaces to see in which way the size should be estimated.\n     *\n     * Currently disabled due to browser and font difficulties\n     * @param renderable\n     * @returns {*}\n     * @private\n     */\n    async _evaluateTrueSizedSurface(renderable) {\n        //TODO Re-enable the canvas sizing once its been stabilizied\n        return this._setupSurfaceGetsSizeFromDOM(renderable);\n\n        let trueSizedSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable);\n\n\n        if (renderable instanceof ImageSurface) {\n            return this._setupSurfaceGetsSizeFromDOM(renderable);\n        }\n\n        let [widthExplicitlySet, heightExplicitlySet] = this._determineDimensionsExplicitlySet(renderable);\n\n        if (widthExplicitlySet && heightExplicitlySet) {\n            trueSizedSurfaceInfo.size = [...renderable.size];\n            return;\n        }\n\n        if (!widthExplicitlySet && this._doesBrowserNeedBugFixForSurface(renderable)) {\n            this._patchCanvasBug(renderable);\n            Timer.after(() => {\n                this._calculateTrueSizedSurfaceFromCanvas(renderable);\n                this.requestRecursiveReflow();\n            }, 1);\n            return;\n        }\n\n        this._calculateTrueSizedSurfaceFromCanvas(renderable);\n    }\n\n    /**\n     * Sets up that the surface should estimate its own size by querying the DOM (the less performant option)\n     * @param renderable\n     * @private\n     */\n    _setupSurfaceGetsSizeFromDOM(renderable) {\n\n\n        let trueSizeSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable);\n        let { resizeFromCanvasListener, deployFromCanvasListener, trueSizedDimensions } = trueSizeSurfaceInfo;\n\n        /* Need to set the Surface 'size' property in order to get resize notifications */\n        renderable.setSize(trueSizedDimensions.map((isTrueSized) => isTrueSized || undefined));\n\n        if (resizeFromCanvasListener) {\n            renderable.removeListener('resize', resizeFromCanvasListener);\n        }\n        if (deployFromCanvasListener) {\n            renderable.removeListener('deploy', deployFromCanvasListener);\n        }\n        if (!trueSizeSurfaceInfo.resizeFromDOMListener) {\n            let resizeListener = trueSizeSurfaceInfo.resizeFromDOMListener = () => {\n                this._tryCalculateTrueSizedSurface(renderable);\n                /* Because the resize is triggered before the DOM manipulations happened, also\n                 *  try to calculate the surface after 1 more tick */\n                Timer.after(() => this._tryCalculateTrueSizedSurface(renderable), 1);\n            };\n            renderable.on('resize', resizeListener);\n        }\n        if (!trueSizeSurfaceInfo.deployFromDOMListener) {\n            let deployListener = trueSizeSurfaceInfo.deployFromDOMListener = () => {\n                if (!trueSizeSurfaceInfo.isUncalculated) {\n                    this._tryCalculateTrueSizedSurface(renderable);\n                }\n            };\n            renderable.on('deploy', deployListener);\n        }\n    }\n\n    /**\n     * Sets up that we should estimate the size of the renderable based on the canvas API\n     * @param renderable\n     * @private\n     */\n    _setupSurfaceGetsSizeFromCanvas(renderable) {\n        let trueSizeSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable);\n        renderable.setSize(trueSizeSurfaceInfo.size);\n        let { resizeFromDOMListener, deployFromDOMListener } = trueSizeSurfaceInfo;\n        if (resizeFromDOMListener) {\n            renderable.removeListener('resize', resizeFromDOMListener);\n        }\n        if (deployFromDOMListener) {\n            renderable.removeListener('deploy', deployFromDOMListener);\n        }\n        if (!trueSizeSurfaceInfo.resizeFromCanvasListener) {\n            let resizeListener = trueSizeSurfaceInfo.resizeFromCanvasListener = () => {\n                this._evaluateTrueSizedSurface(renderable);\n                this.requestReflow();\n            };\n            renderable.on('resize', resizeListener);\n        }\n        if (!trueSizeSurfaceInfo.deployFromCanvasListener) {\n            let deployListener = trueSizeSurfaceInfo.deployFromCanvasListener = () => {\n                if (!trueSizeSurfaceInfo.isUncalculated) {\n                    /* Reset size. If not reset, it will be interpreted as being explicitly set\n                     *  in evaluateTrueSizedSurface */\n                    renderable.setSize(null);\n                    this._evaluateTrueSizedSurface(renderable);\n                    this.requestReflow();\n                }\n            };\n            renderable.on('deploy', deployListener);\n        }\n\n    }\n\n    /**\n     * Gets the size used when displaying a renderable on the screen the last time the calculation was done.\n     * @param {Renderable/Name} renderableOrName The renderable or the name of the renderable of which you need the size\n     */\n    getResolvedSize(renderable) {\n        return this._resolvedSizesCache.get(renderable);\n    }\n\n    doTrueSizedBookkeeping() {\n        for (let [surface] of this._trueSizedSurfaceInfo) {\n            /* Encourage the surfaces to check if they have been resized, which could trigger the resize event */\n            surface._trueSizeCheck = true;\n        }\n    }\n\n    getSurfaceTrueSizedInfo(surface) {\n        return this._trueSizedSurfaceInfo.get(surface);\n    }\n\n    /**\n     * For Chrome and Safari, the canvas API doesn't return the correct value when font is loaded\n     * @param renderable\n     * @returns {Promise.<void>}\n     * @private\n     */\n    async _patchCanvasBug(renderable) {\n        let fontFamily = this._getFontFamilyFromSurface(renderable);\n        await this.invalidateFontForBrowserBugFix(fontFamily);\n        SizeResolver._invalidatedFonts[fontFamily] = true;\n\n    }\n\n    _doesBrowserNeedBugFixForSurface(surface) {\n        if (!isWebKit) {\n            return false;\n        }\n        if (!SizeResolver._invalidatedFonts) {\n            SizeResolver._invalidatedFonts = {};\n        }\n\n        let fontFamily = this._getFontFamilyFromSurface(surface);\n\n        if (!fontFamily) {\n            return true;\n        }\n\n        return !SizeResolver._invalidatedFonts[fontFamily];\n    }\n\n    _getFontFamilyFromSurface(surface) {\n        let properties = surface.getProperties();\n        let { fontFamily, font } = properties;\n        if (!fontFamily) {\n            if (!font) {\n                return;\n            }\n            let fontMatch = /\"(.*)\"$/g.exec(font);\n            if (fontMatch[1]) {\n                fontFamily = fontMatch[1];\n            } else {\n                fontFamily = font.split(' ').slice(-1)[0];\n            }\n        }\n        return fontFamily;\n    }\n\n    _calculateTrueSizedSurfaceFromCanvas(renderable) {\n        let trueSizedSurfaceInfo = this._trueSizedSurfaceInfo.get(renderable);\n        let { trueSizedDimensions, specifiedSize } = trueSizedSurfaceInfo;\n        let [widthExplicitlySet, heightExplicitlySet] = this._determineDimensionsExplicitlySet(renderable);\n\n        let estimatedWidth = widthExplicitlySet ?\n            renderable.size[0] :\n            this._measureRenderableWidth(renderable);\n\n\n        let height = null, width = null;\n\n        if (trueSizedDimensions[0]) {\n            width = trueSizedSurfaceInfo.size[0] = estimatedWidth;\n        }\n\n        if (trueSizedDimensions[1]) {\n            if (!trueSizedDimensions[0]) {\n                let resolvedSpecifiedWidth = this.resolveSingleSize(specifiedSize[0], { size: [NaN, NaN] }, 0);\n                if (!resolvedSpecifiedWidth || resolvedSpecifiedWidth < estimatedWidth) {\n                    return this._setupSurfaceGetsSizeFromDOM(renderable);\n                }\n            }\n            if (heightExplicitlySet && !renderable.size) {\n                return this._setupSurfaceGetsSizeFromDOM(renderable);\n            }\n            height = trueSizedSurfaceInfo.size[1] =\n                heightExplicitlySet ?\n                    renderable.size[1]\n                    : this._estimateRenderableHeight(renderable);\n        }\n\n        for (let singleSize of [width, height]) {\n            if (singleSize === undefined || Number.isNaN(singleSize)) {\n                return this._setupSurfaceGetsSizeFromDOM(renderable);\n            }\n        }\n\n        /* If we reached this far, then everything could succesfully be calculated */\n        trueSizedSurfaceInfo.isUncalculated = false;\n        /* Keep listening for further changes, if necessary */\n        this._setupSurfaceGetsSizeFromCanvas(renderable);\n    }\n\n    _determineDimensionsExplicitlySet(surface) {\n        return [surface.size && typeof surface.size[0] === 'number',\n            surface.size && typeof surface.size[1] === 'number'];\n    }\n}",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/SizeResolver.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1512,
    "kind": "variable",
    "name": "isWebKit",
    "memberof": "src/utils/view/SizeResolver.js",
    "static": true,
    "longname": "src/utils/view/SizeResolver.js~isWebKit",
    "access": "public",
    "export": false,
    "importPath": "arva-js/src/utils/view/SizeResolver.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1513,
    "kind": "class",
    "name": "SizeResolver",
    "memberof": "src/utils/view/SizeResolver.js",
    "static": true,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/SizeResolver.js",
    "importStyle": "{SizeResolver}",
    "description": "Used by the view to keep track of sizes. Emits events to communicate with the view to do certain actions",
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "eventemitter3~EventEmitter"
    ]
  },
  {
    "__docId__": 1514,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true
  },
  {
    "__docId__": 1515,
    "kind": "member",
    "name": "_resolvedSizesCache",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_resolvedSizesCache",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1516,
    "kind": "member",
    "name": "_sizeIsFinalFor",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_sizeIsFinalFor",
    "access": "private",
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1517,
    "kind": "member",
    "name": "_sizeIsResolvedFor",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_sizeIsResolvedFor",
    "access": "private",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1518,
    "kind": "member",
    "name": "_trueSizedSurfaceInfo",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_trueSizedSurfaceInfo",
    "access": "private",
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1519,
    "kind": "method",
    "name": "settleDecoratedSize",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#settleDecoratedSize",
    "access": "public",
    "description": "\n\nDetermines the decorated size. If there is true sizing involved, then it will not return the resolved true size.\nInstead, this can be accessed through getResolvedSize()",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable.",
        "description": "The renderable for which we need the size"
      },
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableCounterpart.",
        "description": "The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context.",
        "description": "The context, with a specified size. The size can be set to NaN in order to return NaN"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "specifiedSize.",
        "description": "The size to use which is specified as a decorator"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1520,
    "kind": "method",
    "name": "resolveSingleSize",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#resolveSingleSize",
    "access": "private",
    "description": "Resolves a single dimension (i.e. x or y) size of a renderable.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} The resulting size"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          "Boolean",
          "Object",
          "Undefined",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableSize",
        "description": "Renderable's single dimension size."
      },
      {
        "nullable": null,
        "types": [
          "Array.Number"
        ],
        "spread": false,
        "optional": false,
        "name": "contextSize",
        "description": "The context size"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "dimension",
        "description": "The dimension of the size that is being evaluated (e.g. 1 or 0)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "The resulting size"
    }
  },
  {
    "__docId__": 1521,
    "kind": "method",
    "name": "_resolveSingleTrueSizedRenderable",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_resolveSingleTrueSizedRenderable",
    "access": "private",
    "description": "Resolves a true size to an actual size of a truesized renderable. size[dim] must be negative or true.",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} size[dim] will be returned with a non-truesized value"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": "the renderable"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "the size as specified"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dim",
        "description": "the dimensions e.g. 0,1 that should be processed"
      },
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableCounterpart.",
        "description": "The renderable counter-part (e.g. AnimationController, RenderNode, or ContainerSurface)."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "specifiedSize",
        "description": "The size as specified"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "size[dim] will be returned with a non-truesized value"
    }
  },
  {
    "__docId__": 1522,
    "kind": "method",
    "name": "invalidateFontForBrowserBugFix",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#invalidateFontForBrowserBugFix",
    "access": "public",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "params": [
      {
        "name": "font",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1523,
    "kind": "method",
    "name": "_measureRenderableWidth",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_measureRenderableWidth",
    "access": "private",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "params": [
      {
        "name": "surface",
        "types": [
          "*"
        ]
      },
      {
        "name": "text",
        "optional": true,
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1524,
    "kind": "method",
    "name": "_getParsedPadding",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_getParsedPadding",
    "access": "private",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "params": [
      {
        "name": "properties",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1525,
    "kind": "method",
    "name": "_estimateRenderableHeight",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_estimateRenderableHeight",
    "access": "private",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "params": [
      {
        "name": "surface",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1526,
    "kind": "method",
    "name": "_cssValueToPixels",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_cssValueToPixels",
    "access": "private",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "NaN",
        "defaultValue": "NaN"
      },
      {
        "name": "parentSize",
        "optional": true,
        "types": [
          "*"
        ],
        "defaultRaw": "NaN",
        "defaultValue": "NaN"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1527,
    "kind": "method",
    "name": "isSizeFinal",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#isSizeFinal",
    "access": "public",
    "description": "Determines whether the size is considered final or not, and may affect whether the rendering will take place or\nnot",
    "lineNumber": 277,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} sizeIsFinal"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "sizeIsFinal"
    }
  },
  {
    "__docId__": 1528,
    "kind": "method",
    "name": "isValueTrueSized",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#isValueTrueSized",
    "access": "private",
    "description": "Determines if the value is true sized",
    "lineNumber": 297,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the value is true sized"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the value is true sized"
    }
  },
  {
    "__docId__": 1529,
    "kind": "method",
    "name": "_specifyUndeterminedSingleHeight",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_specifyUndeterminedSingleHeight",
    "access": "private",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      },
      {
        "name": "size",
        "types": [
          "*"
        ]
      },
      {
        "name": "dim",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1530,
    "kind": "method",
    "name": "containsUncalculatedSurfaces",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#containsUncalculatedSurfaces",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1531,
    "kind": "method",
    "name": "_tryCalculateTrueSizedSurface",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_tryCalculateTrueSizedSurface",
    "access": "private",
    "description": "Calculates a surface size, if possible",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "Boolean True if the surface could be calculated"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Boolean True if the surface could be calculated"
    }
  },
  {
    "__docId__": 1532,
    "kind": "method",
    "name": "requestRecursiveReflow",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#requestRecursiveReflow",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1533,
    "kind": "method",
    "name": "requestReflow",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#requestReflow",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1534,
    "kind": "method",
    "name": "requestLayoutControllerReflow",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#requestLayoutControllerReflow",
    "access": "public",
    "description": null,
    "lineNumber": 380,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1535,
    "kind": "method",
    "name": "configureTrueSizedSurface",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#configureTrueSizedSurface",
    "access": "private",
    "description": "Sets up a true sized surface",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{isUncalculated: boolean, trueSizedDimensions: boolean[], name: *}} an entry in this._trueSizedSurfaceInfo"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{isUncalculated: boolean, trueSizedDimensions: boolean[], name: *}"
      ],
      "spread": false,
      "description": "an entry in this._trueSizedSurfaceInfo"
    }
  },
  {
    "__docId__": 1536,
    "kind": "method",
    "name": "_evaluateTrueSizedSurface",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_evaluateTrueSizedSurface",
    "access": "private",
    "description": "Investigates the surfaces to see in which way the size should be estimated.\n\nCurrently disabled due to browser and font difficulties",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1537,
    "kind": "method",
    "name": "_setupSurfaceGetsSizeFromDOM",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_setupSurfaceGetsSizeFromDOM",
    "access": "private",
    "description": "Sets up that the surface should estimate its own size by querying the DOM (the less performant option)",
    "lineNumber": 451,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1538,
    "kind": "method",
    "name": "_setupSurfaceGetsSizeFromCanvas",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_setupSurfaceGetsSizeFromCanvas",
    "access": "private",
    "description": "Sets up that we should estimate the size of the renderable based on the canvas API",
    "lineNumber": 490,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1539,
    "kind": "method",
    "name": "getResolvedSize",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#getResolvedSize",
    "access": "public",
    "description": "Gets the size used when displaying a renderable on the screen the last time the calculation was done.",
    "lineNumber": 526,
    "params": [
      {
        "nullable": null,
        "types": [
          "Renderable/Name"
        ],
        "spread": false,
        "optional": false,
        "name": "renderableOrName",
        "description": "The renderable or the name of the renderable of which you need the size"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1540,
    "kind": "method",
    "name": "doTrueSizedBookkeeping",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#doTrueSizedBookkeeping",
    "access": "public",
    "description": null,
    "lineNumber": 530,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1541,
    "kind": "method",
    "name": "getSurfaceTrueSizedInfo",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#getSurfaceTrueSizedInfo",
    "access": "public",
    "description": null,
    "lineNumber": 537,
    "undocument": true,
    "params": [
      {
        "name": "surface",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1542,
    "kind": "method",
    "name": "_patchCanvasBug",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_patchCanvasBug",
    "access": "private",
    "description": "For Chrome and Safari, the canvas API doesn't return the correct value when font is loaded",
    "lineNumber": 547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<void>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<void>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1543,
    "kind": "method",
    "name": "_doesBrowserNeedBugFixForSurface",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_doesBrowserNeedBugFixForSurface",
    "access": "private",
    "description": null,
    "lineNumber": 554,
    "undocument": true,
    "params": [
      {
        "name": "surface",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1544,
    "kind": "method",
    "name": "_getFontFamilyFromSurface",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_getFontFamilyFromSurface",
    "access": "private",
    "description": null,
    "lineNumber": 571,
    "undocument": true,
    "params": [
      {
        "name": "surface",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1545,
    "kind": "method",
    "name": "_calculateTrueSizedSurfaceFromCanvas",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_calculateTrueSizedSurfaceFromCanvas",
    "access": "private",
    "description": null,
    "lineNumber": 588,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1546,
    "kind": "method",
    "name": "_determineDimensionsExplicitlySet",
    "memberof": "src/utils/view/SizeResolver.js~SizeResolver",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/view/SizeResolver.js~SizeResolver#_determineDimensionsExplicitlySet",
    "access": "private",
    "description": null,
    "lineNumber": 632,
    "undocument": true,
    "params": [
      {
        "name": "surface",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1547,
    "kind": "file",
    "name": "src/utils/view/Utils.js",
    "content": "/**\n * Created by lundfall on 01/09/16.\n */\n\nimport {Surface}        from 'arva-js/surfaces/Surface.js';\nimport ImageSurface                 from 'famous/surfaces/ImageSurface.js';\n\n\nexport class Utils {\n    static renderableIsSurface(renderable) {\n        return renderable instanceof Surface || renderable instanceof ImageSurface;\n    }\n\n    /**\n     * Returns tru if the object is not a class but still an object\n     * @param object\n     * @returns {boolean}\n     * @private\n     */\n    static isPlainObject(object) {\n        return typeof object == 'object' && object.constructor.name == 'Object';\n    }\n    \n    /**\n     * Adds to translations returns the result.\n     * @param translate1\n     * @param translate2\n     * @returns {Array}\n     */\n    static addTranslations(translate1, translate2) {\n        return [translate1[0] + translate2[0], translate1[1] + translate2[1], translate1[2] + translate2[2]];\n\n    }\n    /**\n     * Returns true if the renderable is complex and its size can be determined. Returns false if it is a surface\n     * or something else that doesn't have a getSize function specified\n     * @param renderable\n     * @private\n     */\n    static renderableIsComposite(renderable) {\n        return renderable.getSize && !(Utils.renderableIsSurface(renderable));\n    }\n\n    /**\n     * Uses either console.warn() or console.log() to log a mildly serious issue, depending on the user agent's availability.\n     * @param {String|Object} message\n     * @returns {void}\n     * @private\n     */\n    static warn(message) {\n        if (console.warn) {\n            console.warn(message);\n        } else {\n            console.log(message);\n        }\n    }\n\n    /**\n     * Specifying origin for true sized renderables doesn't work. Therefore we do a quick fix to adjust the\n     * translation according to the current faulty behaviour of famous.\n     * @param {Renderable}renderable The renderable of which we should correct\n     * @param {Array|Number} size  The size of this renderable\n     * @param {Array|Number} origin The origin\n     * @param {Array|Number} translate The current translation\n     * @param {SizeResolver} A size resolver that is keeping bookkeeping of the renderable\n     * @returns {*[]} The new translation taking this the current famous implementation into account\n     * @private\n     */\n    static adjustPlacementForTrueSize(renderable, size, origin, translate, sizeResolver) {\n        let newTranslation = [translate[0], translate[1], translate[2]];\n        for (let i = 0; i < 2; i++) {\n            if (size[i] === true && origin[i] !== 0) {\n                /* Because the size is set to true, it is interpreted as 1 by famous. We have to add 1 pixel\n                 *  to make up for this.\n                 */\n                newTranslation[i] -= (sizeResolver.getResolvedSize(renderable)[i] * origin[i] - 1);\n            }\n        }\n        return newTranslation;\n    }\n\n    static getRenderableGroupName(renderable) {\n        let { decorations } = renderable;\n\n        if (!!decorations.dock) {\n            /* 'filled' is a special subset of 'docked' renderables, that need to be rendered after the normal 'docked' renderables are rendered. */\n            return decorations.dock.dockMethod === 'fill' ? 'filled' : 'docked';\n        } else if (!!decorations.fullSize) {\n            return 'fullSize';\n        } else if (decorations.size || decorations.origin || decorations.align || decorations.translate) {\n            return 'traditional';\n        } else {\n            /* This occurs e.g. when a renderable is only marked @renderable, and its parent view has a @layout.custom decorator to define its context. */\n            return 'ignored';\n        }\n    }\n\n    static getRenderableID(renderable) {\n        let extractedRenderableID = (renderable.getID ?\n            renderable.getID() :\n            (renderable.layout ? renderable.layout.id : renderable.id));\n        return extractedRenderableID !== undefined ? extractedRenderableID : renderable._id;\n    }\n\n    /**\n     * For entities that handle options parameters (OptionObserver, LazyLoadedOptionClone) can be important to know whether\n     * an object is a plain object or not\n     *\n     * @param object\n     * @returns {boolean}\n     */\n    static isPlainObject(object) {\n        return typeof object === 'object' && object.constructor.name === 'Object'\n    }\n}\n",
    "static": true,
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/src/utils/view/Utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1548,
    "kind": "class",
    "name": "Utils",
    "memberof": "src/utils/view/Utils.js",
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils",
    "access": "public",
    "export": true,
    "importPath": "arva-js/src/utils/view/Utils.js",
    "importStyle": "{Utils}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 1549,
    "kind": "method",
    "name": "renderableIsSurface",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.renderableIsSurface",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1550,
    "kind": "method",
    "name": "isPlainObject",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.isPlainObject",
    "access": "private",
    "description": "Returns tru if the object is not a class but still an object",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1551,
    "kind": "method",
    "name": "addTranslations",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.addTranslations",
    "access": "public",
    "description": "Adds to translations returns the result.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "translate1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "translate2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1552,
    "kind": "method",
    "name": "renderableIsComposite",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.renderableIsComposite",
    "access": "private",
    "description": "Returns true if the renderable is complex and its size can be determined. Returns false if it is a surface\nor something else that doesn't have a getSize function specified",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "renderable",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1553,
    "kind": "method",
    "name": "warn",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.warn",
    "access": "private",
    "description": "Uses either console.warn() or console.log() to log a mildly serious issue, depending on the user agent's availability.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 1554,
    "kind": "method",
    "name": "adjustPlacementForTrueSize",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.adjustPlacementForTrueSize",
    "access": "private",
    "description": "Specifying origin for true sized renderables doesn't work. Therefore we do a quick fix to adjust the\ntranslation according to the current faulty behaviour of famous.",
    "lineNumber": 69,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*[]} The new translation taking this the current famous implementation into account"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "{Renderable}renderable",
        "description": "The renderable of which we should correct"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": "The size of this renderable"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": "The origin"
      },
      {
        "nullable": null,
        "types": [
          "Array",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": "The current translation"
      },
      {
        "nullable": null,
        "types": [
          "SizeResolver"
        ],
        "spread": false,
        "optional": false,
        "name": "A",
        "description": "size resolver that is keeping bookkeeping of the renderable"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*[]"
      ],
      "spread": false,
      "description": "The new translation taking this the current famous implementation into account"
    }
  },
  {
    "__docId__": 1555,
    "kind": "method",
    "name": "getRenderableGroupName",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.getRenderableGroupName",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1556,
    "kind": "method",
    "name": "getRenderableID",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.getRenderableID",
    "access": "public",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "params": [
      {
        "name": "renderable",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1557,
    "kind": "method",
    "name": "isPlainObject",
    "memberof": "src/utils/view/Utils.js~Utils",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/utils/view/Utils.js~Utils.isPlainObject",
    "access": "public",
    "description": "For entities that handle options parameters (OptionObserver, LazyLoadedOptionClone) can be important to know whether\nan object is a plain object or not",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "kind": "index",
    "content": "\n# Why Arva?\n\n\nArva solves the problem of layout and animation without the need to bother with CSS nor HTML. While CSS is still used for **styling** of the content, whereas **positioning** and **sizing** is handled through different processes.\nArva abstracts away some of the concerns that many front-end developers face,\nwhich includes CSS deep-dives and directives like `display: inline-block` `margin:auto`, `position:relative`, `clear:left`, `float: right`, `zoom: 1` `overflow: auto`, `-webkit-box-sizing: border-box` and so on.\n\nEven modern paradigms like `flexbox` won't be necessary anymore. In addition, Arva refrains from using any templating language, and only uses standard EcmaScript syntax. Let's get started.\n\n\n## Documentation\nYou can read the latest documentation about Arva <a href=\"http://arva.io/arva-js/\">here</a>.\n\n## Installation\n -  Clone this repository.\n -  Install [npm](https://www.npmjs.com/)\n - `npm i`\n - `npm run build` OR\n - Install [Watchman](https://facebook.github.io/watchman/) and wml (`npm i wml -g`)\n\n## License\n[NPOSL-3.0](https://opensource.org/licenses/NPOSL-3.0) - A variant of the Open Software License 3.0, this license requires that the organization using it is a non-profit and that no revenue is generated from sale of the software.\n\nOther licenses are available upon request, contact info@bizboard.nl for more information.\n\n",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"arva-js\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Arva Foundation is the core of the Arva User Experience Platform where developers have complete freedom to hack their creations. Built to be a complete substitute for frameworks like React and Angular, Arva plays well with others by emphasising on ECMAScript syntax and aiming for compatability with the W3C Components specification.\",\n  \"main\": \"src/main.js\",\n  \"homepage\": \"http://arva.io\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/Arva/arva-js.git\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha --compilers js:babel/register --recursive --timeout 15000\",\n    \"esdoc\": \"node_modules/.bin/esdoc\"\n  },\n  \"bugs\": {\n    \"url\": \"https://github.com/Arva/arva-js/issues\"\n  },\n  \"jspm\": {\n    \"directories\": {\n      \"lib\": \"src\"\n    },\n    \"dependencies\": {\n      \"bowser\": \"npm:bowser@^1.0.0\",\n      \"camelcase\": \"npm:camelcase@^2.1.0\",\n      \"eventemitter3\": \"npm:eventemitter3@^1.2.0\",\n      \"famous-flex\": \"github:bizboard/famous-flex@master\",\n      \"fastclick\": \"npm:fastclick@^1.0.6\",\n      \"firebase\": \"github:firebase/firebase-bower@^3.7.3\",\n      \"lodash\": \"npm:lodash@^4.13.1\",\n      \"lodash-decorators\": \"npm:lodash-decorators@^3.0.1\",\n      \"ordered-hashmap\": \"npm:ordered-hashmap@^1.0.0\",\n      \"request-animation-frame-mock\": \"github:erykpiast/request-animation-frame-mock@^0.1.8\",\n      \"xml2js\": \"npm:xml2js@^0.4.16\"\n    },\n    \"devDependencies\": {\n      \"babel\": \"npm:babel-core@^5.8.24\",\n      \"babel-runtime\": \"npm:babel-runtime@^5.8.24\",\n      \"core-js\": \"npm:core-js@^1.1.4\",\n      \"esdoc\": \"git+https://git@github.com/typhonjs-node-esdoc/esdoc.git\",\n      \"fs\": \"github:jspm/nodelibs-fs@^0.1.2\",\n      \"path\": \"npm:jspm-nodelibs-path@0.2.3\",\n      \"process\": \"npm:jspm-nodelibs-process@0.2.1\",\n      \"traceur\": \"github:jmcriffey/bower-traceur@^0.0.92\",\n      \"traceur-runtime\": \"github:jmcriffey/bower-traceur-runtime@0.0.90\"\n    }\n  },\n\n  \"author\": \"Karl Lundfall <karl@bizboard.nl>, Hans van den Akker <hans@bizboard.nl>\",\n  \"license\": \"NPOSL-3.0\",\n  \"devDependencies\": {\n    \"babel\": \"^5.8.23\",\n    \"babel-runtime\": \"^6.6.1\",\n    \"chai\": \"^3.4.0\",\n    \"esdoc\": \"^1.0.4\",\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\n    \"esdoc-inject-style-plugin\": \"^1.0.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^3.1.0\",\n    \"isparta\": \"^3.1.0\",\n    \"jspm\": \"^0.16.32\",\n    \"lodash\": \"^4.6.1\",\n    \"mocha\": \"^2.1.0\",\n    \"request-animation-frame-mock\": \"git+https://github.com/erykpiast/request-animation-frame-mock.git\",\n    \"sinon\": \"^1.17.3\",\n    \"systemjs\": \"^0.19.5\"\n  }\n}\n",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": "# What's Arva JS?\n\nArva is a fresh-cut framework for building interactive applications. **Applications** that are **interactive**\nleverage complete built-in animation capabilities along with powerful state maintenance that successfully maintains UI interaction in a highly interactive and fluid way.\nIn other words, this is not only an **animation library** (GreenSock, Velocity.js etc), nor an **application framework** (React, Angular, etc), but a holistic solution of both.\n\nArva solves the problem of layout and animation without the need to bother with CSS nor HTML. While CSS is still used for **styling** of the content, whereas **positioning** and **sizing** is handled in a more pragmatic way.\nArva abstracts away some of the concerns that many front-end developers face,\nwhich includes CSS deep-dives and directives like `display: inline-block` `margin:auto`, `position:relative`, `clear:left`, `float: right`, `zoom: 1` `overflow: auto`, `-webkit-box-sizing: border-box` and so on.\n\nEven modern paradigms like `flexbox` won't be necessary anymore. In addition, Arva refrains from using any templating language, and only uses standard EcmaScript syntax. Let's get started.\n\n\n# Layout and hierarchy\n\nThe API surface of Arva [layout](https://github.com/Arva/demo) in much smaller than that of CSS. We have 11 available layout operators to be learned once, which can be combined with each other\nto create powerful permutations of features.\n\nAnd because an example is usually the best way to start out an explanation, we demonstrate how to construct the following layout.\n\n![layout-example =250x](asset/layout.png)\n\nWe see a top bar, a background color, and a bottom button, along with some box shadows to create a sense of depth in line with the current fashion of material design.\n\n\nThis is achieved with the following code.\n\n\n```\n\nexport class RootView extends View {\n\n    @layout\n        /* Take up the full space*/\n        .fullSize()\n        /* -1 negative z-index to make space for the foreground content*/\n        .translate(0, 0, -1)\n        /* The surface is the most fundamental element to compose views with */\n    background = Surface.with({properties: {backgroundColor: 'aliceblue' }});\n\n\n    @layout\n        /* Docking makes something appear at the top with a height of 44 pixels */\n        .dock.top(48)\n    /* This is a top bar */\n    topBar = TopBar.with({title: 'Dashboard'})\n\n    @layout\n        /* Stick bottom right, and translate upwards/left for margin*/\n        .stick.bottomRight()\n        .translate(-16, -16, 0)\n        .size(64, 64)\n    bottomButton = Button.with()\n\n}\n\n```\n\nThese definitions heavily make ES6 features [class fields](https://github.com/tc39/proposal-class-fields) and [decorators](https://github.com/tc39/proposal-decorators).\n\n[Full source code can be found here under 'layout'](https://github.com/Arva/demo)\nFor API reference regarding layout, see the [docs](http://arva.io/arva-js/class/src/layout/Decorators.js~Layout.html).\n\nAs you can see, all decorators of the same type ([layout](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-layout), [event](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-event), and [flow](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-flow)) can be chained when used.\n\nFor example,\n\n```\n    @layout.dock.top()\n        .size(undefined, true)\n    centeredText = Surface.with({content: 'This is centered!'})\n```\n\nIs the same as\n\n\n```\n    @layout.dock.top()\n    @layout.size(undefined, true)\n    centeredText = Surface.with({content: 'This is centered!'})\n```\n\n\n# Animations and states\n\nAnimations can be described using the [flow](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-flow) operator.\n\nThe core concept of Flow is to animate using any of the existing *layout* operators.\nWhen the renderable changes from one state to another using the layout operations,\ntheir **layout properties** are tweened into each other, creating the effect of seamless animation.\n\n\n```javascript\n    @flow.transition({duration: 200, curve: Easing.inCubic})(\n        layout.size(300, 300)\n    )\n    animatedSurface = Surface.with({properties: {backgroundColor: 'red'}});\n```\n\nFor a contextual example of using flow and animation, we made a sample component for showing and hiding a menu:\n\n![animation](asset/animation-demo.gif)\n\n[Source code can be found here under 'stateful-animations'](https://github.com/Arva/demo)\n\n# Data binding and Views\n\nEvery view is passed options by using the static method `with`:\n\n```\nclass HomeView extends View {\n    @layout.fullSize()\n    background = Surface.with({properties: {backgroundColor: 'red'}})\n}\n```\n\n(See the full source code of the view [here](https://pastebin.com/WzUJW3Vc))\n\nIn order to change an option dynamically, the background color in the example is defined as an option:\n\n\n```\n@bindings.setup({\n    backgroundColor: 'red'\n})\nclass HomeView extends View {\n....\n```\n\nThe `backgroundColor` can then be referenced inside the view:\n\n```\n    background = Surface.with({\n        properties:\n        {\n            backgroundColor: this.options.backgroundColor\n        }\n    })\n```\n\nIt can be changed through different triggers, one being [events](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-event).\n\n```\n    @event.on('click', function() {\n        this.options.backgroundColor = 'green';\n    })\n    background = Surface.with({\n            properties:\n                {backgroundColor: this.options.backgroundColor\n             }\n        })\n```\n\n\n## Two-way data binding\n\nData can go two ways. Referencing `inputOptions` creates a bi-directional data binding, where the value will be automatically synchronized.\n```\n    @layout.dock.top()\n        .size(undefined, true)\n    question = InputSurface.with({\n        placeholder: 'What is your name?',\n        value: this.inputOptions.myName\n    })\n\n    @layout.dock.top()\n        .size(undefined, true)\n    answer = Surface.with({\n        content: this.options.myName ?\n        `Your name is ${this.options.myName}` : `You have no name`\n    })\n```\n\nFor a more advanced example on databinding, we made an app that could come in handy when trying to calculate the\nvalue of your car after a crash:\n\n![logo](asset/dbinding-demo.gif)\n\n\n\n[Source code can be found here under 'data-binding'](https://github.com/Arva/demo)\n\n\n# But what about React?\n\nAt first glance, it might not be evident what the benefit of Arva is over other frameworks. In particular, the\nabsence of JSX or templating language seems foreign as almost every other framework is using their own custom language.\nAn app written with Arva is written with plain (draft stage) ECMAScript syntax. The strict adherence to this standard future-proofs Arva to\nbe able to run natively in the browser, and also opens up for more super powers as the ECMAScript standard progresses further.\n\nAnother important difference to recall is that Arva is an MVC framework, where heavy data logic is put in the controller, rather\nthan being view-only, as is the case with frameworks like React. React and Arva do in this regard have different approaches,\nsince React is a framework intended as a component of a bigger picture, whereas Arva is the stand-alone solution for your entire app.\n\nLet's consider a very simple example of an Arva view and its (approximate) counter-part in React,\nto serve as a basis for further discussion.\n\n\n```javascript\n@bindings.setup({\n    titleText: 'Welcome'\n})\nclass HomeView extends View {\n    @layout.dock.top(44)\n    topBar = TopBar.with({titleText:this.options.titleText})\n\n    @layout.dock.fill()\n    content = Content.with()\n\n    changeTitle(newTitle) {\n        this.options.titleText = newTitle\n    }\n}\n```\n\nAnd now in React. Note that this definition won't include positioning and sizing, which would need custom CSS/HTML configurations.\n\n```javascript\nclass HomeComponent extends Component {\n    constructor(props, context){\n        super(props, context);\n        this.state = {\n            titleText: props.titleText\n        }\n    }\n    changeTitle(newTitle) {\n        this.setState({titleText: newTitle})\n    }\n\n    render() {\n        return (\n            <TopBar titleText=this.state.titleText/>\n            <Content />\n        )\n    }\n\n}\nHomeComponent.defaultProps = {titleText: 'Welcome'};\n\n```\n\n\n## State updates\n\nReact is focused on building sound app logic, on simple views using the pure `render` function. Arva does not have a\nrender function, which means that when an update is needed (`setState` in React, or option assignment in Arva), Arva\ncan go a different route. When titleText is called, the function assigning `HomeView.topBar` will be called again\n(`TopBar.with({titleText:this.options.titleText})`), so that the TopBar updates.\n\nIn the case React, the render() function will be called upon invalidation, causing a re-render of both the TopBar *and* the content.\n\nWe chose to optimize state updates by taking control over the `options` object of each view, linking the accesses of each\noption to their relevant child views. When the child views are updated, the new options will be diffed with the old ones\nin order to restrict what children should be updated inside *that* view. The getters and setters work for an arbitrary\nlevel of nestedness inside the `options` object.\n\nBased on the above description, one might object with the concern that performing deep checks for every update sounds\nreally inefficient. In response to that we've learned by experience that the different `options` objects are generally\nnot nested or rather shallow, but rather the *View hierarchy* tends to be much more intricate. By avoiding huge\n(virtual) renders of completely updated view hierarchy we instead focus on limiting this and focusing on detecting a limited\nsubset of `option` updates. For React developers, you might think of the options propagation to children as\n if every View was a `PureComponent`.\n\n\n\n## Layout and Animation\n\nBy not using JSX or other markup, we can use ES2017 decorators to focus on layout. Layout is abstracted away from the user\nin order to provide flexible animations. The actual HTML output of Arva results in absolutely positioned elements in a rather\n flat structure, in order to be as flexible as possible. When using a normal framework that requires you to define the\n HTML manually, animations are usually implemented in a bit more awkward fashion.\n\nAll positioning and sizing done through decorators is hardware accelerated, so\nthe programmer can comfortably know that the animations defined won't stress the browser unnecessarily.\nThe decorator structure of Arva provides a natural solution for layout definition. In order to clarify why this is important,\n we will revisit the example we covered in a previous section, with the animating hamburger icon:\n\n![button](asset/button.gif)\n\nThe animation declaration is optimized in being as straight forward as possible, so that transition states are defined\nin an additive nature from the previous position, while tasks like centering content in relation to parent and proportional\n size are still easy to achieve.\n\nHere's the code, with plenty of comments, for clarity:\n\n```javascript\n    /* We start with the top part of the hamburger,\n    * which starts in a horizontal state\n    */\n    /* We center it as default, but it's translated relative to that further down */\n    @layout.stick.center()\n    /* Size is 60% of parent size and 3 pixels high */\n        .size(0.6, 3)\n    /* options.isOpen is a boolean signaling whether the menu is open or not */\n    @dynamic(({isOpen}) =>\n        /* This is the animation for going to the X.\n        * This makes the top bar tilted. */\n        isOpen ? flow\n                .transition()(\n                    /* The first part of tilting the stick involves\n                    * centering all three lines together.\n                    * That means that we center the top part, by translating it to the middle */\n                    layout\n                        .translate(0, 0, 0))\n                .transition()(\n                    /* We then rotate it 45 degrees, which is the same as Math.PI / 4 */\n                    layout\n                        .rotate(0, 0, Math.PI / 4))\n            :\n            /* We translate 8 pixels upwards in the default state */\n            flow.transition()(\n                /* (if coming back), compress again before going to the original state */\n                layout.rotate(0, 0, 0)\n            ).transition() (\n                layout.translate(0, -8, 0)\n            )\n    )\n    /* We defined a simple component with a white background\n    * which is used for every portion of the icon\n    */\n    topStick = WhiteShape.with();\n\n    /* The middle part is easy. We just hide it when the icon turns into\n    *  the X (since that's just two lines instaed of three) */\n    @dynamic(({isOpen}) =>\n        isOpen ? flow.transition()(\n            layout.opacity(0)\n            ) :\n            flow.transition()(\n                layout\n                    .stick.center()\n                    .translate(0, 0, 0)\n                    .size(0.6, 3)\n                    .opacity(1)\n            )\n    )\n    centerStick = WhiteShape.with();\n\n    /* The bottom part is very similar to the top one,\n    * but with a rotation going in the opposite direction,\n    * and a translate 8 pixels down instead of 8 pixels up\n    */\n    @layout.stick.center()\n        .size(0.6, 3)\n    @dynamic(({isOpen}) =>\n        isOpen ? flow\n                .transition({})(\n                    layout\n                        .translate(0, 0, 0))\n                .transition()(\n                    layout\n                        .rotate(0, 0, - Math.PI / 4))\n            :\n            flow.transition()(\n                layout.rotate(0, 0, 0)\n            ).transition() (\n                layout.translate(0, 8, 0)\n            )\n    )\n    bottomStick = WhiteShape.with();\n```\n\n# The bigger picture\n\nWe will continue to improve Arva JS in every aspect, including performance, UX possibilities and code brevity. It's a framework\nthat is going to be frequently revised and evaluated for its goals.\n\nArva Foundation is just the start of a series of tools to accelerate digital product development.\nIf you want a sneak peak into our future, have a look at [arva.io].",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/esdoc-res/tutorial.md",
    "name": "./esdoc-res/tutorial.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualAsset",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/esdoc-res/manual-asset",
    "name": "./esdoc-res/manual-asset/",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/esdoc-res/tutorial.md",
    "name": "./esdoc-res/tutorial.md",
    "content": "# What's Arva JS?\n\nArva is a fresh-cut framework for building interactive applications. **Applications** that are **interactive**\nleverage complete built-in animation capabilities along with powerful state maintenance that successfully maintains UI interaction in a highly interactive and fluid way.\nIn other words, this is not only an **animation library** (GreenSock, Velocity.js etc), nor an **application framework** (React, Angular, etc), but a holistic solution of both.\n\nArva solves the problem of layout and animation without the need to bother with CSS nor HTML. While CSS is still used for **styling** of the content, whereas **positioning** and **sizing** is handled in a more pragmatic way.\nArva abstracts away some of the concerns that many front-end developers face,\nwhich includes CSS deep-dives and directives like `display: inline-block` `margin:auto`, `position:relative`, `clear:left`, `float: right`, `zoom: 1` `overflow: auto`, `-webkit-box-sizing: border-box` and so on.\n\nEven modern paradigms like `flexbox` won't be necessary anymore. In addition, Arva refrains from using any templating language, and only uses standard EcmaScript syntax. Let's get started.\n\n\n# Layout and hierarchy\n\nThe API surface of Arva [layout](https://github.com/Arva/demo) in much smaller than that of CSS. We have 11 available layout operators to be learned once, which can be combined with each other\nto create powerful permutations of features.\n\nAnd because an example is usually the best way to start out an explanation, we demonstrate how to construct the following layout.\n\n![layout-example =250x](asset/layout.png)\n\nWe see a top bar, a background color, and a bottom button, along with some box shadows to create a sense of depth in line with the current fashion of material design.\n\n\nThis is achieved with the following code.\n\n\n```\n\nexport class RootView extends View {\n\n    @layout\n        /* Take up the full space*/\n        .fullSize()\n        /* -1 negative z-index to make space for the foreground content*/\n        .translate(0, 0, -1)\n        /* The surface is the most fundamental element to compose views with */\n    background = Surface.with({properties: {backgroundColor: 'aliceblue' }});\n\n\n    @layout\n        /* Docking makes something appear at the top with a height of 44 pixels */\n        .dock.top(48)\n    /* This is a top bar */\n    topBar = TopBar.with({title: 'Dashboard'})\n\n    @layout\n        /* Stick bottom right, and translate upwards/left for margin*/\n        .stick.bottomRight()\n        .translate(-16, -16, 0)\n        .size(64, 64)\n    bottomButton = Button.with()\n\n}\n\n```\n\nThese definitions heavily make ES6 features [class fields](https://github.com/tc39/proposal-class-fields) and [decorators](https://github.com/tc39/proposal-decorators).\n\n[Full source code can be found here under 'layout'](https://github.com/Arva/demo)\nFor API reference regarding layout, see the [docs](http://arva.io/arva-js/class/src/layout/Decorators.js~Layout.html).\n\nAs you can see, all decorators of the same type ([layout](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-layout), [event](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-event), and [flow](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-flow)) can be chained when used.\n\nFor example,\n\n```\n    @layout.dock.top()\n        .size(undefined, true)\n    centeredText = Surface.with({content: 'This is centered!'})\n```\n\nIs the same as\n\n\n```\n    @layout.dock.top()\n    @layout.size(undefined, true)\n    centeredText = Surface.with({content: 'This is centered!'})\n```\n\n\n# Animations and states\n\nAnimations can be described using the [flow](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-flow) operator.\n\nThe core concept of Flow is to animate using any of the existing *layout* operators.\nWhen the renderable changes from one state to another using the layout operations,\ntheir **layout properties** are tweened into each other, creating the effect of seamless animation.\n\n\n```javascript\n    @flow.transition({duration: 200, curve: Easing.inCubic})(\n        layout.size(300, 300)\n    )\n    animatedSurface = Surface.with({properties: {backgroundColor: 'red'}});\n```\n\nFor a contextual example of using flow and animation, we made a sample component for showing and hiding a menu:\n\n![animation](asset/animation-demo.gif)\n\n[Source code can be found here under 'stateful-animations'](https://github.com/Arva/demo)\n\n# Data binding and Views\n\nEvery view is passed options by using the static method `with`:\n\n```\nclass HomeView extends View {\n    @layout.fullSize()\n    background = Surface.with({properties: {backgroundColor: 'red'}})\n}\n```\n\n(See the full source code of the view [here](https://pastebin.com/WzUJW3Vc))\n\nIn order to change an option dynamically, the background color in the example is defined as an option:\n\n\n```\n@bindings.setup({\n    backgroundColor: 'red'\n})\nclass HomeView extends View {\n....\n```\n\nThe `backgroundColor` can then be referenced inside the view:\n\n```\n    background = Surface.with({\n        properties:\n        {\n            backgroundColor: this.options.backgroundColor\n        }\n    })\n```\n\nIt can be changed through different triggers, one being [events](http://localhost:63342/arva-js/docs/variable/index.html#static-variable-event).\n\n```\n    @event.on('click', function() {\n        this.options.backgroundColor = 'green';\n    })\n    background = Surface.with({\n            properties:\n                {backgroundColor: this.options.backgroundColor\n             }\n        })\n```\n\n\n## Two-way data binding\n\nData can go two ways. Referencing `inputOptions` creates a bi-directional data binding, where the value will be automatically synchronized.\n```\n    @layout.dock.top()\n        .size(undefined, true)\n    question = InputSurface.with({\n        placeholder: 'What is your name?',\n        value: this.inputOptions.myName\n    })\n\n    @layout.dock.top()\n        .size(undefined, true)\n    answer = Surface.with({\n        content: this.options.myName ?\n        `Your name is ${this.options.myName}` : `You have no name`\n    })\n```\n\nFor a more advanced example on databinding, we made an app that could come in handy when trying to calculate the\nvalue of your car after a crash:\n\n![logo](asset/dbinding-demo.gif)\n\n\n\n[Source code can be found here under 'data-binding'](https://github.com/Arva/demo)\n\n\n# But what about React?\n\nAt first glance, it might not be evident what the benefit of Arva is over other frameworks. In particular, the\nabsence of JSX or templating language seems foreign as almost every other framework is using their own custom language.\nAn app written with Arva is written with plain (draft stage) ECMAScript syntax. The strict adherence to this standard future-proofs Arva to\nbe able to run natively in the browser, and also opens up for more super powers as the ECMAScript standard progresses further.\n\nAnother important difference to recall is that Arva is an MVC framework, where heavy data logic is put in the controller, rather\nthan being view-only, as is the case with frameworks like React. React and Arva do in this regard have different approaches,\nsince React is a framework intended as a component of a bigger picture, whereas Arva is the stand-alone solution for your entire app.\n\nLet's consider a very simple example of an Arva view and its (approximate) counter-part in React,\nto serve as a basis for further discussion.\n\n\n```javascript\n@bindings.setup({\n    titleText: 'Welcome'\n})\nclass HomeView extends View {\n    @layout.dock.top(44)\n    topBar = TopBar.with({titleText:this.options.titleText})\n\n    @layout.dock.fill()\n    content = Content.with()\n\n    changeTitle(newTitle) {\n        this.options.titleText = newTitle\n    }\n}\n```\n\nAnd now in React. Note that this definition won't include positioning and sizing, which would need custom CSS/HTML configurations.\n\n```javascript\nclass HomeComponent extends Component {\n    constructor(props, context){\n        super(props, context);\n        this.state = {\n            titleText: props.titleText\n        }\n    }\n    changeTitle(newTitle) {\n        this.setState({titleText: newTitle})\n    }\n\n    render() {\n        return (\n            <TopBar titleText=this.state.titleText/>\n            <Content />\n        )\n    }\n\n}\nHomeComponent.defaultProps = {titleText: 'Welcome'};\n\n```\n\n\n## State updates\n\nReact is focused on building sound app logic, on simple views using the pure `render` function. Arva does not have a\nrender function, which means that when an update is needed (`setState` in React, or option assignment in Arva), Arva\ncan go a different route. When titleText is called, the function assigning `HomeView.topBar` will be called again\n(`TopBar.with({titleText:this.options.titleText})`), so that the TopBar updates.\n\nIn the case React, the render() function will be called upon invalidation, causing a re-render of both the TopBar *and* the content.\n\nWe chose to optimize state updates by taking control over the `options` object of each view, linking the accesses of each\noption to their relevant child views. When the child views are updated, the new options will be diffed with the old ones\nin order to restrict what children should be updated inside *that* view. The getters and setters work for an arbitrary\nlevel of nestedness inside the `options` object.\n\nBased on the above description, one might object with the concern that performing deep checks for every update sounds\nreally inefficient. In response to that we've learned by experience that the different `options` objects are generally\nnot nested or rather shallow, but rather the *View hierarchy* tends to be much more intricate. By avoiding huge\n(virtual) renders of completely updated view hierarchy we instead focus on limiting this and focusing on detecting a limited\nsubset of `option` updates. For React developers, you might think of the options propagation to children as\n if every View was a `PureComponent`.\n\n\n\n## Layout and Animation\n\nBy not using JSX or other markup, we can use ES2017 decorators to focus on layout. Layout is abstracted away from the user\nin order to provide flexible animations. The actual HTML output of Arva results in absolutely positioned elements in a rather\n flat structure, in order to be as flexible as possible. When using a normal framework that requires you to define the\n HTML manually, animations are usually implemented in a bit more awkward fashion.\n\nAll positioning and sizing done through decorators is hardware accelerated, so\nthe programmer can comfortably know that the animations defined won't stress the browser unnecessarily.\nThe decorator structure of Arva provides a natural solution for layout definition. In order to clarify why this is important,\n we will revisit the example we covered in a previous section, with the animating hamburger icon:\n\n![button](asset/button.gif)\n\nThe animation declaration is optimized in being as straight forward as possible, so that transition states are defined\nin an additive nature from the previous position, while tasks like centering content in relation to parent and proportional\n size are still easy to achieve.\n\nHere's the code, with plenty of comments, for clarity:\n\n```javascript\n    /* We start with the top part of the hamburger,\n    * which starts in a horizontal state\n    */\n    /* We center it as default, but it's translated relative to that further down */\n    @layout.stick.center()\n    /* Size is 60% of parent size and 3 pixels high */\n        .size(0.6, 3)\n    /* options.isOpen is a boolean signaling whether the menu is open or not */\n    @dynamic(({isOpen}) =>\n        /* This is the animation for going to the X.\n        * This makes the top bar tilted. */\n        isOpen ? flow\n                .transition()(\n                    /* The first part of tilting the stick involves\n                    * centering all three lines together.\n                    * That means that we center the top part, by translating it to the middle */\n                    layout\n                        .translate(0, 0, 0))\n                .transition()(\n                    /* We then rotate it 45 degrees, which is the same as Math.PI / 4 */\n                    layout\n                        .rotate(0, 0, Math.PI / 4))\n            :\n            /* We translate 8 pixels upwards in the default state */\n            flow.transition()(\n                /* (if coming back), compress again before going to the original state */\n                layout.rotate(0, 0, 0)\n            ).transition() (\n                layout.translate(0, -8, 0)\n            )\n    )\n    /* We defined a simple component with a white background\n    * which is used for every portion of the icon\n    */\n    topStick = WhiteShape.with();\n\n    /* The middle part is easy. We just hide it when the icon turns into\n    *  the X (since that's just two lines instaed of three) */\n    @dynamic(({isOpen}) =>\n        isOpen ? flow.transition()(\n            layout.opacity(0)\n            ) :\n            flow.transition()(\n                layout\n                    .stick.center()\n                    .translate(0, 0, 0)\n                    .size(0.6, 3)\n                    .opacity(1)\n            )\n    )\n    centerStick = WhiteShape.with();\n\n    /* The bottom part is very similar to the top one,\n    * but with a rotation going in the opposite direction,\n    * and a translate 8 pixels down instead of 8 pixels up\n    */\n    @layout.stick.center()\n        .size(0.6, 3)\n    @dynamic(({isOpen}) =>\n        isOpen ? flow\n                .transition({})(\n                    layout\n                        .translate(0, 0, 0))\n                .transition()(\n                    layout\n                        .rotate(0, 0, - Math.PI / 4))\n            :\n            flow.transition()(\n                layout.rotate(0, 0, 0)\n            ).transition() (\n                layout.translate(0, 8, 0)\n            )\n    )\n    bottomStick = WhiteShape.with();\n```\n\n# The bigger picture\n\nWe will continue to improve Arva JS in every aspect, including performance, UX possibilities and code brevity. It's a framework\nthat is going to be frequently revised and evaluated for its goals.\n\nArva Foundation is just the start of a series of tools to accelerate digital product development.\nIf you want a sneak peak into our future, have a look at [arva.io].",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/esdoc-res/getting-started/installation.md",
    "name": "./esdoc-res/getting-started/installation.md",
    "content": "# Getting started\n\n## Prerequisites\n* An installation of NPM and basic understanding of it.\n* Basic understanding of Javascript and the ES6/7 (ES2015) semantics.\n\n## Installation\nThe easiest way to get started quickly is by cloning the <a href=\"https://github.com/Arva/arva-seed\">Arva Seed</a> project. This project contains all the necessary components and default\nsettings to build a hello world application across multiple platforms.\n\n```bash\nnpm install -g cordova@6.5.0\ngit clone https://github.com/Arva/arva-seed.git\ncd arva-seed\nnpm i\n```\n\n## On we go!\nExcited? You should be! Let's move on!\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/lundfall/Documents/bizboard/arva-js/esdoc-res/getting-started/first-app.md",
    "name": "./esdoc-res/getting-started/first-app.md",
    "content": "# Writing your first application\nNow that you've successfully Arva, you've already got the seed project, which is your starting point for building a new app. Let's have a look at the main components of an Arva seed project.\n\n### 1. App.js ###\nIn _src/App.js_ you'll find the entry point to your freshly cloned app. This class is the basis of our App. We instantiate our controllers here, and hook them up to the Router that automatically handles switching between controllers when the page URL changes. The inner workings of App.js are elaborated by inline comments:\n\n\n```javascript\nimport {App as ArvaApp}             from 'arva-js/core/App.js';\n\n/* Importing CSS in jspm bundled builds injects them into the DOM automatically */\nimport './famous.css';\nimport './fonts.css';\n\n/* Here we import all controllers we want to use in the app */\nimport {HomeController}             from './controllers/HomeController.js';\n\nexport class App extends ArvaApp {\n\n    static controllers = [HomeController];\n\n\n    /**\n     *  Called before the App is constructed and before the basic components (Router, Famous Context, Controllers, DataSource)\n     *  have loaded.\n     */\n    static initialize(){\n        this.start();\n    }\n\n    /**\n     * Called after the Router, Famous Context, and Controllers have been instantiated,\n     * but before any Controller method is executed by the Router. Keep in mind that there is still\n     * a static context here, so no access to \"this\" of the App instance can be used yet, outside of the static \"this.references\".\n     */\n    static loaded(){\n        /* Instantiate things you need before the router is executed here. For example:\n         *\n         * this.references.menu = Injection.get(Menu); */\n    }\n\n    /**\n     * Called by super class after all components (routing, controllers, views, etc.) have been loaded by the Dependency Injection engine.\n     */\n    done(){\n    }\n}\n\ndocument.addEventListener('deviceready', App.initialize.bind(App));\n```\n\n### 2. HomeController.js ###\nIn our App class we imported a HomeController, and made it the default controller called by the Router if no route is present in the URL.\nThis controller was already created in _/src/controllers/HomeController.js_ and shows how easy it is to set up logic in Arva apps.\n\n\n```javascript\nimport {Controller}                 from 'arva-js/core/Controller.js';\nimport {HomeView}                   from '../views/HomeView.js';\n\nexport class HomeController extends Controller {\n\n    Index(){\n        if(!this.homeView) {\n            this.homeView = new HomeView({welcomeName: 'world'});\n        }\n        return this.homeView;\n    }\n\n}\n```\n\n### 3. HomeView.js ###\nThe view we used in our HomeController is already present in _/src/views/HomeView.js_. This is where the visual components of the app can be added.\n\n\n```javascript\nimport Surface              from 'famous/core/Surface.js';\nimport {View}               from 'arva-js/core/View.js';\nimport {layout, event}      from 'arva-js/layout/Decorators.js';\n\nexport class HomeView extends View {\n\n    @layout.size(~100, ~25)\n        .stick.center()\n    message = new Surface({content: `Hello ${this.options.welcomeName}`});\n\n}\n```\n\n### 4. Building and previewing ###\nIn order to transpile all our neat ES6 code to compatible ES5 code we need to execute `npm run build` in the base Arva seed folder. The transpiled code will be saved in _/www/bundle.js_. You can also use `npm run watch` for continuous watching and recompilation of changed files.\n\n\n\nNow that you've finished building your first app, it's time to see how it looks like. Open _/www/index.html_ in your browser and behold your very first Arva application!\n\nThis is what _index.html_ looks like:\n```html\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' data: 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; media-src *\">\n    <meta name=\"format-detection\" content=\"telephone=no\">\n    <meta name=\"msapplication-tap-highlight\" content=\"no\">\n    <meta name=\"mobile-web-app-capable\" content=\"yes\"/>\n    <meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/>\n    <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/>\n    <meta name=\"viewport\" content=\"user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, width=device-width\">\n</head>\n<body style=\"background-color: rgb(230, 230, 230)\">\n<script type=\"text/javascript\" src=\"cordova.js\"></script>\n<script type=\"application/javascript\" src=\"bundle.js\"></script>\n</body>\n</html>\n```\n",
    "static": true,
    "access": "public"
  }
]